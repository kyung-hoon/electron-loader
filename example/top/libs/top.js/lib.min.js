var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {

	if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	var deletedIds = [];

	var _slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};

	var version = "1.11.3",
	    jQuery = function jQuery(selector, context) {
		return new jQuery.fn.init(selector, context);
	},
	    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	    rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([\da-z])/gi,
	    fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {
		jquery: version,

		constructor: jQuery,

		selector: "",

		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		get: function get(num) {
			return num != null ? num < 0 ? this[num + this.length] : this[num] : _slice.call(this);
		},

		pushStack: function pushStack(elems) {
			var ret = jQuery.merge(this.constructor(), elems);

			ret.prevObject = this;
			ret.context = this.context;

			return ret;
		},

		each: function each(callback, args) {
			return jQuery.each(this, callback, args);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor(null);
		},

		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var src,
		    copyIsArray,
		    copy,
		    name,
		    options,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		if (typeof target === "boolean") {
			deep = target;

			target = arguments[i] || {};
			i++;
		}

		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {
			if ((options = arguments[i]) != null) {
				for (name in options) {
					src = target[name];
					copy = options[name];

					if (target === copy) {
						continue;
					}

					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						target[name] = jQuery.extend(deep, clone, copy);
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		return target;
	};

	jQuery.extend({
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray || function (obj) {
			return jQuery.type(obj) === "array";
		},

		isWindow: function isWindow(obj) {
			return obj != null && obj == obj.window;
		},

		isNumeric: function isNumeric(obj) {
			return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		isPlainObject: function isPlainObject(obj) {
			var key;

			if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			try {
				if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false;
				}
			} catch (e) {
				return false;
			}

			if (support.ownLast) {
				for (key in obj) {
					return hasOwn.call(obj, key);
				}
			}

			for (key in obj) {}

			return key === undefined || hasOwn.call(obj, key);
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		globalEval: function globalEval(data) {
			if (data && jQuery.trim(data)) {
				(window.execScript || function (data) {
					window["eval"].call(window, data);
				})(data);
			}
		},

		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function nodeName(elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function each(obj, callback, args) {
			var value,
			    i = 0,
			    length = obj.length,
			    isArray = isArraylike(obj);

			if (args) {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				}
			} else {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				}
			}

			return obj;
		},

		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArraylike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			var len;

			if (arr) {
				if (indexOf) {
					return indexOf.call(arr, elem, i);
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

				for (; i < len; i++) {
					if (i in arr && arr[i] === elem) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			while (j < len) {
				first[i++] = second[j++];
			}

			if (len !== len) {
				while (second[j] !== undefined) {
					first[i++] = second[j++];
				}
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		map: function map(elems, callback, arg) {
			var value,
			    i = 0,
			    length = elems.length,
			    isArray = isArraylike(elems),
			    ret = [];

			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			return concat.apply([], ret);
		},

		guid: 1,

		proxy: function proxy(fn, context) {
			var args, proxy, tmp;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function now() {
			return +new Date();
		},

		support: support
	});

	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArraylike(obj) {
		var length = "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		if (obj.nodeType === 1 && length) {
			return true;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle = function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,
		    setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,
		    expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},
		    MAX_NEGATIVE = 1 << 31,
		    hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,
		    indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
		    whitespace = "[\\x20\\t\\r\\n\\f]",
		    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
		    identifier = characterEncoding.replace("w", "w#"),
		    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
		    rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + characterEncoding + ")"),
			"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
			"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),

			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,
		    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,
		    rescape = /'|\\/g,
		    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;

			return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},
		    unloadHandler = function unloadHandler() {
			setDocument();
		};

		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ? function (target, els) {
					push_native.apply(target, slice.call(els));
				} : function (target, els) {
					var j = target.length,
					    i = 0;

					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;

			if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
				setDocument(context);
			}

			context = context || document;
			results = results || [];
			nodeType = context.nodeType;

			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			if (!seed && documentIsHTML) {
				if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
					if (m = match[1]) {
						if (nodeType === 9) {
							elem = context.getElementById(m);

							if (elem && elem.parentNode) {
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results;
							}
						}
					} else if (match[2]) {
						push.apply(results, context.getElementsByTagName(selector));
						return results;
					} else if ((m = match[3]) && support.getElementsByClassName) {
						push.apply(results, context.getElementsByClassName(m));
						return results;
					}
				}

				if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
					nid = old = expando;
					newContext = context;
					newSelector = nodeType !== 1 && selector;

					if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
						groups = tokenize(selector);

						if (old = context.getAttribute("id")) {
							nid = old.replace(rescape, "\\$&");
						} else {
							context.setAttribute("id", nid);
						}
						nid = "[id='" + nid + "'] ";

						i = groups.length;
						while (i--) {
							groups[i] = nid + toSelector(groups[i]);
						}
						newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						newSelector = groups.join(",");
					}

					if (newSelector) {
						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {} finally {
							if (!old) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		function createCache() {
			var keys = [];

			function cache(key, value) {
				if (keys.push(key + " ") > Expr.cacheLength) {
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}

				div = null;
			}
		}

		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = attrs.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

			if (diff) {
				return diff;
			}

			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		support = Sizzle.support = {};

		isXML = Sizzle.isXML = function (elem) {
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    parent,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			document = doc;
			docElem = doc.documentElement;
			parent = doc.defaultView;

			if (parent && parent !== parent.top) {
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			documentIsHTML = !isXML(doc);

			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			support.getElementsByTagName = assert(function (div) {
				div.appendChild(doc.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !doc.getElementsByName || !doc.getElementsByName(expando).length;
			});

			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);

						return m && m.parentNode ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,
				    results = context.getElementsByTagName(tag);

				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			rbuggyMatches = [];

			rbuggyQSA = [];

			if (support.qsa = rnative.test(doc.querySelectorAll)) {
				assert(function (div) {
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					var input = doc.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (div) {
					support.disconnectedMatch = matches.call(div, "div");

					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			hasCompare = rnative.test(docElem.compareDocumentPosition);

			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			sortOrder = hasCompare ? function (a, b) {
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;

				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
					if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				if (!aup || !bup) {
					return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				while (ap[i] === bp[i]) {
					i++;
				}

				return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return doc;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],
			    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			sortInput = null;

			return results;
		};

		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				while (node = elem[i++]) {
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}


			return ret;
		};

		Expr = Sizzle.selectors = {
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					if (match[3]) {
						match[2] = match[4] || match[5] || "";
					} else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ? function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    outerCache,
						    node,
						    diff,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType;

						if (parent) {
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
											return false;
										}
									}

									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							if (forward && useCache) {
								outerCache = parent[expando] || (parent[expando] = {});
								cache = outerCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
									if (node.nodeType === 1 && ++diff && node === elem) {
										outerCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
								diff = cache[1];
							} else {
								while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

									if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
										if (useCache) {
											(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
										}

										if (node === elem) {
											break;
										}
									}
								}
							}

							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					if (fn[expando]) {
						return fn(argument);
					}

					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				"not": markFunction(function (selector) {
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);

						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				"lang": markFunction(function (lang) {
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				"enabled": function enabled(elem) {
					return elem.disabled === false;
				},

				"disabled": function disabled(elem) {
					return elem.disabled === true;
				},

				"checked": function checked(elem) {
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				"empty": function empty(elem) {
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,

						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    checkNonElements = base && dir === "parentNode",
			    doneName = done++;

			return combinator.first ? function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
			} : function (elem, context, xml) {
				var oldCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});
							if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
								return newCache[2] = oldCache[2];
							} else {
								outerCache[dir] = newCache;

								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,
				    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
				    matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;

				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,
			    matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					if (matcher[expando]) {
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,
				    elems = seed || byElement && Expr.find["TAG"]("*", outermost),
				    dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context !== document && context;
				}

				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					if (bySet) {
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				matchedCount += i;
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						setMatched = condense(setMatched);
					}

					push.apply(results, setMatched);

					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				cached.selector = selector;
			}
			return cached;
		};

		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			if (match.length === 1) {
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		support.detectDuplicates = !!hasDuplicate;

		setDocument();

		support.sortDetached = assert(function (div1) {
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;

	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

	var risSimple = /^.[^:#\[\.,]*$/;

	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return jQuery.inArray(elem, qualifier) >= 0 !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret = [],
			    self = this,
			    len = self.length;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	var rootjQuery,
	    document = window.document,
	    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	    init = jQuery.fn.init = function (selector, context) {
		var match, elem;

		if (!selector) {
			return this;
		}

		if (typeof selector === "string") {
			if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			if (match && (match[1] || !context)) {
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;
				} else {
					elem = document.getElementById(match[2]);

					if (elem && elem.parentNode) {
						if (elem.id !== match[2]) {
							return rootjQuery.find(selector);
						}

						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}
			} else if (!context || context.jquery) {
				return (context || rootjQuery).find(selector);
			} else {
				return this.constructor(context).find(selector);
			}
		} else if (selector.nodeType) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		} else if (jQuery.isFunction(selector)) {
			return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray(selector, this);
	};

	init.prototype = jQuery.fn;

	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	    guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.extend({
		dir: function dir(elem, _dir, until) {
			var matched = [],
			    cur = elem[_dir];

			while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
				if (cur.nodeType === 1) {
					matched.push(cur);
				}
				cur = cur[_dir];
			}
			return matched;
		},

		sibling: function sibling(n, elem) {
			var r = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n);
				}
			}

			return r;
		}
	});

	jQuery.fn.extend({
		has: function has(target) {
			var i,
			    targets = jQuery(target, this),
			    len = targets.length;

			return this.filter(function () {
				for (i = 0; i < len; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
					if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
		},

		index: function index(elem) {
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			if (typeof elem === "string") {
				return jQuery.inArray(this[0], jQuery(elem));
			}

			return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		do {
			cur = cur[dir];
		} while (cur && cur.nodeType !== 1);

		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents: function contents(elem) {
			return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var ret = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				ret = jQuery.filter(selector, ret);
			}

			if (this.length > 1) {
				if (!guaranteedUnique[name]) {
					ret = jQuery.unique(ret);
				}

				if (rparentsprev.test(name)) {
					ret = ret.reverse();
				}
			}

			return this.pushStack(ret);
		};
	});
	var rnotwhite = /\S+/g;

	var optionsCache = {};

	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	jQuery.Callbacks = function (options) {
		options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

		var firing,
		    memory,
		    _fired,
		    firingLength,
		    firingIndex,
		    firingStart,
		    list = [],
		    stack = !options.once && [],
		    fire = function fire(data) {
			memory = options.memory && data;
			_fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false;
					break;
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift());
					}
				} else if (memory) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		    self = {
			add: function add() {
				if (list) {
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && type !== "string") {
								add(arg);
							}
						});
					})(arguments);

					if (firing) {
						firingLength = list.length;
					} else if (memory) {
						firingStart = start;
						fire(memory);
					}
				}
				return this;
			},

			remove: function remove() {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);

							if (firing) {
								if (index <= firingLength) {
									firingLength--;
								}
								if (index <= firingIndex) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},

			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
			},

			empty: function empty() {
				list = [];
				firingLength = 0;
				return this;
			},

			disable: function disable() {
				list = stack = memory = undefined;
				return this;
			},

			disabled: function disabled() {
				return !list;
			},

			lock: function lock() {
				stack = undefined;
				if (!memory) {
					self.disable();
				}
				return this;
			},

			locked: function locked() {
				return !stack;
			},

			fireWith: function fireWith(context, args) {
				if (list && (!_fired || stack)) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					if (firing) {
						stack.push(args);
					} else {
						fire(args);
					}
				}
				return this;
			},

			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function then() {
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var fn = jQuery.isFunction(fns[i]) && fns[i];

							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
								} else {
									newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},

				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			_promise.pipe = _promise.then;

			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[3];

				_promise[tuple[1]] = list.add;

				if (stateString) {
					list.add(function () {
						_state = stateString;
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			_promise.promise(deferred);

			if (func) {
				func.call(deferred, deferred);
			}

			return deferred;
		},

		when: function when(subordinate) {
			var i = 0,
			    resolveValues = _slice.call(arguments),
			    length = resolveValues.length,
			    remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
			    deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
			    updateFunc = function updateFunc(i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (! --remaining) {
						deferred.resolveWith(contexts, values);
					}
				};
			},
			    progressValues,
			    progressContexts,
			    resolveContexts;

			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}

			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});

	var readyList;

	jQuery.fn.ready = function (fn) {
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({
		isReady: false,

		readyWait: 1,

		holdReady: function holdReady(hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		ready: function ready(wait) {
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			if (!document.body) {
				return setTimeout(jQuery.ready);
			}

			jQuery.isReady = true;

			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			readyList.resolveWith(document, [jQuery]);

			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	function detach() {
		if (document.addEventListener) {
			document.removeEventListener("DOMContentLoaded", completed, false);
			window.removeEventListener("load", completed, false);
		} else {
			document.detachEvent("onreadystatechange", completed);
			window.detachEvent("onload", completed);
		}
	}

	function completed() {
		if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			if (document.readyState === "complete") {
				setTimeout(jQuery.ready);
			} else if (document.addEventListener) {
				document.addEventListener("DOMContentLoaded", completed, false);

				window.addEventListener("load", completed, false);
			} else {
				document.attachEvent("onreadystatechange", completed);

				window.attachEvent("onload", completed);

				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch (e) {}

				if (top && top.doScroll) {
					(function doScrollCheck() {
						if (!jQuery.isReady) {

							try {
								top.doScroll("left");
							} catch (e) {
								return setTimeout(doScrollCheck, 50);
							}

							detach();

							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise(obj);
	};

	var strundefined = typeof undefined === "undefined" ? "undefined" : _typeof(undefined);

	var i;
	for (i in jQuery(support)) {
		break;
	}
	support.ownLast = i !== "0";

	support.inlineBlockNeedsLayout = false;

	jQuery(function () {
		var val, div, body, container;

		body = document.getElementsByTagName("body")[0];
		if (!body || !body.style) {
			return;
		}

		div = document.createElement("div");
		container = document.createElement("div");
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild(container).appendChild(div);

		if (_typeof(div.style.zoom) !== strundefined) {
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if (val) {
				body.style.zoom = 1;
			}
		}

		body.removeChild(container);
	});

	(function () {
		var div = document.createElement("div");

		if (support.deleteExpando == null) {
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch (e) {
				support.deleteExpando = false;
			}
		}

		div = null;
	})();

	jQuery.acceptData = function (elem) {
		var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
		    nodeType = +elem.nodeType || 1;

		return nodeType !== 1 && nodeType !== 9 ? false : !noData || noData !== true && elem.getAttribute("classid") === noData;
	};

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /([A-Z])/g;

	function dataAttr(elem, key, data) {
		if (data === undefined && elem.nodeType === 1) {

			var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
				} catch (e) {}

				jQuery.data(elem, key, data);
			} else {
				data = undefined;
			}
		}

		return data;
	}

	function isEmptyDataObject(obj) {
		var name;
		for (name in obj) {
			if (name === "data" && jQuery.isEmptyObject(obj[name])) {
				continue;
			}
			if (name !== "toJSON") {
				return false;
			}
		}

		return true;
	}

	function internalData(elem, name, data, pvt) {
		if (!jQuery.acceptData(elem)) {
			return;
		}

		var ret,
		    thisCache,
		    internalKey = jQuery.expando,
		    isNode = elem.nodeType,
		    cache = isNode ? jQuery.cache : elem,
		    id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

		if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
			return;
		}

		if (!id) {
			if (isNode) {
				id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if (!cache[id]) {
			cache[id] = isNode ? {} : { toJSON: jQuery.noop };
		}

		if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object" || typeof name === "function") {
			if (pvt) {
				cache[id] = jQuery.extend(cache[id], name);
			} else {
				cache[id].data = jQuery.extend(cache[id].data, name);
			}
		}

		thisCache = cache[id];

		if (!pvt) {
			if (!thisCache.data) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if (data !== undefined) {
			thisCache[jQuery.camelCase(name)] = data;
		}

		if (typeof name === "string") {
			ret = thisCache[name];

			if (ret == null) {
				ret = thisCache[jQuery.camelCase(name)];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData(elem, name, pvt) {
		if (!jQuery.acceptData(elem)) {
			return;
		}

		var thisCache,
		    i,
		    isNode = elem.nodeType,
		    cache = isNode ? jQuery.cache : elem,
		    id = isNode ? elem[jQuery.expando] : jQuery.expando;

		if (!cache[id]) {
			return;
		}

		if (name) {

			thisCache = pvt ? cache[id] : cache[id].data;

			if (thisCache) {
				if (!jQuery.isArray(name)) {
					if (name in thisCache) {
						name = [name];
					} else {
						name = jQuery.camelCase(name);
						if (name in thisCache) {
							name = [name];
						} else {
							name = name.split(" ");
						}
					}
				} else {
					name = name.concat(jQuery.map(name, jQuery.camelCase));
				}

				i = name.length;
				while (i--) {
					delete thisCache[name[i]];
				}

				if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
					return;
				}
			}
		}

		if (!pvt) {
			delete cache[id].data;

			if (!isEmptyDataObject(cache[id])) {
				return;
			}
		}

		if (isNode) {
			jQuery.cleanData([elem], true);
		} else if (support.deleteExpando || cache != cache.window) {
			delete cache[id];
		} else {
			cache[id] = null;
		}
	}

	jQuery.extend({
		cache: {},

		noData: {
			"applet ": true,
			"embed ": true,

			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function hasData(elem) {
			elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
			return !!elem && !isEmptyDataObject(elem);
		},

		data: function data(elem, name, _data) {
			return internalData(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			return internalRemoveData(elem, name);
		},

		_data: function _data(elem, name, data) {
			return internalData(elem, name, data, true);
		},

		_removeData: function _removeData(elem, name) {
			return internalRemoveData(elem, name, true);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			if (key === undefined) {
				if (this.length) {
					data = jQuery.data(elem);

					if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
						i = attrs.length;
						while (i--) {
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						jQuery._data(elem, "parsedAttrs", true);
					}
				}

				return data;
			}

			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					jQuery.data(this, key);
				});
			}

			return arguments.length > 1 ? this.each(function () {
				jQuery.data(this, key, value);
			}) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
		},

		removeData: function removeData(key) {
			return this.each(function () {
				jQuery.removeData(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = jQuery._data(elem, type);

				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = jQuery._data(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return jQuery._data(elem, key) || jQuery._data(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					jQuery._removeData(elem, type + "queue");
					jQuery._removeData(elem, key);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = jQuery._data(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function isHidden(elem, el) {
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	};

	var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    length = elems.length,
		    bulk = key == null;

		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
			}
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {
				if (raw) {
					fn.call(elems, value);
					fn = null;
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < length; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
	};
	var rcheckableType = /^(?:checkbox|radio)$/i;

	(function () {
		var input = document.createElement("input"),
		    div = document.createElement("div"),
		    fragment = document.createDocumentFragment();

		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		support.leadingWhitespace = div.firstChild.nodeType === 3;

		support.tbody = !div.getElementsByTagName("tbody").length;

		support.htmlSerialize = !!div.getElementsByTagName("link").length;

		support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";

		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild(input);
		support.appendChecked = input.checked;

		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

		fragment.appendChild(div);
		div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		support.noCloneEvent = true;
		if (div.attachEvent) {
			div.attachEvent("onclick", function () {
				support.noCloneEvent = false;
			});

			div.cloneNode(true).click();
		}

		if (support.deleteExpando == null) {
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch (e) {
				support.deleteExpando = false;
			}
		}
	})();

	(function () {
		var i,
		    eventName,
		    div = document.createElement("div");

		for (i in { submit: true, change: true, focusin: true }) {
			eventName = "on" + i;

			if (!(support[i + "Bubbles"] = eventName in window)) {
				div.setAttribute(eventName, "t");
				support[i + "Bubbles"] = div.attributes[eventName].expando === false;
			}
		}

		div = null;
	})();

	var rformElems = /^(?:input|select|textarea)$/i,
	    rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {
			var tmp,
			    events,
			    t,
			    handleObjIn,
			    special,
			    eventHandle,
			    handleObj,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = jQuery._data(elem);

			if (!elemData) {
				return;
			}

			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {
					return (typeof jQuery === "undefined" ? "undefined" : _typeof(jQuery)) !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
				};

				eventHandle.elem = elem;
			}

			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				if (!type) {
					continue;
				}

				special = jQuery.event.special[type] || {};

				type = (selector ? special.delegateType : special.bindType) || type;

				special = jQuery.event.special[type] || {};

				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
						} else if (elem.attachEvent) {
							elem.attachEvent("on" + type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				jQuery.event.global[type] = true;
			}

			elem = null;
		},

		remove: function remove(elem, types, handler, selector, mappedTypes) {
			var j,
			    handleObj,
			    tmp,
			    origCount,
			    t,
			    events,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = jQuery.hasData(elem) && jQuery._data(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;

				jQuery._removeData(elem, "events");
			}
		},

		trigger: function trigger(event, data, elem, onlyHandlers) {
			var handle,
			    ontype,
			    cur,
			    bubbleType,
			    special,
			    tmp,
			    i,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") >= 0) {
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				handle = ontype && cur[ontype];
				if (handle && handle.apply && jQuery.acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
					if (ontype && elem[type] && !jQuery.isWindow(elem)) {
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						jQuery.event.triggered = type;
						try {
							elem[type]();
						} catch (e) {}
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function dispatch(event) {
			event = jQuery.event.fix(event);

			var i,
			    ret,
			    handleObj,
			    matched,
			    j,
			    handlerQueue = [],
			    args = _slice.call(arguments),
			    handlers = (jQuery._data(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			args[0] = event;
			event.delegateTarget = this;

			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
					if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var sel,
			    handleObj,
			    matches,
			    i,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
				for (; cur != this; cur = cur.parentNode || this) {
					if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		fix: function fix(event) {
			if (event[jQuery.expando]) {
				return event;
			}

			var i,
			    prop,
			    copy,
			    type = event.type,
			    originalEvent = event,
			    fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			if (!event.target) {
				event.target = originalEvent.srcElement || document;
			}

			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function filter(event, original) {
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function filter(event, original) {
				var body,
				    eventDoc,
				    doc,
				    button = original.button,
				    fromElement = original.fromElement;

				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				if (!event.relatedTarget && fromElement) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}

				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}

				return event;
			}
		},

		special: {
			load: {
				noBubble: true
			},
			focus: {
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						try {
							this.focus();
							return false;
						} catch (e) {}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				trigger: function trigger() {
					if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
						this.click();
						return false;
					}
				},

				_default: function _default(event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function simulate(type, elem, event, bubble) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true,
				originalEvent: {}
			});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	} : function (elem, type, handle) {
		var name = "on" + type;

		if (elem.detachEvent) {
			if (_typeof(elem[name]) === strundefined) {
				elem[name] = null;
			}

			elem.detachEvent(name, handle);
		}
	};

	jQuery.Event = function (src, props) {
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
		} else {
			this.type = src;
		}

		if (props) {
			jQuery.extend(this, props);
		}

		this.timeStamp = src && src.timeStamp || jQuery.now();

		this[jQuery.expando] = true;
	};

	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if (!e) {
				return;
			}

			if (e.preventDefault) {
				e.preventDefault();
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;
			if (!e) {
				return;
			}

			if (e.stopPropagation) {
				e.stopPropagation();
			}

			e.cancelBubble = true;
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && e.stopImmediatePropagation) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	if (!support.submitBubbles) {

		jQuery.event.special.submit = {
			setup: function setup() {
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				jQuery.event.add(this, "click._submit keypress._submit", function (e) {
					var elem = e.target,
					    form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
					if (form && !jQuery._data(form, "submitBubbles")) {
						jQuery.event.add(form, "submit._submit", function (event) {
							event._submit_bubble = true;
						});
						jQuery._data(form, "submitBubbles", true);
					}
				});
			},

			postDispatch: function postDispatch(event) {
				if (event._submit_bubble) {
					delete event._submit_bubble;
					if (this.parentNode && !event.isTrigger) {
						jQuery.event.simulate("submit", this.parentNode, event, true);
					}
				}
			},

			teardown: function teardown() {
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				jQuery.event.remove(this, "._submit");
			}
		};
	}

	if (!support.changeBubbles) {

		jQuery.event.special.change = {

			setup: function setup() {

				if (rformElems.test(this.nodeName)) {
					if (this.type === "checkbox" || this.type === "radio") {
						jQuery.event.add(this, "propertychange._change", function (event) {
							if (event.originalEvent.propertyName === "checked") {
								this._just_changed = true;
							}
						});
						jQuery.event.add(this, "click._change", function (event) {
							if (this._just_changed && !event.isTrigger) {
								this._just_changed = false;
							}

							jQuery.event.simulate("change", this, event, true);
						});
					}
					return false;
				}

				jQuery.event.add(this, "beforeactivate._change", function (e) {
					var elem = e.target;

					if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
						jQuery.event.add(elem, "change._change", function (event) {
							if (this.parentNode && !event.isSimulated && !event.isTrigger) {
								jQuery.event.simulate("change", this.parentNode, event, true);
							}
						});
						jQuery._data(elem, "changeBubbles", true);
					}
				});
			},

			handle: function handle(event) {
				var elem = event.target;

				if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
					return event.handleObj.handler.apply(this, arguments);
				}
			},

			teardown: function teardown() {
				jQuery.event.remove(this, "._change");

				return !rformElems.test(this.nodeName);
			}
		};
	}

	if (!support.focusinBubbles) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = jQuery._data(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					jQuery._data(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = jQuery._data(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						jQuery._removeData(doc, fix);
					} else {
						jQuery._data(doc, fix, attaches);
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function on(types, selector, data, fn, one) {
			var type, origFn;

			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				if (typeof selector !== "string") {
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}

			if (data == null && fn == null) {
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					fn = data;
					data = undefined;
				} else {
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};

				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function one(types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	function createSafeFragment(document) {
		var list = nodeNames.split("|"),
		    safeFrag = document.createDocumentFragment();

		if (safeFrag.createElement) {
			while (list.length) {
				safeFrag.createElement(list.pop());
			}
		}
		return safeFrag;
	}

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	    rleadingWhitespace = /^\s+/,
	    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	    rtagName = /<([\w:]+)/,
	    rtbody = /<tbody/i,
	    rhtml = /<|&#?\w+;/,
	    rnoInnerhtml = /<(?:script|style|link)/i,
	    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptType = /^$|\/(?:java|ecma)script/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	    wrapMap = {
		option: [1, "<select multiple='multiple'>", "</select>"],
		legend: [1, "<fieldset>", "</fieldset>"],
		area: [1, "<map>", "</map>"],
		param: [1, "<object>", "</object>"],
		thead: [1, "<table>", "</table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
	},
	    safeFragment = createSafeFragment(document),
	    fragmentDiv = safeFragment.appendChild(document.createElement("div"));

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {
		var elems,
		    elem,
		    i = 0,
		    found = _typeof(context.getElementsByTagName) !== strundefined ? context.getElementsByTagName(tag || "*") : _typeof(context.querySelectorAll) !== strundefined ? context.querySelectorAll(tag || "*") : undefined;

		if (!found) {
			for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
				if (!tag || jQuery.nodeName(elem, tag)) {
					found.push(elem);
				} else {
					jQuery.merge(found, getAll(elem, tag));
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
	}

	function fixDefaultChecked(elem) {
		if (rcheckableType.test(elem.type)) {
			elem.defaultChecked = elem.checked;
		}
	}

	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	}

	function disableScript(elem) {
		elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);
		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}
		return elem;
	}

	function setGlobalEval(elems, refElements) {
		var elem,
		    i = 0;
		for (; (elem = elems[i]) != null; i++) {
			jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
		}
	}

	function cloneCopyEvent(src, dest) {

		if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
			return;
		}

		var type,
		    i,
		    l,
		    oldData = jQuery._data(src),
		    curData = jQuery._data(dest, oldData),
		    events = oldData.events;

		if (events) {
			delete curData.handle;
			curData.events = {};

			for (type in events) {
				for (i = 0, l = events[type].length; i < l; i++) {
					jQuery.event.add(dest, type, events[type][i]);
				}
			}
		}

		if (curData.data) {
			curData.data = jQuery.extend({}, curData.data);
		}
	}

	function fixCloneNodeIssues(src, dest) {
		var nodeName, e, data;

		if (dest.nodeType !== 1) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		if (!support.noCloneEvent && dest[jQuery.expando]) {
			data = jQuery._data(dest);

			for (e in data.events) {
				jQuery.removeEvent(dest, e, data.handle);
			}

			dest.removeAttribute(jQuery.expando);
		}

		if (nodeName === "script" && dest.text !== src.text) {
			disableScript(dest).text = src.text;
			restoreScript(dest);
		} else if (nodeName === "object") {
			if (dest.parentNode) {
				dest.outerHTML = src.outerHTML;
			}

			if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
				dest.innerHTML = src.innerHTML;
			}
		} else if (nodeName === "input" && rcheckableType.test(src.type)) {

			dest.defaultChecked = dest.checked = src.checked;

			if (dest.value !== src.value) {
				dest.value = src.value;
			}
		} else if (nodeName === "option") {
			dest.defaultSelected = dest.selected = src.defaultSelected;
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var destElements,
			    node,
			    clone,
			    i,
			    srcElements,
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
				clone = elem.cloneNode(true);
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
			}

			if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0; (node = srcElements[i]) != null; ++i) {
					if (destElements[i]) {
						fixCloneNodeIssues(node, destElements[i]);
					}
				}
			}

			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0; (node = srcElements[i]) != null; i++) {
						cloneCopyEvent(node, destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			destElements = srcElements = node = null;

			return clone;
		},

		buildFragment: function buildFragment(elems, context, scripts, selection) {
			var j,
			    elem,
			    contains,
			    tmp,
			    tag,
			    tbody,
			    wrap,
			    l = elems.length,
			    safe = createSafeFragment(context),
			    nodes = [],
			    i = 0;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {
					if (jQuery.type(elem) === "object") {
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));
					} else {
						tmp = tmp || safe.appendChild(context.createElement("div"));

						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;

						tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
							nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
						}

						if (!support.tbody) {
							elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;

							j = elem && elem.childNodes.length;
							while (j--) {
								if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
									elem.removeChild(tbody);
								}
							}
						}

						jQuery.merge(nodes, tmp.childNodes);

						tmp.textContent = "";

						while (tmp.firstChild) {
							tmp.removeChild(tmp.firstChild);
						}

						tmp = safe.lastChild;
					}
				}
			}

			if (tmp) {
				safe.removeChild(tmp);
			}

			if (!support.appendChecked) {
				jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
			}

			i = 0;
			while (elem = nodes[i++]) {
				if (selection && jQuery.inArray(elem, selection) !== -1) {
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				tmp = getAll(safe.appendChild(elem), "script");

				if (contains) {
					setGlobalEval(tmp);
				}

				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			tmp = null;

			return safe;
		},

		cleanData: function cleanData(elems, acceptData) {
			var elem,
			    type,
			    id,
			    data,
			    i = 0,
			    internalKey = jQuery.expando,
			    cache = jQuery.cache,
			    deleteExpando = support.deleteExpando,
			    special = jQuery.event.special;

			for (; (elem = elems[i]) != null; i++) {
				if (acceptData || jQuery.acceptData(elem)) {

					id = elem[internalKey];
					data = id && cache[id];

					if (data) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						if (cache[id]) {

							delete cache[id];

							if (deleteExpando) {
								delete elem[internalKey];
							} else if (_typeof(elem.removeAttribute) !== strundefined) {
								elem.removeAttribute(internalKey);
							} else {
								elem[internalKey] = null;
							}

							deletedIds.push(id);
						}
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
			}, null, value, arguments.length);
		},

		append: function append() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		remove: function remove(selector, keepData) {
			var elem,
			    elems = selector ? jQuery.filter(selector, this) : this,
			    i = 0;

			for (; (elem = elems[i]) != null; i++) {

				if (!keepData && elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem));
				}

				if (elem.parentNode) {
					if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
						setGlobalEval(getAll(elem, "script"));
					}
					elem.parentNode.removeChild(elem);
				}
			}

			return this;
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem, false));
				}

				while (elem.firstChild) {
					elem.removeChild(elem.firstChild);
				}

				if (elem.options && jQuery.nodeName(elem, "select")) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined) {
					return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
				}

				if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = value.replace(rxhtmlTag, "<$1></$2>");

					try {
						for (; i < l; i++) {
							elem = this[i] || {};
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var arg = arguments[0];

			this.domManip(arguments, function (elem) {
				arg = this.parentNode;

				jQuery.cleanData(getAll(this));

				if (arg) {
					arg.replaceChild(elem, this);
				}
			});

			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function detach(selector) {
			return this.remove(selector, true);
		},

		domManip: function domManip(args, callback) {
			args = concat.apply([], args);

			var first,
			    node,
			    hasScripts,
			    scripts,
			    doc,
			    fragment,
			    i = 0,
			    l = this.length,
			    set = this,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return this.each(function (index) {
					var self = set.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					self.domManip(args, callback);
				});
			}

			if (l) {
				fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				if (first) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							if (hasScripts) {
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(this[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						jQuery.map(scripts, restoreScript);

						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
								}
							}
						}
					}

					fragment = first = null;
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    i = 0,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});

	var iframe,
	    elemdisplay = {};

	function actualDisplay(name, doc) {
		var style,
		    elem = jQuery(doc.createElement(name)).appendTo(doc.body),
		    display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");

		elem.detach();

		return display;
	}

	function defaultDisplay(nodeName) {
		var doc = document,
		    display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			if (display === "none" || !display) {
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

				doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;

				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			elemdisplay[nodeName] = display;
		}

		return display;
	}

	(function () {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function () {
			if (shrinkWrapBlocksVal != null) {
				return shrinkWrapBlocksVal;
			}

			shrinkWrapBlocksVal = false;

			var div, body, container;

			body = document.getElementsByTagName("body")[0];
			if (!body || !body.style) {
				return;
			}

			div = document.createElement("div");
			container = document.createElement("div");
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild(container).appendChild(div);

			if (_typeof(div.style.zoom) !== strundefined) {
				div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
				div.appendChild(document.createElement("div")).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild(container);

			return shrinkWrapBlocksVal;
		};
	})();
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles,
	    curCSS,
	    rposition = /^(top|right|bottom|left)$/;

	if (window.getComputedStyle) {
		getStyles = function getStyles(elem) {
			if (elem.ownerDocument.defaultView.opener) {
				return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
			}

			return window.getComputedStyle(elem, null);
		};

		curCSS = function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);

			ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

			if (computed) {

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				if (rnumnonpx.test(ret) && rmargin.test(name)) {
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret === undefined ? ret : ret + "";
		};
	} else if (document.documentElement.currentStyle) {
		getStyles = function getStyles(elem) {
			return elem.currentStyle;
		};

		curCSS = function curCSS(elem, name, computed) {
			var left,
			    rs,
			    rsLeft,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);
			ret = computed ? computed[name] : undefined;

			if (ret == null && style && style[name]) {
				ret = style[name];
			}

			if (rnumnonpx.test(ret) && !rposition.test(name)) {
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				if (rsLeft) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				style.left = left;
				if (rsLeft) {
					rs.left = rsLeft;
				}
			}

			return ret === undefined ? ret : ret + "" || "auto";
		};
	}

	function addGetHookIf(conditionFn, hookFn) {
		return {
			get: function get() {
				var condition = conditionFn();

				if (condition == null) {
					return;
				}

				if (condition) {
					delete this.get;
					return;
				}

				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	(function () {
		var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;

		div = document.createElement("div");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[0];
		style = a && a.style;

		if (!style) {
			return;
		}

		style.cssText = "float:left;opacity:.5";

		support.opacity = style.opacity === "0.5";

		support.cssFloat = !!style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";

		jQuery.extend(support, {
			reliableHiddenOffsets: function reliableHiddenOffsets() {
				if (reliableHiddenOffsetsVal == null) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function boxSizingReliable() {
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelPosition: function pixelPosition() {
				if (pixelPositionVal == null) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			reliableMarginRight: function reliableMarginRight() {
				if (reliableMarginRightVal == null) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			}
		});

		function computeStyleTests() {
			var div, body, container, contents;

			body = document.getElementsByTagName("body")[0];
			if (!body || !body.style) {
				return;
			}

			div = document.createElement("div");
			container = document.createElement("div");
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild(container).appendChild(div);

			div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";

			pixelPositionVal = boxSizingReliableVal = false;
			reliableMarginRightVal = true;

			if (window.getComputedStyle) {
				pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%";
				boxSizingReliableVal = (window.getComputedStyle(div, null) || { width: "4px" }).width === "4px";

				contents = div.appendChild(document.createElement("div"));

				contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);

				div.removeChild(contents);
			}

			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName("td");
			contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
			if (reliableHiddenOffsetsVal) {
				contents[0].style.display = "";
				contents[1].style.display = "none";
				reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
			}

			body.removeChild(container);
		}
	})();

	jQuery.swap = function (elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	var ralpha = /alpha\([^)]*\)/i,
	    ropacity = /opacity\s*=\s*([^)]*)/,
	    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

	function vendorPropName(style, name) {
		if (name in style) {
			return name;
		}

		var capName = name.charAt(0).toUpperCase() + name.slice(1),
		    origName = name,
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}

		return origName;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    hidden,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = jQuery._data(elem, "olddisplay");
			display = elem.style.display;
			if (show) {
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			} else {
				hidden = isHidden(elem);

				if (display && display !== "none" || !hidden) {
					jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
				}
			}
		}

		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
		    val = 0;

		for (; i < 4; i += 2) {
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {
		var valueIsBorderBox = true,
		    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		    styles = getStyles(elem),
		    isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		if (val <= 0 || val == null) {
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			if (rnumnonpx.test(val)) {
				return val;
			}

			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			val = parseFloat(val) || 0;
		}

		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		cssProps: {
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		style: function style(elem, name, value, extra) {
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));

					type = "number";
				}

				if (value == null || value !== value) {
					return;
				}

				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}

				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
					try {
						style[name] = value;
					} catch (e) {}
				}
			} else {
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}

				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var num,
			    val,
			    hooks,
			    origName = jQuery.camelCase(name);

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {
					return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var styles = extra && getStyles(elem);
				return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
			}
		};
	});

	if (!support.opacity) {
		jQuery.cssHooks.opacity = {
			get: function get(elem, computed) {
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
			},

			set: function set(elem, value) {
				var style = elem.style,
				    currentStyle = elem.currentStyle,
				    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
				    filter = currentStyle && currentStyle.filter || style.filter || "";

				style.zoom = 1;

				if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
					style.removeAttribute("filter");

					if (value === "" || currentStyle && !currentStyle.filter) {
						return;
					}
				}

				style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
		if (computed) {
			return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
		}
	});

	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},
				    parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop];
				}

				result = jQuery.css(tween.elem, tween.prop, "");

				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	jQuery.fx.step = {};

	var fxNow,
	    timerId,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	    rrun = /queueHooks$/,
	    animationPrefilters = [defaultPrefilter],
	    tweeners = {
		"*": [function (prop, value) {
			var tween = this.createTween(prop, value),
			    target = tween.cur(),
			    parts = rfxnum.exec(value),
			    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
			    start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
			    scale = 1,
			    maxIterations = 20;

			if (start && start[3] !== unit) {
				unit = unit || start[3];

				parts = parts || [];

				start = +target || 1;

				do {
					scale = scale || ".5";

					start = start / scale;
					jQuery.style(tween.elem, prop, start + unit);
				} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
			}

			if (parts) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;

				tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
			}

			return tween;
		}]
	};

	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	function genFx(type, includeWidth) {
		var which,
		    attrs = { height: type },
		    i = 0;

		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (tweeners[prop] || []).concat(tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    tween,
		    hooks,
		    oldfire,
		    display,
		    checkDisplay,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHidden(elem),
		    dataShow = jQuery._data(elem, "fxshow");

		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			display = jQuery.css(elem, "display");

			checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
				if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			if (!support.shrinkWrapBlocks()) {
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}
		}

		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data(elem, "fxshow", {});
			}

			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;
				jQuery._removeData(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = animationPrefilters.length,
		    deferred = jQuery.Deferred().always(function () {
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
			    temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, { specialEasing: {} }, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,
				    length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				if (gotoEnd) {
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {
		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.split(" ");
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				tweeners[prop] = tweeners[prop] || [];
				tweeners[prop].unshift(callback);
			}
		},

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				animationPrefilters.unshift(callback);
			} else {
				animationPrefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {
			return this.filter(isHidden).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				if (empty || jQuery._data(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = jQuery._data(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = jQuery._data(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				data.finish = true;

				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    timers = jQuery.timers,
		    i = 0;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		_default: 400
	};

	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = setTimeout(next, time);
			hooks.stop = function () {
				clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input, div, select, a, opt;

		div = document.createElement("div");
		div.setAttribute("className", "t");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[0];

		select = document.createElement("select");
		opt = select.appendChild(document.createElement("option"));
		input = div.getElementsByTagName("input")[0];

		a.style.cssText = "top:1px";

		support.getSetAttribute = div.className !== "t";

		support.style = /top/.test(a.getAttribute("style"));

		support.hrefNormalized = a.getAttribute("href") === "/a";

		support.checkOn = !!input.value;

		support.optSelected = opt.selected;

		support.enctype = !!document.createElement("form").enctype;

		select.disabled = true;
		support.optDisabled = !opt.disabled;

		input = document.createElement("input");
		input.setAttribute("value", "");
		support.input = input.getAttribute("value") === "";

		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";
	})();

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {
					var val = jQuery.find.attr(elem, "value");
					return val != null ? val : jQuery.trim(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one" || index < 0,
					    values = one ? null : [],
					    max = one ? index + 1 : options.length,
					    i = index < 0 ? max : one ? index : 0;

					for (; i < max; i++) {
						option = options[i];

						if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
							value = jQuery(option).val();

							if (one) {
								return value;
							}

							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {
							try {
								option.selected = optionSet = true;
							} catch (_) {
								option.scrollHeight;
							}
						} else {
							option.selected = false;
						}
					}

					if (!optionSet) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	});

	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (jQuery.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	var nodeHook,
	    boolHook,
	    attrHandle = jQuery.expr.attrHandle,
	    ruseDefault = /^(?:checked|selected)$/i,
	    getSetAttribute = support.getSetAttribute,
	    getSetInput = support.input;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var hooks,
			    ret,
			    nType = elem.nodeType;

			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (_typeof(elem.getAttribute) === strundefined) {
				return jQuery.prop(elem, name, value);
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
			}

			if (value !== undefined) {

				if (value === null) {
					jQuery.removeAttr(elem, name);
				} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				} else {
					elem.setAttribute(name, value + "");
					return value;
				}
			} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			} else {
				ret = jQuery.find.attr(elem, name);

				return ret == null ? undefined : ret;
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    propName,
			    i = 0,
			    attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					propName = jQuery.propFix[name] || name;

					if (jQuery.expr.match.bool.test(name)) {
						if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
							elem[propName] = false;
						} else {
							elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
						}
					} else {
						jQuery.attr(elem, name, "");
					}

					elem.removeAttribute(getSetAttribute ? name : propName);
				}
			}
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {
				jQuery.removeAttr(elem, name);
			} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
				elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
			} else {
				elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
			}

			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {

		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
				attrHandle[name] = handle;
			}
			return ret;
		} : function (elem, name, isXML) {
			if (!isXML) {
				return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
			}
		};
	});

	if (!getSetInput || !getSetAttribute) {
		jQuery.attrHooks.value = {
			set: function set(elem, value, name) {
				if (jQuery.nodeName(elem, "input")) {
					elem.defaultValue = value;
				} else {
					return nodeHook && nodeHook.set(elem, value, name);
				}
			}
		};
	}

	if (!getSetAttribute) {
		nodeHook = {
			set: function set(elem, value, name) {
				var ret = elem.getAttributeNode(name);
				if (!ret) {
					elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
				}

				ret.value = value += "";

				if (name === "value" || value === elem.getAttribute(name)) {
					return value;
				}
			}
		};

		attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {
			var ret;
			if (!isXML) {
				return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
			}
		};

		jQuery.valHooks.button = {
			get: function get(elem, name) {
				var ret = elem.getAttributeNode(name);
				if (ret && ret.specified) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		jQuery.attrHooks.contenteditable = {
			set: function set(elem, value, name) {
				nodeHook.set(elem, value === "" ? false : value, name);
			}
		};

		jQuery.each(["width", "height"], function (i, name) {
			jQuery.attrHooks[name] = {
				set: function set(elem, value) {
					if (value === "") {
						elem.setAttribute(name, "auto");
						return value;
					}
				}
			};
		});
	}

	if (!support.style) {
		jQuery.attrHooks.style = {
			get: function get(elem) {
				return elem.style.cssText || undefined;
			},
			set: function set(elem, value) {
				return elem.style.cssText = value + "";
			}
		};
	}

	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			name = jQuery.propFix[name] || name;
			return this.each(function () {
				try {
					this[name] = undefined;
					delete this[name];
				} catch (e) {}
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    notxml,
			    nType = elem.nodeType;

			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			if (notxml) {
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
			} else {
				return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
			}
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {
					var tabindex = jQuery.find.attr(elem, "tabindex");

					return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
				}
			}
		}
	});

	if (!support.hrefNormalized) {
		jQuery.each(["href", "src"], function (i, name) {
			jQuery.propHooks[name] = {
				get: function get(elem) {
					return elem.getAttribute(name, 4);
				}
			};
		});
	}

	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {
				var parent = elem.parentNode;

				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	if (!support.enctype) {
		jQuery.propFix.enctype = "encoding";
	}

	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    i = 0,
			    len = this.length,
			    proceed = typeof value === "string" && value;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}

			if (proceed) {
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						finalValue = jQuery.trim(cur);
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    i = 0,
			    len = this.length,
			    proceed = arguments.length === 0 || typeof value === "string" && value;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if (proceed) {
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];

					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							while (cur.indexOf(" " + clazz + " ") >= 0) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						finalValue = value ? jQuery.trim(cur) : "";
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
				});
			}

			return this.each(function () {
				if (type === "string") {
					var className,
					    i = 0,
					    self = jQuery(this),
					    classNames = value.match(rnotwhite) || [];

					while (className = classNames[i++]) {
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}
				} else if (type === strundefined || type === "boolean") {
					if (this.className) {
						jQuery._data(this, "__className__", this.className);
					}

					this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className = " " + selector + " ",
			    i = 0,
			    l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true;
				}
			}

			return false;
		}
	});

	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		},

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	var nonce = jQuery.now();

	var rquery = /\?/;

	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function (data) {
		if (window.JSON && window.JSON.parse) {
			return window.JSON.parse(data + "");
		}

		var requireNonComma,
		    depth = null,
		    str = jQuery.trim(data + "");

		return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {
			if (requireNonComma && comma) {
				depth = 0;
			}

			if (depth === 0) {
				return token;
			}

			requireNonComma = open || comma;

			depth += !close - !open;

			return "";
		})) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
	};

	jQuery.parseXML = function (data) {
		var xml, tmp;
		if (!data || typeof data !== "string") {
			return null;
		}
		try {
			if (window.DOMParser) {
				tmp = new DOMParser();
				xml = tmp.parseFromString(data, "text/xml");
			} else {
				xml = new ActiveXObject("Microsoft.XMLDOM");
				xml.async = "false";
				xml.loadXML(data);
			}
		} catch (e) {
			xml = undefined;
		}
		if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var ajaxLocParts,
	    ajaxLocation,
	    rhash = /#.*$/,
	    rts = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
	    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,
	    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	    prefilters = {},
	    transports = {},
	    allTypes = "*/".concat("*");

	try {
		ajaxLocation = location.href;
	} catch (e) {
		ajaxLocation = document.createElement("a");
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	function addToPrefiltersOrTransports(structure) {
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {
				while (dataType = dataTypes[i++]) {
					if (dataType.charAt(0) === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	function ajaxExtend(target, src) {
		var deep,
		    key,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	function ajaxHandleResponses(s, jqXHR, responses) {
		var firstDataType,
		    ct,
		    finalDataType,
		    type,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			finalDataType = finalDataType || firstDataType;
		}

		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},
		    dataTypes = s.dataTypes.slice();

		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {
				if (current === "*") {

					current = prev;
				} else if (prev !== "*" && prev !== current) {
					conv = converters[prev + " " + current] || converters["* " + current];

					if (!conv) {
						for (conv2 in converters) {
							tmp = conv2.split(" ");
							if (tmp[1] === current) {
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									if (conv === true) {
										conv = converters[conv2];
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					if (conv !== true) {
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({
		active: 0,

		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",


			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			converters: {
				"* text": String,

				"text html": true,

				"text json": jQuery.parseJSON,

				"text xml": jQuery.parseXML
			},

			flatOptions: {
				url: true,
				context: true
			}
		},

		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		ajax: function ajax(url, options) {
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			options = options || {};

			var parts,
			    i,
			    cacheURL,
			    responseHeadersString,
			    timeoutTimer,
			    fireGlobals,
			    transport,
			    responseHeaders,
			    s = jQuery.ajaxSetup({}, options),
			    callbackContext = s.context || s,
			    globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
			    deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),
			    _statusCode = s.statusCode || {},
			    requestHeaders = {},
			    requestHeadersNames = {},
			    state = 0,
			    strAbort = "canceled",
			    jqXHR = {
				readyState: 0,

				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				getAllResponseHeaders: function getAllResponseHeaders() {
					return state === 2 ? responseHeadersString : null;
				},

				setRequestHeader: function setRequestHeader(name, value) {
					var lname = name.toLowerCase();
					if (!state) {
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				overrideMimeType: function overrideMimeType(type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (state < 2) {
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						} else {
							jqXHR.always(map[jqXHR.status]);
						}
					}
					return this;
				},

				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

			s.type = options.method || options.type || s.method || s.type;

			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
			}

			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			if (state === 2) {
				return jqXHR;
			}

			fireGlobals = jQuery.event && s.global;

			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			s.type = s.type.toUpperCase();

			s.hasContent = !rnoContent.test(s.type);

			cacheURL = s.url;

			if (!s.hasContent) {
				if (s.data) {
					cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					delete s.data;
				}

				if (s.cache === false) {
					s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				return jqXHR.abort();
			}

			strAbort = "abort";

			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					if (state < 2) {
						done(-1, e);
					} else {
						throw e;
					}
				}
			}

			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				if (state === 2) {
					return;
				}

				state = 2;

				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}

				transport = undefined;

				responseHeadersString = headers || "";

				jqXHR.readyState = status > 0 ? 4 : 0;

				isSuccess = status >= 200 && status < 300 || status === 304;

				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				response = ajaxConvert(s, response, jqXHR, isSuccess);

				if (isSuccess) {
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";
					} else if (status === 304) {
						statusText = "notmodified";
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstChild && elem.firstChild.nodeType === 1) {
						elem = elem.firstChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap() {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});

	jQuery.expr.filters.hidden = function (elem) {
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
	};

	jQuery.expr.filters.visible = function (elem) {
		return !jQuery.expr.filters.hidden(elem);
	};

	var r20 = /%20/g,
	    rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					add(prefix, v);
				} else {
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {
			add(prefix, obj);
		}
	}

	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, value) {
			value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? function () {
		return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
	} : createStandardXHR;

	var xhrId = 0,
	    xhrCallbacks = {},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	if (window.attachEvent) {
		window.attachEvent("onunload", function () {
			for (var key in xhrCallbacks) {
				xhrCallbacks[key](undefined, true);
			}
		});
	}

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	xhrSupported = support.ajax = !!xhrSupported;

	if (xhrSupported) {

		jQuery.ajaxTransport(function (options) {
			if (!options.crossDomain || support.cors) {

				var _callback;

				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr(),
						    id = ++xhrId;

						xhr.open(options.type, options.url, options.async, options.username, options.password);

						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						for (i in headers) {
							if (headers[i] !== undefined) {
								xhr.setRequestHeader(i, headers[i] + "");
							}
						}

						xhr.send(options.hasContent && options.data || null);

						_callback = function callback(_, isAbort) {
							var status, statusText, responses;

							if (_callback && (isAbort || xhr.readyState === 4)) {
								delete xhrCallbacks[id];
								_callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								if (isAbort) {
									if (xhr.readyState !== 4) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									if (typeof xhr.responseText === "string") {
										responses.text = xhr.responseText;
									}

									try {
										statusText = xhr.statusText;
									} catch (e) {
										statusText = "";
									}

									if (!status && options.isLocal && !options.crossDomain) {
										status = responses.text ? 200 : 404;
									} else if (status === 1223) {
										status = 204;
									}
								}
							}

							if (responses) {
								complete(status, statusText, responses, xhr.getAllResponseHeaders());
							}
						};

						if (!options.async) {
							_callback();
						} else if (xhr.readyState === 4) {
							setTimeout(_callback);
						} else {
							xhr.onreadystatechange = xhrCallbacks[id] = _callback;
						}
					},

					abort: function abort() {
						if (_callback) {
							_callback(undefined, true);
						}
					}
				};
			}
		});
	}

	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP");
		} catch (e) {}
	}

	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
			s.global = false;
		}
	});

	jQuery.ajaxTransport("script", function (s) {
		if (s.crossDomain) {

			var script,
			    head = document.head || jQuery("head")[0] || document.documentElement;

			return {

				send: function send(_, callback) {

					script = document.createElement("script");

					script.async = true;

					if (s.scriptCharset) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					script.onload = script.onreadystatechange = function (_, isAbort) {

						if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
							script.onload = script.onreadystatechange = null;

							if (script.parentNode) {
								script.parentNode.removeChild(script);
							}

							script = null;

							if (!isAbort) {
								callback(200, "success");
							}
						}
					};

					head.insertBefore(script, head.firstChild);
				},

				abort: function abort() {
					if (script) {
						script.onload(undefined, true);
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

		if (jsonProp || s.dataTypes[0] === "jsonp") {
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			s.dataTypes[0] = "json";

			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			jqXHR.always(function () {
				window[callbackName] = overwritten;

				if (s[callbackName]) {
					s.jsonpCallback = originalSettings.jsonpCallback;

					oldCallbacks.push(callbackName);
				}

				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			return "script";
		}
	});

	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
		    scripts = !keepScripts && [];

		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = jQuery.buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	var _load = jQuery.fn.load;

	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector,
		    response,
		    type,
		    self = this,
		    off = url.indexOf(" ");

		if (off >= 0) {
			selector = jQuery.trim(url.slice(off, url.length));
			url = url.slice(0, off);
		}

		if (jQuery.isFunction(params)) {
			callback = params;
			params = undefined;
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				type: type,
				dataType: "html",
				data: params
			}).done(function (responseText) {
				response = arguments;

				self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
			}).complete(callback && function (jqXHR, status) {
				self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
			});
		}

		return this;
	};

	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	var docElem = window.document.documentElement;

	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
	}

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;

			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var docElem,
			    win,
			    box = { top: 0, left: 0 },
			    elem = this[0],
			    doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

			if (_typeof(elem.getBoundingClientRect) !== strundefined) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow(doc);
			return {
				top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
				left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    parentOffset = { top: 0, left: 0 },
			    elem = this[0];

			if (jQuery.css(elem, "position") === "fixed") {
				offset = elem.getBoundingClientRect();
			} else {
				offsetParent = this.offsetParent();

				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent || docElem;

				while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || docElem;
			});
		}
	});

	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = /Y/.test(prop);

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length, null);
		};
	});

	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {
						return elem.document.documentElement["client" + name];
					}

					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});

	jQuery.fn.size = function () {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var _jQuery = window.jQuery,
	    _$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	if ((typeof noGlobal === "undefined" ? "undefined" : _typeof(noGlobal)) === strundefined) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
(function ($, window) {

    $.fn.bootpag = function (options) {
        var $owner = this,
            settings = $.extend({
            total: 0,
            page: 1,
            maxVisible: null,
            leaps: true,
            href: 'javascript:void(0);',
            hrefVariable: '{{number}}',
            next: '&raquo;',
            prev: '&laquo;',
            firstLastUse: false,
            first: '<span aria-hidden="true"></span>',
            last: '<span aria-hidden="true"></span>',
            wrapClass: 'top-pagination-container',
            activeClass: 'active',
            disabledClass: 'disabled',
            nextClass: 'next',
            prevClass: 'prev',
            lastClass: 'last',
            firstClass: 'first'
        }, $owner.data('settings') || {}, options || {});

        if (settings.total < 0) return this;

        if (!$.isNumeric(settings.maxVisible) && !settings.maxVisible) {
            settings.maxVisible = parseInt(settings.total, 10);
        }

        $owner.data('settings', settings);

        function renderPage($bootpag, page) {

            page = parseInt(page, 10);
            var lp,
                maxV = settings.maxVisible == 0 ? 1 : settings.maxVisible,
                step = settings.maxVisible == 1 ? 0 : 1,
                vis = Math.floor((page - 1) / maxV) * maxV,
                $page = $bootpag.find('li');
            settings.page = page = page < 0 ? 0 : page > settings.total ? settings.total : page;
            $page.removeClass(settings.activeClass);
            lp = page - 1 < 1 ? 1 : settings.leaps && page - 1 >= settings.maxVisible ? Math.floor((page - 1) / maxV) * maxV : page - 1;

            if (settings.firstLastUse) {
                $page.first().toggleClass(settings.disabledClass, page === 1);
            }

            var lfirst = $page.first();
            if (settings.firstLastUse) {
                lfirst = lfirst.next();
            }

            lfirst.toggleClass(settings.disabledClass, page === 1).attr('data-lp', lp).find('a').attr('href', href(lp));

            var step = settings.maxVisible == 1 ? 0 : 1;

            lp = page + 1 > settings.total ? settings.total : settings.leaps && page + 1 < settings.total - settings.maxVisible ? vis + settings.maxVisible + step : page + 1;

            var llast = $page.last();
            if (settings.firstLastUse) {
                llast = llast.prev();
            }

            llast.toggleClass(settings.disabledClass, page === settings.total).attr('data-lp', lp).find('a').attr('href', href(lp));

            $page.last().toggleClass(settings.disabledClass, page === settings.total);

            var $currPage = $page.filter('[data-lp=' + page + ']');

            var clist = "." + [settings.nextClass, settings.prevClass, settings.firstClass, settings.lastClass].join(",.");
            if (!$currPage.not(clist).length) {
                var d = page <= vis ? -settings.maxVisible : 0;
                $page.not(clist).each(function (index) {
                    lp = index + 1 + vis + d;
                    $(this).attr('data-lp', lp).toggle(lp <= settings.total).find('a').html(lp).attr('href', href(lp));

                    $(this).attr('style', "display : 'inline'");
                });
                $currPage = $page.filter('[data-lp=' + page + ']');
            }
            $currPage.not(clist).addClass(settings.activeClass);
            $owner.data('settings', settings);

            for (var i = 0; i < $page.length; i++) {
                if ($page[i].dataset["lp"] > settings.total) $page[i].style.display = "none";
            }
        }

        function href(c) {

            return settings.href.replace(settings.hrefVariable, c);
        }

        return this.each(function () {

            var $bootpag,
                lp,
                me = $(this),
                p = ['<ul class="', settings.wrapClass, '">'];

            if (settings.firstLastUse) {
                p = p.concat(['<li data-lp="1" class="', settings.firstClass, '"><a class="cell_link" href="', href(1), '">', '</a></li>']);
            }
            if (settings.prev) {
                p = p.concat(['<li data-lp="1" class="', settings.prevClass, '"><a class="cell_link" href="', href(1), '">', '</a></li>']);
            }
            for (var c = 1; c <= Math.min(settings.total, settings.maxVisible); c++) {
                p = p.concat(['<li data-lp="', c, '", class="cell"><a class="cell_link" href="', href(c), '">', c, '</a></li>']);
            }
            if (settings.next) {
                lp = settings.leaps && settings.total > settings.maxVisible ? Math.min(settings.maxVisible + 1, settings.total) : 2;
                p = p.concat(['<li data-lp="', lp, '" class="', settings.nextClass, '"><a class="cell_link" href="', href(lp), '">', '</a></li>']);
            }
            if (settings.firstLastUse) {
                p = p.concat(['<li data-lp="', settings.total, '" class="last"><a class="cell_link" href="', href(settings.total), '">', '</a></li>']);
            }

            p.push('</ul>');
            me.find('ul.top-pagination-container').remove();
            me.append(p.join(''));
            $bootpag = me.find('ul.top-pagination-container');

            me.find('li').click(function paginationClick() {

                var me = $(this);
                if (me.hasClass(settings.disabledClass) || me.hasClass(settings.activeClass)) {
                    return;
                }
                var page = parseInt(me.attr('data-lp'), 10);
                $owner.find('ul.top-pagination-container').each(function () {
                    renderPage($(this), page);
                });

                $owner.trigger('page', page);
            });
            renderPage($bootpag, settings.page);
        });
    };
})(jQuery, window);

;(function ($) {

	var plugin = {};

	var defaults = {
		mode: 'horizontal',
		slideSelector: '',
		infiniteLoop: true,
		hideControlOnEnd: false,
		speed: 500,
		easing: null,
		slideMargin: 0,
		startSlide: 0,
		randomStart: false,
		captions: false,
		ticker: false,
		tickerHover: false,
		adaptiveHeight: false,
		adaptiveHeightSpeed: 500,
		video: false,
		useCSS: true,
		preloadImages: 'visible',
		responsive: true,
		slideZIndex: 50,
		wrapperClass: 'bx-wrapper',

		touchEnabled: true,
		swipeThreshold: 50,
		oneToOneTouch: true,
		preventDefaultSwipeX: true,
		preventDefaultSwipeY: false,

		pager: true,
		pagerType: 'full',
		pagerShortSeparator: ' / ',
		pagerSelector: null,
		buildPager: null,
		pagerCustom: null,

		controls: true,
		nextText: 'Next',
		prevText: 'Prev',
		nextSelector: null,
		prevSelector: null,
		autoControls: false,
		startText: 'Start',
		stopText: 'Stop',
		autoControlsCombine: false,
		autoControlsSelector: null,

		auto: false,
		pause: 4000,
		autoStart: true,
		autoDirection: 'next',
		autoHover: false,
		autoDelay: 0,
		autoSlideForOnePage: false,

		minSlides: 1,
		maxSlides: 1,
		moveSlides: 0,
		slideWidth: 0,

		onSliderLoad: function onSliderLoad() {},
		onSlideBefore: function onSlideBefore() {},
		onSlideAfter: function onSlideAfter() {},
		onSlideNext: function onSlideNext() {},
		onSlidePrev: function onSlidePrev() {},
		onSliderResize: function onSliderResize() {}
	};

	$.fn.bxSlider = function (options) {

		if (this.length == 0) return this;

		if (this.length > 1) {
			this.each(function () {
				$(this).bxSlider(options);
			});
			return this;
		}

		var slider = {};

		var el = this;
		plugin.el = this;

		var windowWidth = $(window).width();
		var windowHeight = $(window).height();

		var init = function init() {
			slider.settings = $.extend({}, defaults, options);

			slider.settings.slideWidth = parseInt(slider.settings.slideWidth);

			slider.children = el.children(slider.settings.slideSelector);

			if (slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length;
			if (slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length;

			if (slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);

			slider.active = { index: slider.settings.startSlide };

			slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1;

			if (slider.carousel) slider.settings.preloadImages = 'all';

			slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin;
			slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;

			slider.working = false;

			slider.controls = {};

			slider.interval = null;

			slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left';

			slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && function () {
				var div = document.createElement('div');

				var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];

				for (var i in props) {
					if (div.style[props[i]] !== undefined) {
						slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
						slider.animProp = '-' + slider.cssPrefix + '-transform';
						return true;
					}
				}
				return false;
			}();

			if (slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides;

			el.data("origStyle", el.attr("style"));
			el.children(slider.settings.slideSelector).each(function () {
				$(this).data("origStyle", $(this).attr("style"));
			});

			setup();
		};

		var setup = function setup() {
			el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="top-imageslider-viewport"></div></div>');

			slider.viewport = el.parent();

			slider.loader = $('<div class="top-imageslider-loading" />');
			slider.viewport.prepend(slider.loader);

			el.css({
				width: slider.settings.mode == 'horizontal' ? slider.children.length * 100 + 215 + '%' : 'auto',
				position: 'relative'
			});

			if (slider.usingCSS && slider.settings.easing) {
				el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
			} else if (!slider.settings.easing) {
				slider.settings.easing = 'swing';
			}
			var slidesShowing = getNumberSlidesShowing();

			slider.viewport.css({
				width: '100%',
				overflow: 'hidden',
				position: 'relative'
			});
			slider.viewport.parent().css({
				maxWidth: getViewportMaxWidth()
			});

			if (!slider.settings.pager) {
				slider.viewport.parent().css({
					margin: '0 auto 0px'
				});
			}

			slider.children.css({
				'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',
				listStyle: 'none',
				position: 'relative'
			});

			slider.children.css('width', getSlideWidth());

			if (slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin);
			if (slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin);

			if (slider.settings.mode == 'fade') {
				slider.children.css({
					position: 'absolute',
					zIndex: 0,
					display: 'none'
				});

				slider.children.eq(slider.settings.startSlide).css({ zIndex: slider.settings.slideZIndex, display: 'block' });
			}

			slider.controls.el = $('<div class="top-imageslider-controls" />');

			if (slider.settings.captions) appendCaptions();

			slider.active.last = slider.settings.startSlide == getPagerQty() - 1;

			if (slider.settings.video) el.fitVids();

			var preloadSelector = slider.children.eq(slider.settings.startSlide);
			if (slider.settings.preloadImages == "all") preloadSelector = slider.children;

			if (!slider.settings.ticker) {
				if (slider.settings.pager) appendPager();

				if (slider.settings.controls) appendControls();

				if (slider.settings.auto && slider.settings.autoControls) appendControlsAuto();

				if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el);
			} else {
				slider.settings.pager = false;
			}

			loadElements(preloadSelector, start);
		};

		var loadElements = function loadElements(selector, callback) {
			var total = selector.find('img, iframe').length;
			if (total == 0) {
				callback();
				return;
			}
			var count = 0;
			selector.find('img, iframe').each(function () {
				$(this).one('load', function () {
					if (++count == total) callback();
				}).each(function () {
					if (this.complete) $(this).load();
				});
			});
		};

		var start = function start() {
			if (slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker) {
				var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides;
				var sliceAppend = slider.children.slice(0, slice).clone().addClass('top-imageslider-clone');
				var slicePrepend = slider.children.slice(-slice).clone().addClass('top-imageslider-clone');
				el.append(sliceAppend).prepend(slicePrepend);
			}

			slider.loader.remove();

			setSlidePosition();

			if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true;

			slider.viewport.height(getViewportHeight());

			el.redrawSlider();

			slider.settings.onSliderLoad(slider.active.index);

			slider.initialized = true;

			if (slider.settings.responsive) $(window).bind('resize', resizeWindow);

			if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) initAuto();

			if (slider.settings.ticker) initTicker();

			if (slider.settings.pager) updatePagerActive(slider.settings.startSlide);

			if (slider.settings.controls) updateDirectionControls();

			if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch();
		};

		var getViewportHeight = function getViewportHeight() {
			var height = 0;

			var children = $();

			if (slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight) {
				children = slider.children;
			} else {
				if (!slider.carousel) {
					children = slider.children.eq(slider.active.index);
				} else {
					var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy();

					children = slider.children.eq(currentIndex);

					for (i = 1; i <= slider.settings.maxSlides - 1; i++) {
						if (currentIndex + i >= slider.children.length) {
							children = children.add(slider.children.eq(i - 1));
						} else {
							children = children.add(slider.children.eq(currentIndex + i));
						}
					}
				}
			}

			if (slider.settings.mode == 'vertical') {
				children.each(function (index) {
					height += $(this).outerHeight();
				});

				if (slider.settings.slideMargin > 0) {
					height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
				}
			} else {
				height = Math.max.apply(Math, children.map(function () {
					return $(this).outerHeight(false);
				}).get());
			}

			if (slider.viewport.css('box-sizing') == 'border-box') {
				height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) + parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));
			} else if (slider.viewport.css('box-sizing') == 'padding-box') {
				height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));
			}

			return height;
		};

		var getViewportMaxWidth = function getViewportMaxWidth() {
			var width = '100%';
			if (slider.settings.slideWidth > 0) {
				if (slider.settings.mode == 'horizontal') {
					width = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;
				} else {
					width = slider.settings.slideWidth;
				}
			}
			return width;
		};

		var getSlideWidth = function getSlideWidth() {
			var newElWidth = slider.settings.slideWidth;

			var wrapWidth = slider.viewport.width();

			if (slider.settings.slideWidth == 0 || slider.settings.slideWidth > wrapWidth && !slider.carousel || slider.settings.mode == 'vertical') {
				newElWidth = wrapWidth;
			} else if (slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal') {
				if (wrapWidth > slider.maxThreshold) {} else if (wrapWidth < slider.minThreshold) {
					newElWidth = (wrapWidth - slider.settings.slideMargin * (slider.settings.minSlides - 1)) / slider.settings.minSlides;
				}
			}
			return newElWidth;
		};

		var getNumberSlidesShowing = function getNumberSlidesShowing() {
			var slidesShowing = 1;
			if (slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0) {
				if (slider.viewport.width() < slider.minThreshold) {
					slidesShowing = slider.settings.minSlides;
				} else if (slider.viewport.width() > slider.maxThreshold) {
					slidesShowing = slider.settings.maxSlides;
				} else {
					var childWidth = slider.children.first().width() + slider.settings.slideMargin;
					slidesShowing = Math.floor((slider.viewport.width() + slider.settings.slideMargin) / childWidth);
				}
			} else if (slider.settings.mode == 'vertical') {
				slidesShowing = slider.settings.minSlides;
			}
			return slidesShowing;
		};

		var getPagerQty = function getPagerQty() {
			var pagerQty = 0;

			if (slider.settings.moveSlides > 0) {
				if (slider.settings.infiniteLoop) {
					pagerQty = Math.ceil(slider.children.length / getMoveBy());
				} else {
					var breakPoint = 0;
					var counter = 0;

					while (breakPoint < slider.children.length) {
						++pagerQty;
						breakPoint = counter + getNumberSlidesShowing();
						counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
					}
				}
			} else {
				pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
			}
			return pagerQty;
		};

		var getMoveBy = function getMoveBy() {
			if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {
				return slider.settings.moveSlides;
			}

			return getNumberSlidesShowing();
		};

		var setSlidePosition = function setSlidePosition() {
			if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
				if (slider.settings.mode == 'horizontal') {
					var lastChild = slider.children.last();
					var position = lastChild.position();

					setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);
				} else if (slider.settings.mode == 'vertical') {
					var lastShowingIndex = slider.children.length - slider.settings.minSlides;
					var position = slider.children.eq(lastShowingIndex).position();

					setPositionProperty(-position.top, 'reset', 0);
				}
			} else {
				var position = slider.children.eq(slider.active.index * getMoveBy()).position();

				if (slider.active.index == getPagerQty() - 1) slider.active.last = true;

				if (position != undefined) {
					if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0);else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0);
				}
			}
		};

		var setPositionProperty = function setPositionProperty(value, type, duration, params) {
			if (slider.usingCSS) {
				var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';

				el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
				if (type == 'slide') {
					el.css(slider.animProp, propValue);

					el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
						el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
						updateAfterSlideTransition();
					});
				} else if (type == 'reset') {
					el.css(slider.animProp, propValue);
				} else if (type == 'ticker') {
					el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
					el.css(slider.animProp, propValue);

					el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
						el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');

						setPositionProperty(params['resetValue'], 'reset', 0);

						tickerLoop();
					});
				}
			} else {
				var animateObj = {};
				animateObj[slider.animProp] = value;
				if (type == 'slide') {
					el.animate(animateObj, duration, slider.settings.easing, function () {
						updateAfterSlideTransition();
					});
				} else if (type == 'reset') {
					el.css(slider.animProp, value);
				} else if (type == 'ticker') {
					el.animate(animateObj, speed, 'linear', function () {
						setPositionProperty(params['resetValue'], 'reset', 0);

						tickerLoop();
					});
				}
			}
		};

		var populatePager = function populatePager() {
			var pagerHtml = '';
			var pagerQty = getPagerQty();

			for (var i = 0; i < pagerQty; i++) {
				var linkContent = '';

				if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager)) {
					linkContent = slider.settings.buildPager(i);
					slider.pagerEl.addClass('top-imageslider-custom-pager');
				} else {
					linkContent = i + 1;
					slider.pagerEl.addClass('top-imageslider-default-pager');
				}

				pagerHtml += '<div class="top-imageslider-pager-item"><a href="" data-slide-index="' + i + '" class="top-imageslider-pager-link">' + linkContent + '</a></div>';
			};

			slider.pagerEl.html(pagerHtml);
		};

		var appendPager = function appendPager() {
			if (!slider.settings.pagerCustom) {
				slider.pagerEl = $('<div class="top-imageslider-pager" />');

				if (slider.settings.pagerSelector) {
					$(slider.settings.pagerSelector).html(slider.pagerEl);
				} else {
					slider.controls.el.addClass('top-imageslider-has-pager').append(slider.pagerEl);
				}

				populatePager();
			} else {
				slider.pagerEl = $(slider.settings.pagerCustom);
			}

			slider.pagerEl.on('click', 'a', clickPagerBind);
		};

		var appendControls = function appendControls() {
			slider.controls.next = $('<a class="top-imageslider-next" href="">' + slider.settings.nextText + '</a>');
			slider.controls.prev = $('<a class="top-imageslider-prev" href="">' + slider.settings.prevText + '</a>');

			slider.controls.next.bind('click', clickNextBind);
			slider.controls.prev.bind('click', clickPrevBind);

			if (slider.settings.nextSelector) {
				$(slider.settings.nextSelector).append(slider.controls.next);
			}

			if (slider.settings.prevSelector) {
				$(slider.settings.prevSelector).append(slider.controls.prev);
			}

			if (!slider.settings.nextSelector && !slider.settings.prevSelector) {
				slider.controls.directionEl = $('<div class="top-imageslider-controls-direction" />');

				slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);

				slider.controls.el.addClass('top-imageslider-has-controls-direction').append(slider.controls.directionEl);
			}
		};

		var appendControlsAuto = function appendControlsAuto() {
			slider.controls.start = $('<div class="top-imageslider-controls-auto-item"><a class="top-imageslider-start" href="">' + slider.settings.startText + '</a></div>');
			slider.controls.stop = $('<div class="top-imageslider-controls-auto-item"><a class="top-imageslider-stop" href="">' + slider.settings.stopText + '</a></div>');

			slider.controls.autoEl = $('<div class="top-imageslider-controls-auto" />');

			slider.controls.autoEl.on('click', '.top-imageslider-start', clickStartBind);
			slider.controls.autoEl.on('click', '.top-imageslider-stop', clickStopBind);

			if (slider.settings.autoControlsCombine) {
				slider.controls.autoEl.append(slider.controls.start);
			} else {
				slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
			}

			if (slider.settings.autoControlsSelector) {
				$(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
			} else {
				slider.controls.el.addClass('top-imageslider-has-controls-auto').append(slider.controls.autoEl);
			}

			updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
		};

		var appendCaptions = function appendCaptions() {
			slider.children.each(function (index) {
				var title = $(this).find('img:first').attr('title');

				if (title != undefined && ('' + title).length) {
					$(this).append('<div class="top-imageslider-caption"><span>' + title + '</span></div>');
				}
			});
		};

		var clickNextBind = function clickNextBind(e) {
			if (slider.settings.auto) el.stopAuto();
			el.goToNextSlide();
			e.preventDefault();
		};

		var clickPrevBind = function clickPrevBind(e) {
			if (slider.settings.auto) el.stopAuto();
			el.goToPrevSlide();
			e.preventDefault();
		};

		var clickStartBind = function clickStartBind(e) {
			el.startAuto();
			e.preventDefault();
		};

		var clickStopBind = function clickStopBind(e) {
			el.stopAuto();
			e.preventDefault();
		};

		var clickPagerBind = function clickPagerBind(e) {
			if (slider.settings.auto) el.stopAuto();
			var pagerLink = $(e.currentTarget);
			if (pagerLink.attr('data-slide-index') !== undefined) {
				var pagerIndex = parseInt(pagerLink.attr('data-slide-index'));

				if (pagerIndex != slider.active.index) el.goToSlide(pagerIndex);
				e.preventDefault();
			}
		};

		var updatePagerActive = function updatePagerActive(slideIndex) {
			var len = slider.children.length;
			if (slider.settings.pagerType == 'short') {
				if (slider.settings.maxSlides > 1) {
					len = Math.ceil(slider.children.length / slider.settings.maxSlides);
				}
				slider.pagerEl.html(slideIndex + 1 + slider.settings.pagerShortSeparator + len);
				return;
			}

			slider.pagerEl.find('a').removeClass('active');

			slider.pagerEl.each(function (i, el) {
				$(el).find('a').eq(slideIndex).addClass('active');
			});
		};

		var updateAfterSlideTransition = function updateAfterSlideTransition() {
			if (slider.settings.infiniteLoop) {
				var position = '';

				if (slider.active.index == 0) {
					position = slider.children.eq(0).position();
				} else if (slider.active.index == getPagerQty() - 1 && slider.carousel) {
					position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
				} else if (slider.active.index == slider.children.length - 1) {
					position = slider.children.eq(slider.children.length - 1).position();
				}
				if (position) {
					if (slider.settings.mode == 'horizontal') {
						setPositionProperty(-position.left, 'reset', 0);
					} else if (slider.settings.mode == 'vertical') {
						setPositionProperty(-position.top, 'reset', 0);
					}
				}
			}

			slider.working = false;

			slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
		};

		var updateAutoControls = function updateAutoControls(state) {
			if (slider.settings.autoControlsCombine) {
				slider.controls.autoEl.html(slider.controls[state]);
			} else {
				slider.controls.autoEl.find('a').removeClass('active');
				slider.controls.autoEl.find('a:not(.top-imageslider-' + state + ')').addClass('active');
			}
		};

		var updateDirectionControls = function updateDirectionControls() {
			if (getPagerQty() == 1) {
				slider.controls.prev.addClass('disabled');
				slider.controls.next.addClass('disabled');
			} else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {
				if (slider.active.index == 0) {
					slider.controls.prev.addClass('disabled');
					slider.controls.next.removeClass('disabled');
				} else if (slider.active.index == getPagerQty() - 1) {
					slider.controls.next.addClass('disabled');
					slider.controls.prev.removeClass('disabled');
				} else {
					slider.controls.prev.removeClass('disabled');
					slider.controls.next.removeClass('disabled');
				}
			}
		};

		var initAuto = function initAuto() {
			if (slider.settings.autoDelay > 0) {
				var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);
			} else {
				el.startAuto();
			}

			if (slider.settings.autoHover) {
				el.hover(function () {
					if (slider.interval) {
						el.stopAuto(true);

						slider.autoPaused = true;
					}
				}, function () {
					if (slider.autoPaused) {
						el.startAuto(true);

						slider.autoPaused = null;
					}
				});
			}
		};

		var initTicker = function initTicker() {
			var startPosition = 0;

			if (slider.settings.autoDirection == 'next') {
				el.append(slider.children.clone().addClass('top-imageslider-clone'));
			} else {
				el.prepend(slider.children.clone().addClass('top-imageslider-clone'));
				var position = slider.children.first().position();
				startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
			}
			setPositionProperty(startPosition, 'reset', 0);

			slider.settings.pager = false;
			slider.settings.controls = false;
			slider.settings.autoControls = false;

			if (slider.settings.tickerHover && !slider.usingCSS) {
				slider.viewport.hover(function () {
					el.stop();
				}, function () {
					var totalDimens = 0;
					slider.children.each(function (index) {
						totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
					});

					var ratio = slider.settings.speed / totalDimens;

					var property = slider.settings.mode == 'horizontal' ? 'left' : 'top';

					var newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))));
					tickerLoop(newSpeed);
				});
			}

			tickerLoop();
		};

		var tickerLoop = function tickerLoop(resumeSpeed) {
			speed = resumeSpeed ? resumeSpeed : slider.settings.speed;
			var position = { left: 0, top: 0 };
			var reset = { left: 0, top: 0 };

			if (slider.settings.autoDirection == 'next') {
				position = el.find('.top-imageslider-clone').first().position();
			} else {
				reset = slider.children.first().position();
			}
			var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
			var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top;
			var params = { resetValue: resetValue };
			setPositionProperty(animateProperty, 'ticker', speed, params);
		};

		var initTouch = function initTouch() {
			slider.touch = {
				start: { x: 0, y: 0 },
				end: { x: 0, y: 0 }
			};
			slider.viewport.bind('touchstart', onTouchStart);
		};

		var onTouchStart = function onTouchStart(e) {
			if (slider.working) {
				e.preventDefault();
			} else {
				slider.touch.originalPos = el.position();
				var orig = e.originalEvent;

				slider.touch.start.x = orig.changedTouches[0].pageX;
				slider.touch.start.y = orig.changedTouches[0].pageY;

				slider.viewport.bind('touchmove', onTouchMove);

				slider.viewport.bind('touchend', onTouchEnd);
			}
		};

		var onTouchMove = function onTouchMove(e) {
			var orig = e.originalEvent;

			var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x);
			var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y);

			if (xMovement * 3 > yMovement && slider.settings.preventDefaultSwipeX) {
				e.preventDefault();
			} else if (yMovement * 3 > xMovement && slider.settings.preventDefaultSwipeY) {
				e.preventDefault();
			}
			if (slider.settings.mode != 'fade' && slider.settings.oneToOneTouch) {
				var value = 0;

				if (slider.settings.mode == 'horizontal') {
					var change = orig.changedTouches[0].pageX - slider.touch.start.x;
					value = slider.touch.originalPos.left + change;
				} else {
					var change = orig.changedTouches[0].pageY - slider.touch.start.y;
					value = slider.touch.originalPos.top + change;
				}
				setPositionProperty(value, 'reset', 0);
			}
		};

		var onTouchEnd = function onTouchEnd(e) {
			slider.viewport.unbind('touchmove', onTouchMove);
			var orig = e.originalEvent;
			var value = 0;

			slider.touch.end.x = orig.changedTouches[0].pageX;
			slider.touch.end.y = orig.changedTouches[0].pageY;

			if (slider.settings.mode == 'fade') {
				var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
				if (distance >= slider.settings.swipeThreshold) {
					slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide();
					el.stopAuto();
				}
			} else {
				var distance = 0;

				if (slider.settings.mode == 'horizontal') {
					distance = slider.touch.end.x - slider.touch.start.x;
					value = slider.touch.originalPos.left;
				} else {
					distance = slider.touch.end.y - slider.touch.start.y;
					value = slider.touch.originalPos.top;
				}

				if (!slider.settings.infiniteLoop && (slider.active.index == 0 && distance > 0 || slider.active.last && distance < 0)) {
					setPositionProperty(value, 'reset', 200);
				} else {
					if (Math.abs(distance) >= slider.settings.swipeThreshold) {
						distance < 0 ? el.goToNextSlide() : el.goToPrevSlide();
						el.stopAuto();
					} else {
						setPositionProperty(value, 'reset', 200);
					}
				}
			}
			slider.viewport.unbind('touchend', onTouchEnd);
		};

		var resizeWindow = function resizeWindow(e) {
			if (!slider.initialized) return;

			var windowWidthNew = $(window).width();
			var windowHeightNew = $(window).height();

			if (windowWidth != windowWidthNew || windowHeight != windowHeightNew) {
				windowWidth = windowWidthNew;
				windowHeight = windowHeightNew;

				el.redrawSlider();

				slider.settings.onSliderResize.call(el, slider.active.index);
			}
		};

		el.goToSlide = function (slideIndex, direction) {
			if (slider.working || slider.active.index == slideIndex) return;

			slider.working = true;

			slider.oldIndex = slider.active.index;

			if (slideIndex < 0) {
				slider.active.index = getPagerQty() - 1;
			} else if (slideIndex >= getPagerQty()) {
				slider.active.index = 0;
			} else {
				slider.active.index = slideIndex;
			}

			slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			if (direction == 'next') {
				slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			} else if (direction == 'prev') {
				slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			}

			slider.active.last = slider.active.index >= getPagerQty() - 1;

			if (slider.settings.pager) updatePagerActive(slider.active.index);

			if (slider.settings.controls) updateDirectionControls();

			if (slider.settings.mode == 'fade') {
				if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {
					slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed);
				}

				slider.children.filter(':visible').fadeOut(slider.settings.speed).css({ zIndex: 0 });

				slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function () {
					$(this).css('zIndex', slider.settings.slideZIndex);
					updateAfterSlideTransition();
				});
			} else {
				if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {
					slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed);
				}
				var moveBy = 0;
				var position = { left: 0, top: 0 };

				if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {
					if (slider.settings.mode == 'horizontal') {
						var lastChild = slider.children.eq(slider.children.length - 1);
						position = lastChild.position();

						moveBy = slider.viewport.width() - lastChild.outerWidth();
					} else {
						var lastShowingIndex = slider.children.length - slider.settings.minSlides;
						position = slider.children.eq(lastShowingIndex).position();
					}
				} else if (slider.carousel && slider.active.last && direction == 'prev') {
					var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : (getPagerQty() - 1) * getMoveBy() - (slider.children.length - slider.settings.maxSlides);
					var lastChild = el.children('.top-imageslider-clone').eq(eq);
					position = lastChild.position();
				} else if (direction == 'next' && slider.active.index == 0) {
					position = el.find('> .top-imageslider-clone').eq(slider.settings.maxSlides).position();
					slider.active.last = false;
				} else if (slideIndex >= 0) {
					var requestEl = slideIndex * getMoveBy();
					position = slider.children.eq(requestEl).position();
				}

				if ("undefined" !== typeof position) {
					var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top;

					setPositionProperty(value, 'slide', slider.settings.speed);
				}
			}
		};

		el.goToNextSlide = function () {
			if (!slider.settings.infiniteLoop && slider.active.last) return;
			var pagerIndex = parseInt(slider.active.index) + 1;
			el.goToSlide(pagerIndex, 'next');
		};

		el.goToPrevSlide = function () {
			if (!slider.settings.infiniteLoop && slider.active.index == 0) return;
			var pagerIndex = parseInt(slider.active.index) - 1;
			el.goToSlide(pagerIndex, 'prev');
		};

		el.startAuto = function (preventControlUpdate) {
			if (slider.interval) return;

			slider.interval = setInterval(function () {
				slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide();
			}, slider.settings.pause);

			if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop');
		};

		el.stopAuto = function (preventControlUpdate) {
			if (!slider.interval) return;

			clearInterval(slider.interval);
			slider.interval = null;

			if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start');
		};

		el.getCurrentSlide = function () {
			return slider.active.index;
		};

		el.getCurrentSlideElement = function () {
			return slider.children.eq(slider.active.index);
		};

		el.getSlideCount = function () {
			return slider.children.length;
		};

		el.redrawSlider = function () {
			slider.children.add(el.find('.top-imageslider-clone')).width(getSlideWidth());

			slider.viewport.css('height', getViewportHeight());

			if (!slider.settings.ticker) setSlidePosition();

			if (slider.active.last) slider.active.index = getPagerQty() - 1;

			if (slider.active.index >= getPagerQty()) slider.active.last = true;

			if (slider.settings.pager && !slider.settings.pagerCustom) {
				populatePager();
				updatePagerActive(slider.active.index);
			}
		};

		el.destroySlider = function () {
			if (!slider.initialized) return;
			slider.initialized = false;
			$('.top-imageslider-clone', this).remove();
			slider.children.each(function () {
				$(this).data("origStyle") != undefined ? $(this).attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
			});
			$(this).data("origStyle") != undefined ? this.attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
			$(this).unwrap().unwrap();
			if (slider.controls.el) slider.controls.el.remove();
			if (slider.controls.next) slider.controls.next.remove();
			if (slider.controls.prev) slider.controls.prev.remove();
			if (slider.pagerEl && slider.settings.controls) slider.pagerEl.remove();
			$('.top-imageslider-caption', this).remove();
			if (slider.controls.autoEl) slider.controls.autoEl.remove();
			clearInterval(slider.interval);
			if (slider.settings.responsive) $(window).unbind('resize', resizeWindow);
		};

		el.reloadSlider = function (settings) {
			if (settings != undefined) options = settings;
			el.destroySlider();
			init();
		};

		init();

		return this;
	};
})(jQuery);var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;
(function ($, document, window) {
    var defaults = {
        label: 'MENU',
        duplicate: true,
        duration: 200,
        easingOpen: 'swing',
        easingClose: 'swing',
        closedSymbol: '&#9658;',
        openedSymbol: '&#9660;',
        prependTo: 'body',
        appendTo: '',
        parentTag: 'a',
        closeOnClick: false,
        allowParentLinks: false,
        nestedParentLinks: true,
        showChildren: false,
        removeIds: false,
        removeClasses: false,
        removeStyles: false,
        brand: '',
        init: function init() {},
        beforeOpen: function beforeOpen() {},
        beforeClose: function beforeClose() {},
        afterOpen: function afterOpen() {},
        afterClose: function afterClose() {}
    },
        mobileMenu = 'slicknav',
        prefix = 'top-menu';

    function Plugin(element, options) {

        this.element = element;

        this.settings = $.extend({}, defaults, options);

        this._defaults = defaults;
        this._name = mobileMenu;

        this.init();
    }

    Plugin.prototype.init = function () {
        var $this = this,
            menu = $(this.element),
            settings = this.settings,
            iconClass,
            menuBar;

        if (settings.duplicate) {
            $this.mobileNav = menu.clone();

            $this.mobileNav.removeAttr('id');
            $this.mobileNav.find('*').each(function (i, e) {
                $(e).removeAttr('id');
            });
        } else {
            $this.mobileNav = menu;

            $this.mobileNav.removeAttr('id');
            $this.mobileNav.find('*').each(function (i, e) {
                $(e).removeAttr('id');
            });
        }

        if (settings.removeClasses) {
            $this.mobileNav.removeAttr('class');
            $this.mobileNav.find('*').each(function (i, e) {
                $(e).removeAttr('class');
            });
        }

        if (settings.removeStyles) {
            $this.mobileNav.removeAttr('style');
            $this.mobileNav.find('*').each(function (i, e) {
                $(e).removeAttr('style');
            });
        }

        iconClass = prefix + '_icon';

        if (settings.label === '') {
            iconClass += ' ' + prefix + '_no-text';
        }

        if (settings.parentTag == 'a') {
            settings.parentTag = 'a href="#"';
        }

        $this.mobileNav.attr('class', prefix + '_nav');
        if (settings.appendTo !== '') {
            menuBar = $(settings.appendTo);
        } else {
            menuBar = $('<div class="' + prefix + '-root"></div>');
        }
        if (settings.brand !== '') {
            var brand = $('<div class="' + prefix + '_brand">' + settings.brand + '</div>');
            $(menuBar).append(brand);
        }
        $this.btn = $(['<' + settings.parentTag + ' aria-haspopup="true" tabindex="0" class="' + prefix + '_btn ' + prefix + '_collapsed">', '<span class="' + prefix + '_menutxt">' + settings.label + '</span>', '<span class="' + iconClass + '">', '<span class="' + prefix + '_icon-bar"></span>', '<span class="' + prefix + '_icon-bar"></span>', '<span class="' + prefix + '_icon-bar"></span>', '</span>', '</' + settings.parentTag + '>'].join(''));
        if (settings.appendTo !== '') {
            $(menuBar).empty();
            $(menuBar).append($this.btn);
            menuBar.append($this.mobileNav);
        } else {
            $(menuBar).append($this.btn);
            $(settings.prependTo).prepend(menuBar);
            menuBar.append($this.mobileNav);
        }

        var items = $this.mobileNav.find('li');
        $(items).each(function () {
            var item = $(this),
                data = {};
            data.children = item.children('ul').attr('role', 'menu');
            item.data('menu', data);

            if (data.children.length > 0) {

                var a = item.contents(),
                    containsAnchor = false,
                    nodes = [];

                $(a).each(function () {
                    if (!$(this).is('ul')) {
                        nodes.push(this);
                    } else {
                        return false;
                    }

                    if ($(this).is("a")) {
                        containsAnchor = true;
                    }
                });

                var wrapElement = $('<' + settings.parentTag + ' role="menuitem" aria-haspopup="true" tabindex="-1" class="' + prefix + '_item"/>');

                if (!settings.allowParentLinks || settings.nestedParentLinks || !containsAnchor) {
                    var $wrap = $(nodes).wrapAll(wrapElement).parent();
                    $wrap.addClass(prefix + '_row');
                } else $(nodes).wrapAll('<span class="' + prefix + '_parent-link ' + prefix + '_row"/>').parent();

                if (!settings.showChildren) {
                    item.addClass(prefix + '_collapsed');
                } else {
                    item.addClass(prefix + '_open');
                }

                item.addClass(prefix + '_parent');
            } else if (item.children().length === 0) {
                item.addClass(prefix + '_txtnode');
            }

            item.children('a').attr('role', 'menuitem').click(function (event) {
                if (settings.closeOnClick && !$(event.target).parent().closest('li').hasClass(prefix + '_parent')) {
                    $($this.btn).click();
                }
            });

            if (settings.closeOnClick && settings.allowParentLinks) {
                item.children('a').children('a').click(function (event) {
                    $($this.btn).click();
                });

                item.find('.' + prefix + '_parent-link a:not(.' + prefix + '_item)').click(function (event) {
                    $($this.btn).click();
                });
            }
        });

        $(items).each(function () {
            var data = $(this).data('menu');
            if (!settings.showChildren) {
                $this._visibilityToggle(data.children, null, false, null, true);
            }
        });

        $this._visibilityToggle($this.mobileNav, null, false, 'init', true);

        $this.mobileNav.attr('role', 'menu');

        $(document).mousedown(function () {
            $this._outlines(false);
        });

        $(document).keyup(function () {
            $this._outlines(true);
        });

        $($this.btn).click(function (e) {
            e.preventDefault();
            $this._menuToggle();
        });

        $this.mobileNav.on('click', '.' + prefix + '_item', function (e) {
            e.preventDefault();
            $this._itemClick($(this));
        });

        $($this.btn).keydown(function (e) {
            var ev = e || event;
            if (ev.keyCode == 13) {
                e.preventDefault();
                $this._menuToggle();
            }
        });

        $this.mobileNav.on('keydown', '.' + prefix + '_item', function (e) {
            var ev = e || event;
            if (ev.keyCode == 13) {
                e.preventDefault();
                $this._itemClick($(e.target));
            }
        });

        if (settings.allowParentLinks && settings.nestedParentLinks) {
            $('.' + prefix + '_item a').click(function (e) {
                e.stopImmediatePropagation();
            });
        }
    };

    Plugin.prototype._menuToggle = function (el) {
        var $this = this;
        var btn = $this.btn;
        var mobileNav = $this.mobileNav;

        if (btn.hasClass(prefix + '_collapsed')) {
            btn.removeClass(prefix + '_collapsed');
            btn.addClass(prefix + '_open');
        } else {
            btn.removeClass(prefix + '_open');
            btn.addClass(prefix + '_collapsed');
        }
        btn.addClass(prefix + '_animating');
        $this._visibilityToggle(mobileNav, btn.parent(), true, btn);
    };

    Plugin.prototype._itemClick = function (el) {
        var $this = this;
        var settings = $this.settings;
        var data = el.data('menu');
        if (!data) {
            data = {};

            data.ul = el.next('ul');
            data.parent = el.parent();

            if (data.parent.hasClass(prefix + '_parent-link')) {
                data.parent = el.parent().parent();
                data.ul = el.parent().next('ul');
            }
            el.data('menu', data);
        }
        if (data.parent.hasClass(prefix + '_collapsed')) {
            data.parent.removeClass(prefix + '_collapsed');
            data.parent.addClass(prefix + '_open');
            data.parent.addClass(prefix + '_animating');
            $this._visibilityToggle(data.ul, data.parent, true, el);
        } else {
            data.parent.addClass(prefix + '_collapsed');
            data.parent.removeClass(prefix + '_open');
            data.parent.addClass(prefix + '_animating');
            $this._visibilityToggle(data.ul, data.parent, true, el);
        }
    };

    Plugin.prototype._visibilityToggle = function (el, parent, animate, trigger, init) {
        var $this = this;
        var settings = $this.settings;
        var items = $this._getActionItems(el);
        var duration = 0;
        if (animate) {
            duration = settings.duration;
        }

        if (el.hasClass(prefix + '_hidden')) {
            el.removeClass(prefix + '_hidden');

            if (!init) {
                settings.beforeOpen(trigger);
            }
            el.slideDown(duration, settings.easingOpen, function () {

                $(trigger).removeClass(prefix + '_animating');
                $(parent).removeClass(prefix + '_animating');

                if (!init) {
                    settings.afterOpen(trigger);
                }
            });
            el.attr('aria-hidden', 'false');
            items.attr('tabindex', '0');
            $this._setVisAttr(el, false);
        } else {
            el.addClass(prefix + '_hidden');

            if (!init) {
                settings.beforeClose(trigger);
            }

            el.slideUp(duration, this.settings.easingClose, function () {
                el.attr('aria-hidden', 'true');
                items.attr('tabindex', '-1');
                $this._setVisAttr(el, true);
                el.hide();

                $(trigger).removeClass(prefix + '_animating');
                $(parent).removeClass(prefix + '_animating');

                if (!init) {
                    settings.afterClose(trigger);
                } else if (trigger == 'init') {
                    settings.init();
                }
            });
        }
    };

    Plugin.prototype._setVisAttr = function (el, hidden) {
        var $this = this;

        var nonHidden = el.children('li').children('ul').not('.' + prefix + '_hidden');

        if (!hidden) {
            nonHidden.each(function () {
                var ul = $(this);
                ul.attr('aria-hidden', 'false');
                var items = $this._getActionItems(ul);
                items.attr('tabindex', '0');
                $this._setVisAttr(ul, hidden);
            });
        } else {
            nonHidden.each(function () {
                var ul = $(this);
                ul.attr('aria-hidden', 'true');
                var items = $this._getActionItems(ul);
                items.attr('tabindex', '-1');
                $this._setVisAttr(ul, hidden);
            });
        }
    };

    Plugin.prototype._getActionItems = function (el) {
        var data = el.data("menu");
        if (!data) {
            data = {};
            var items = el.children('li');
            var anchors = items.find('a');
            data.links = anchors.add(items.find('.' + prefix + '_item'));
            el.data('menu', data);
        }
        return data.links;
    };

    Plugin.prototype._outlines = function (state) {
        if (!state) {
            $('.' + prefix + '_item, .' + prefix + '_btn').css('outline', 'none');
        } else {
            $('.' + prefix + '_item, .' + prefix + '_btn').css('outline', '');
        }
    };

    Plugin.prototype.toggle = function () {
        var $this = this;
        $this._menuToggle();
    };

    Plugin.prototype.open = function () {
        var $this = this;
        if ($this.btn.hasClass(prefix + '_collapsed')) {
            $this._menuToggle();
        }
    };

    Plugin.prototype.close = function () {
        var $this = this;
        if ($this.btn.hasClass(prefix + '_open')) {
            $this._menuToggle();
        }
    };

    $.fn[mobileMenu] = function (options) {
        var args = arguments;

        if (options === undefined || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            return this.each(function () {
                if (!$.data(this, 'plugin_' + mobileMenu)) {
                    $.data(this, 'plugin_' + mobileMenu, new Plugin(this, options));
                }
            });
        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
            var returns;

            this.each(function () {
                var instance = $.data(this, 'plugin_' + mobileMenu);

                if (instance instanceof Plugin && typeof instance[options] === 'function') {
                    returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
                }
            });

            return returns !== undefined ? returns : this;
        }
    };
})(jQuery, document, window);var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {

    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory();
    } else {
        window.noUiSlider = factory();
    }
})(function () {

    'use strict';

    var VERSION = '9.2.0';

    function addNodeTo(target, className) {
        var div = document.createElement('div');
        addClass(div, className);
        target.appendChild(div);
        return div;
    }

    function unique(array) {
        return array.filter(function (a) {
            return !this[a] ? this[a] = true : false;
        }, {});
    }

    function closest(value, to) {
        return Math.round(value / to) * to;
    }

    function offset(elem, orientation) {

        var rect = elem.getBoundingClientRect(),
            doc = elem.ownerDocument,
            docElem = doc.documentElement,
            pageOffset = getPageOffset();

        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
            pageOffset.x = 0;
        }

        return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
    }

    function isNumeric(a) {
        return typeof a === 'number' && !isNaN(a) && isFinite(a);
    }

    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function () {
                removeClass(element, className);
            }, duration);
        }
    }

    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }

    function asArray(a) {
        return Array.isArray(a) ? a : [a];
    }

    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }

    function addClass(el, className) {
        if (el.classList) {
            el.classList.add(className);
        } else {
            el.className += ' ' + className;
        }
    }

    function removeClass(el, className) {
        if (el.classList) {
            el.classList.remove(className);
        } else {
            el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }

    function hasClass(el, className) {
        return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
    }

    function getPageOffset() {

        var supportPageOffset = window.pageXOffset !== undefined,
            isCSS1Compat = (document.compatMode || "") === "CSS1Compat",
            x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? document.documentElement.scrollLeft : document.body.scrollLeft,
            y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? document.documentElement.scrollTop : document.body.scrollTop;

        return {
            x: x,
            y: y
        };
    }

    function getActions() {
        return window.navigator.pointerEnabled ? {
            start: 'pointerdown',
            move: 'pointermove',
            end: 'pointerup'
        } : window.navigator.msPointerEnabled ? {
            start: 'MSPointerDown',
            move: 'MSPointerMove',
            end: 'MSPointerUp'
        } : {
            start: 'mousedown touchstart',
            move: 'mousemove touchmove',
            end: 'mouseup touchend'
        };
    }

    function subRangeRatio(pa, pb) {
        return 100 / (pb - pa);
    }

    function fromPercentage(range, value) {
        return value * 100 / (range[1] - range[0]);
    }

    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);
    }

    function isPercentage(range, value) {
        return value * (range[1] - range[0]) / 100 + range[0];
    }

    function getJ(value, arr) {

        var j = 1;

        while (value >= arr[j]) {
            j += 1;
        }

        return j;
    }

    function toStepping(xVal, xPct, value) {

        if (value >= xVal.slice(-1)[0]) {
            return 100;
        }

        var j = getJ(value, xVal),
            va,
            vb,
            pa,
            pb;

        va = xVal[j - 1];
        vb = xVal[j];
        pa = xPct[j - 1];
        pb = xPct[j];

        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);
    }

    function fromStepping(xVal, xPct, value) {
        if (value >= 100) {
            return xVal.slice(-1)[0];
        }

        var j = getJ(value, xPct),
            va,
            vb,
            pa,
            pb;

        va = xVal[j - 1];
        vb = xVal[j];
        pa = xPct[j - 1];
        pb = xPct[j];

        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
    }

    function getStep(xPct, xSteps, snap, value) {

        if (value === 100) {
            return value;
        }

        var j = getJ(value, xPct),
            a,
            b;

        if (snap) {

            a = xPct[j - 1];
            b = xPct[j];

            if (value - a > (b - a) / 2) {
                return b;
            }

            return a;
        }

        if (!xSteps[j - 1]) {
            return value;
        }

        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
    }

    function handleEntryPoint(index, value, that) {

        var percentage;

        if (typeof value === "number") {
            value = [value];
        }

        if (Object.prototype.toString.call(value) !== '[object Array]') {
            throw new Error("noUiSlider (" + VERSION + "): 'range' contains invalid value.");
        }

        if (index === 'min') {
            percentage = 0;
        } else if (index === 'max') {
            percentage = 100;
        } else {
            percentage = parseFloat(index);
        }

        if (!isNumeric(percentage) || !isNumeric(value[0])) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' value isn't numeric.");
        }

        that.xPct.push(percentage);
        that.xVal.push(value[0]);

        if (!percentage) {
            if (!isNaN(value[1])) {
                that.xSteps[0] = value[1];
            }
        } else {
            that.xSteps.push(isNaN(value[1]) ? false : value[1]);
        }

        that.xHighestCompleteStep.push(0);
    }

    function handleStepPoint(i, n, that) {
        if (!n) {
            return true;
        }

        that.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);

        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];
        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
        var step = that.xVal[i] + that.xNumSteps[i] * highestStep;

        that.xHighestCompleteStep[i] = step;
    }

    function Spectrum(entry, snap, direction, singleStep) {

        this.xPct = [];
        this.xVal = [];
        this.xSteps = [singleStep || false];
        this.xNumSteps = [false];
        this.xHighestCompleteStep = [];

        this.snap = snap;
        this.direction = direction;

        var index,
            ordered = [];

        for (index in entry) {
            if (entry.hasOwnProperty(index)) {
                ordered.push([entry[index], index]);
            }
        }

        if (ordered.length && _typeof(ordered[0][0]) === "object") {
            ordered.sort(function (a, b) {
                return a[0][0] - b[0][0];
            });
        } else {
            ordered.sort(function (a, b) {
                return a[0] - b[0];
            });
        }

        for (index = 0; index < ordered.length; index++) {
            handleEntryPoint(ordered[index][1], ordered[index][0], this);
        }

        this.xNumSteps = this.xSteps.slice(0);

        for (index = 0; index < this.xNumSteps.length; index++) {
            handleStepPoint(index, this.xNumSteps[index], this);
        }
    }

    Spectrum.prototype.getMargin = function (value) {

        var step = this.xNumSteps[0];

        if (step && value / step % 1 !== 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit', 'margin' and 'padding' must be divisible by step.");
        }

        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
    };

    Spectrum.prototype.toStepping = function (value) {

        value = toStepping(this.xVal, this.xPct, value);

        return value;
    };

    Spectrum.prototype.fromStepping = function (value) {

        return fromStepping(this.xVal, this.xPct, value);
    };

    Spectrum.prototype.getStep = function (value) {

        value = getStep(this.xPct, this.xSteps, this.snap, value);

        return value;
    };

    Spectrum.prototype.getNearbySteps = function (value) {

        var j = getJ(value, this.xPct);

        return {
            stepBefore: { startValue: this.xVal[j - 2], step: this.xNumSteps[j - 2], highestStep: this.xHighestCompleteStep[j - 2] },
            thisStep: { startValue: this.xVal[j - 1], step: this.xNumSteps[j - 1], highestStep: this.xHighestCompleteStep[j - 1] },
            stepAfter: { startValue: this.xVal[j - 0], step: this.xNumSteps[j - 0], highestStep: this.xHighestCompleteStep[j - 0] }
        };
    };

    Spectrum.prototype.countStepDecimals = function () {
        var stepDecimals = this.xNumSteps.map(countDecimals);
        return Math.max.apply(null, stepDecimals);
    };

    Spectrum.prototype.convert = function (value) {
        return this.getStep(this.toStepping(value));
    };

    var defaultFormatter = {
        'to': function to(value) {
            return value !== undefined && value.toFixed(2);
        },
        'from': Number
    };

    function testStep(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'step' is not numeric.");
        }

        parsed.singleStep = entry;
    }

    function testRange(parsed, entry) {
        if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== 'object' || Array.isArray(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' is not an object.");
        }

        if (entry.min === undefined || entry.max === undefined) {
            throw new Error("noUiSlider (" + VERSION + "): Missing 'min' or 'max' in 'range'.");
        }

        if (entry.min === entry.max) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' 'min' and 'max' cannot be equal.");
        }

        parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.dir, parsed.singleStep);
    }

    function testStart(parsed, entry) {

        entry = asArray(entry);

        if (!Array.isArray(entry) || !entry.length) {
            throw new Error("noUiSlider (" + VERSION + "): 'start' option is incorrect.");
        }

        parsed.handles = entry.length;

        parsed.start = entry;
    }

    function testSnap(parsed, entry) {
        parsed.snap = entry;

        if (typeof entry !== 'boolean') {
            throw new Error("noUiSlider (" + VERSION + "): 'snap' option must be a boolean.");
        }
    }

    function testAnimate(parsed, entry) {
        parsed.animate = entry;

        if (typeof entry !== 'boolean') {
            throw new Error("noUiSlider (" + VERSION + "): 'animate' option must be a boolean.");
        }
    }

    function testAnimationDuration(parsed, entry) {

        parsed.animationDuration = entry;

        if (typeof entry !== 'number') {
            throw new Error("noUiSlider (" + VERSION + "): 'animationDuration' option must be a number.");
        }
    }

    function testConnect(parsed, entry) {

        var connect = [false];
        var i;

        if (entry === 'lower') {
            entry = [true, false];
        } else if (entry === 'upper') {
            entry = [false, true];
        }

        if (entry === true || entry === false) {

            for (i = 1; i < parsed.handles; i++) {
                connect.push(entry);
            }

            connect.push(false);
        } else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
                throw new Error("noUiSlider (" + VERSION + "): 'connect' option doesn't match handle count.");
            } else {
                connect = entry;
            }

        parsed.connect = connect;
    }

    function testOrientation(parsed, entry) {
        switch (entry) {
            case 'horizontal':
                parsed.ort = 0;
                break;
            case 'vertical':
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'orientation' option is invalid.");
        }
    }

    function testMargin(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option must be numeric.");
        }

        if (entry === 0) {
            return;
        }

        parsed.margin = parsed.spectrum.getMargin(entry);

        if (!parsed.margin) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option is only supported on linear sliders.");
        }
    }

    function testLimit(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit' option must be numeric.");
        }

        parsed.limit = parsed.spectrum.getMargin(entry);

        if (!parsed.limit || parsed.handles < 2) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit' option is only supported on linear sliders with 2 or more handles.");
        }
    }

    function testPadding(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric.");
        }

        if (entry === 0) {
            return;
        }

        parsed.padding = parsed.spectrum.getMargin(entry);

        if (!parsed.padding) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option is only supported on linear sliders.");
        }

        if (parsed.padding < 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be a positive number.");
        }

        if (parsed.padding >= 50) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be less than half the range.");
        }
    }

    function testDirection(parsed, entry) {
        switch (entry) {
            case 'ltr':
                parsed.dir = 0;
                break;
            case 'rtl':
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'direction' option was not recognized.");
        }
    }

    function testBehaviour(parsed, entry) {
        if (typeof entry !== 'string') {
            throw new Error("noUiSlider (" + VERSION + "): 'behaviour' must be a string containing options.");
        }

        var tap = entry.indexOf('tap') >= 0;
        var drag = entry.indexOf('drag') >= 0;
        var fixed = entry.indexOf('fixed') >= 0;
        var snap = entry.indexOf('snap') >= 0;
        var hover = entry.indexOf('hover') >= 0;

        if (fixed) {

            if (parsed.handles !== 2) {
                throw new Error("noUiSlider (" + VERSION + "): 'fixed' behaviour must be used with 2 handles");
            }

            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }

        parsed.events = {
            tap: tap || snap,
            drag: drag,
            fixed: fixed,
            snap: snap,
            hover: hover
        };
    }

    function testTooltips(parsed, entry) {

        if (entry === false) {
            return;
        } else if (entry === true) {

            parsed.tooltips = [];

            for (var i = 0; i < parsed.handles; i++) {
                parsed.tooltips.push(true);
            }
        } else {

            parsed.tooltips = asArray(entry);

            if (parsed.tooltips.length !== parsed.handles) {
                throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");
            }

            parsed.tooltips.forEach(function (formatter) {
                if (typeof formatter !== 'boolean' && ((typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) !== 'object' || typeof formatter.to !== 'function')) {
                    throw new Error("noUiSlider (" + VERSION + "): 'tooltips' must be passed a formatter or 'false'.");
                }
            });
        }
    }

    function testFormat(parsed, entry) {

        parsed.format = entry;

        if (typeof entry.to === 'function' && typeof entry.from === 'function') {
            return true;
        }

        throw new Error("noUiSlider (" + VERSION + "): 'format' requires 'to' and 'from' methods.");
    }

    function testCssPrefix(parsed, entry) {

        if (entry !== undefined && typeof entry !== 'string' && entry !== false) {
            throw new Error("noUiSlider (" + VERSION + "): 'cssPrefix' must be a string or `false`.");
        }

        parsed.cssPrefix = entry;
    }

    function testCssClasses(parsed, entry) {

        if (entry !== undefined && (typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== 'object') {
            throw new Error("noUiSlider (" + VERSION + "): 'cssClasses' must be an object.");
        }

        if (typeof parsed.cssPrefix === 'string') {
            parsed.cssClasses = {};

            for (var key in entry) {
                if (!entry.hasOwnProperty(key)) {
                    continue;
                }

                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            }
        } else {
            parsed.cssClasses = entry;
        }
    }

    function testUseRaf(parsed, entry) {
        if (entry === true || entry === false) {
            parsed.useRequestAnimationFrame = entry;
        } else {
            throw new Error("noUiSlider (" + VERSION + "): 'useRequestAnimationFrame' option should be true (default) or false.");
        }
    }

    function testOptions(options) {

        var parsed = {
            margin: 0,
            limit: 0,
            padding: 0,
            animate: true,
            animationDuration: 300,
            format: defaultFormatter
        };

        var tests = {
            'step': { r: false, t: testStep },
            'start': { r: true, t: testStart },
            'connect': { r: true, t: testConnect },
            'direction': { r: true, t: testDirection },
            'snap': { r: false, t: testSnap },
            'animate': { r: false, t: testAnimate },
            'animationDuration': { r: false, t: testAnimationDuration },
            'range': { r: true, t: testRange },
            'orientation': { r: false, t: testOrientation },
            'margin': { r: false, t: testMargin },
            'limit': { r: false, t: testLimit },
            'padding': { r: false, t: testPadding },
            'behaviour': { r: true, t: testBehaviour },
            'format': { r: false, t: testFormat },
            'tooltips': { r: false, t: testTooltips },
            'cssPrefix': { r: false, t: testCssPrefix },
            'cssClasses': { r: false, t: testCssClasses },
            'useRequestAnimationFrame': { r: false, t: testUseRaf }
        };

        var defaults = {
            'connect': false,
            'direction': 'ltr',
            'behaviour': 'tap',
            'orientation': 'horizontal',
            'cssPrefix': 'top-slider-',
            'cssClasses': {
                target: 'target',
                base: 'base',
                origin: 'origin',
                handle: 'handle',
                handleLower: 'handle-lower',
                handleUpper: 'handle-upper',
                horizontal: 'horizontal',
                vertical: 'vertical',
                background: 'background',
                connect: 'fill',
                ltr: 'ltr',
                rtl: 'rtl',
                draggable: 'draggable',
                drag: 'state-drag',
                tap: 'state-tap',
                active: 'active',
                tooltip: 'tooltip',
                pips: 'pips',
                pipsHorizontal: 'pips-horizontal',
                pipsVertical: 'pips-vertical',
                marker: 'marker',
                markerHorizontal: 'marker-horizontal',
                markerVertical: 'marker-vertical',
                markerNormal: 'marker-normal',
                markerLarge: 'marker-large',
                markerSub: 'marker-sub',
                value: 'value',
                valueHorizontal: 'value-horizontal',
                valueVertical: 'value-vertical',
                valueNormal: 'value-normal',
                valueLarge: 'value-large',
                valueSub: 'value-sub'
            },
            'useRequestAnimationFrame': true
        };

        Object.keys(tests).forEach(function (name) {
            if (options[name] === undefined && defaults[name] === undefined) {

                if (tests[name].r) {
                    throw new Error("noUiSlider (" + VERSION + "): '" + name + "' is required.");
                }

                return true;
            }

            tests[name].t(parsed, options[name] === undefined ? defaults[name] : options[name]);
        });

        parsed.pips = options.pips;

        var styles = [['left', 'top'], ['right', 'bottom']];

        parsed.style = styles[parsed.dir][parsed.ort];
        parsed.styleOposite = styles[parsed.dir ? 0 : 1][parsed.ort];

        return parsed;
    }

    function closure(target, options, originalOptions) {

        var actions = getActions();

        var scope_Target = target;
        var scope_Locations = [];
        var scope_Base;
        var scope_Handles;
        var scope_HandleNumbers = [];
        var scope_ActiveHandle = false;
        var scope_Connects;
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Events = {};
        var scope_Self;

        function addOrigin(base, handleNumber) {

            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);

            handle.setAttribute('data-handle', handleNumber);

            if (handleNumber === 0) {
                addClass(handle, options.cssClasses.handleLower);
            } else if (handleNumber === options.handles - 1) {
                addClass(handle, options.cssClasses.handleUpper);
            }

            return origin;
        }

        function addConnect(base, add) {

            if (!add) {
                return false;
            }

            return addNodeTo(base, options.cssClasses.connect);
        }

        function addElements(connectOptions, base) {

            scope_Handles = [];
            scope_Connects = [];

            scope_Connects.push(addConnect(base, connectOptions[0]));

            for (var i = 0; i < options.handles; i++) {
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(base, connectOptions[i + 1]));
            }
        }

        function addSlider(target) {
            addClass(target, options.cssClasses.target);

            if (options.dir === 0) {
                addClass(target, options.cssClasses.ltr);
            } else {
                addClass(target, options.cssClasses.rtl);
            }

            if (options.ort === 0) {
                addClass(target, options.cssClasses.horizontal);
            } else {
                addClass(target, options.cssClasses.vertical);
            }

            scope_Base = addNodeTo(target, options.cssClasses.base);
        }

        function addTooltip(handle, handleNumber) {

            if (!options.tooltips[handleNumber]) {
                return false;
            }

            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }

        function tooltips() {
            var tips = scope_Handles.map(addTooltip);

            bindEvent('update', function (values, handleNumber, unencoded) {

                if (!tips[handleNumber]) {
                    return;
                }

                var formattedValue = values[handleNumber];

                if (options.tooltips[handleNumber] !== true) {
                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                }

                tips[handleNumber].innerHTML = formattedValue;
            });
        }

        function getGroup(mode, values, stepped) {
            if (mode === 'range' || mode === 'steps') {
                return scope_Spectrum.xVal;
            }

            if (mode === 'count') {

                if (!values) {
                    throw new Error("noUiSlider (" + VERSION + "): 'values' required for mode 'count'.");
                }

                var spread = 100 / (values - 1);
                var v;
                var i = 0;

                values = [];

                while ((v = i++ * spread) <= 100) {
                    values.push(v);
                }

                mode = 'positions';
            }

            if (mode === 'positions') {
                return values.map(function (value) {
                    return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
                });
            }

            if (mode === 'values') {
                if (stepped) {

                    return values.map(function (value) {
                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                    });
                }

                return values;
            }
        }

        function generateSpread(density, mode, group) {

            function safeIncrement(value, increment) {
                return (value + increment).toFixed(7) / 1;
            }

            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;

            group = unique(group.slice().sort(function (a, b) {
                return a - b;
            }));

            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }

            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }

            group.forEach(function (current, index) {
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepsize;

                if (mode === 'steps') {
                    step = scope_Spectrum.xNumSteps[index];
                }

                if (!step) {
                    step = high - low;
                }

                if (low === false || high === undefined) {
                    return;
                }

                step = Math.max(step, 0.0000001);

                for (i = low; i <= high; i = safeIncrement(i, step)) {
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;

                    steps = pctDifference / density;
                    realSteps = Math.round(steps);

                    stepsize = pctDifference / realSteps;

                    for (q = 1; q <= realSteps; q += 1) {
                        pctPos = prevPct + q * stepsize;
                        indexes[pctPos.toFixed(5)] = ['x', 0];
                    }

                    type = group.indexOf(i) > -1 ? 1 : mode === 'steps' ? 2 : 0;

                    if (!index && ignoreFirst) {
                        type = 0;
                    }

                    if (!(i === high && ignoreLast)) {
                        indexes[newPct.toFixed(5)] = [i, type];
                    }

                    prevPct = newPct;
                }
            });

            return indexes;
        }

        function addMarking(spread, filterFunc, formatter) {

            var element = document.createElement('div');
            var out = '';
            var valueSizeClasses = [options.cssClasses.valueNormal, options.cssClasses.valueLarge, options.cssClasses.valueSub];
            var markerSizeClasses = [options.cssClasses.markerNormal, options.cssClasses.markerLarge, options.cssClasses.markerSub];
            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];

            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);

            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;

                return source + ' ' + orientationClasses[options.ort] + ' ' + sizeClasses[type];
            }

            function getTags(offset, source, values) {
                return 'class="' + getClasses(values[1], source) + '" style="' + options.style + ': ' + offset + '%"';
            }

            function addSpread(offset, values) {
                values[1] = values[1] && filterFunc ? filterFunc(values[0], values[1]) : values[1];

                out += '<div ' + getTags(offset, options.cssClasses.marker, values) + '></div>';

                if (values[1]) {
                    out += '<div ' + getTags(offset, options.cssClasses.value, values) + '>' + formatter.to(values[0]) + '</div>';
                }
            }

            Object.keys(spread).forEach(function (a) {
                addSpread(a, spread[a]);
            });

            element.innerHTML = out;

            return element;
        }

        function pips(grid) {

            var mode = grid.mode;
            var density = grid.density || 1;
            var filter = grid.filter || false;
            var values = grid.values || false;
            var stepped = grid.stepped || false;
            var group = getGroup(mode, values, stepped);
            var spread = generateSpread(density, mode, group);
            var format = grid.format || {
                to: Math.round
            };

            return scope_Target.appendChild(addMarking(spread, filter, format));
        }

        function baseSize() {
            var rect = scope_Base.getBoundingClientRect(),
                alt = 'offset' + ['Width', 'Height'][options.ort];
            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
        }

        function attachEvent(events, element, callback, data) {

            var method = function method(e) {

                if (scope_Target.hasAttribute('disabled')) {
                    return false;
                }

                if (hasClass(scope_Target, options.cssClasses.tap)) {
                    return false;
                }

                e = fixEvent(e, data.pageOffset);

                if (!e) {
                    return false;
                }

                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                    return false;
                }

                if (data.hover && e.buttons) {
                    return false;
                }

                e.calcPoint = e.points[options.ort];

                callback(e, data);
            };

            var methods = [];

            events.split(' ').forEach(function (eventName) {
                element.addEventListener(eventName, method, false);
                methods.push([eventName, method]);
            });

            return methods;
        }

        function fixEvent(e, pageOffset) {
            e.preventDefault();

            var touch = e.type.indexOf('touch') === 0;
            var mouse = e.type.indexOf('mouse') === 0;
            var pointer = e.type.indexOf('pointer') === 0;
            var x;
            var y;

            if (e.type.indexOf('MSPointer') === 0) {
                pointer = true;
            }

            if (touch) {
                if (e.touches.length > 1) {
                    return false;
                }

                x = e.changedTouches[0].pageX;
                y = e.changedTouches[0].pageY;
            }

            pageOffset = pageOffset || getPageOffset();

            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }

            e.pageOffset = pageOffset;
            e.points = [x, y];
            e.cursor = mouse || pointer;

            return e;
        }

        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset(scope_Base, options.ort);
            var proposal = location * 100 / baseSize();
            return options.dir ? 100 - proposal : proposal;
        }

        function getClosestHandle(proposal) {

            var closest = 100;
            var handleNumber = false;

            scope_Handles.forEach(function (handle, index) {
                if (handle.hasAttribute('disabled')) {
                    return;
                }

                var pos = Math.abs(scope_Locations[index] - proposal);

                if (pos < closest) {
                    handleNumber = index;
                    closest = pos;
                }
            });

            return handleNumber;
        }

        function moveHandles(upward, proposal, locations, handleNumbers) {

            var proposals = locations.slice();

            var b = [!upward, upward];
            var f = [upward, !upward];

            handleNumbers = handleNumbers.slice();

            if (upward) {
                handleNumbers.reverse();
            }

            if (handleNumbers.length > 1) {

                handleNumbers.forEach(function (handleNumber, o) {

                    var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o]);

                    if (to === false) {
                        proposal = 0;
                    } else {
                        proposal = to - proposals[handleNumber];
                        proposals[handleNumber] = to;
                    }
                });
            } else {
                    b = f = [true];
                }

            var state = false;

            handleNumbers.forEach(function (handleNumber, o) {
                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
            });

            if (state) {
                handleNumbers.forEach(function (handleNumber) {
                    fireEvent('update', handleNumber);
                    fireEvent('slide', handleNumber);
                });
            }
        }

        function fireEvent(eventName, handleNumber, tap) {

            Object.keys(scope_Events).forEach(function (targetEvent) {

                var eventType = targetEvent.split('.')[0];

                if (eventName === eventType) {
                    scope_Events[targetEvent].forEach(function (callback) {

                        callback.call(scope_Self, scope_Values.map(options.format.to), handleNumber, scope_Values.slice(), tap || false, scope_Locations.slice());
                    });
                }
            });
        }

        function documentLeave(event, data) {
            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {
                eventEnd(event, data);
            }
        }

        function eventMove(event, data) {
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
                return eventEnd(event, data);
            }

            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);

            var proposal = movement * 100 / data.baseSize;

            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);
        }

        function eventEnd(event, data) {
            if (scope_ActiveHandle) {
                removeClass(scope_ActiveHandle, options.cssClasses.active);
                scope_ActiveHandle = false;
            }

            if (event.cursor) {
                document.body.style.cursor = '';
                document.body.removeEventListener('selectstart', document.body.noUiListener);
            }

            document.documentElement.noUiListeners.forEach(function (c) {
                document.documentElement.removeEventListener(c[0], c[1]);
            });

            removeClass(scope_Target, options.cssClasses.drag);

            setZindex();

            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent('set', handleNumber);
                fireEvent('change', handleNumber);
                fireEvent('end', handleNumber);
            });
        }

        function eventStart(event, data) {

            if (data.handleNumbers.length === 1) {

                var handle = scope_Handles[data.handleNumbers[0]];

                if (handle.hasAttribute('disabled')) {
                    return false;
                }

                scope_ActiveHandle = handle.children[0];
                addClass(scope_ActiveHandle, options.cssClasses.active);
            }

            event.preventDefault();

            event.stopPropagation();

            var moveEvent = attachEvent(actions.move, document.documentElement, eventMove, {
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice()
            });

            var endEvent = attachEvent(actions.end, document.documentElement, eventEnd, {
                handleNumbers: data.handleNumbers
            });

            var outEvent = attachEvent("mouseout", document.documentElement, documentLeave, {
                handleNumbers: data.handleNumbers
            });

            document.documentElement.noUiListeners = moveEvent.concat(endEvent, outEvent);

            if (event.cursor) {
                document.body.style.cursor = getComputedStyle(event.target).cursor;

                if (scope_Handles.length > 1) {
                    addClass(scope_Target, options.cssClasses.drag);
                }

                var f = function f() {
                    return false;
                };

                document.body.noUiListener = f;

                document.body.addEventListener('selectstart', f, false);
            }

            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent('start', handleNumber);
            });
        }

        function eventTap(event) {
            event.stopPropagation();

            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);

            if (handleNumber === false) {
                return false;
            }

            if (!options.events.snap) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            setHandle(handleNumber, proposal, true, true);

            setZindex();

            fireEvent('slide', handleNumber, true);
            fireEvent('set', handleNumber, true);
            fireEvent('change', handleNumber, true);
            fireEvent('update', handleNumber, true);

            if (options.events.snap) {
                eventStart(event, { handleNumbers: [handleNumber] });
            }
        }

        function eventHover(event) {

            var proposal = calcPointToPercentage(event.calcPoint);

            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);

            Object.keys(scope_Events).forEach(function (targetEvent) {
                if ('hover' === targetEvent.split('.')[0]) {
                    scope_Events[targetEvent].forEach(function (callback) {
                        callback.call(scope_Self, value);
                    });
                }
            });
        }

        function bindSliderEvents(behaviour) {
            if (!behaviour.fixed) {

                scope_Handles.forEach(function (handle, index) {
                    attachEvent(actions.start, handle.children[0], eventStart, {
                        handleNumbers: [index]
                    });
                });
            }

            if (behaviour.tap) {
                attachEvent(actions.start, scope_Base, eventTap, {});
            }

            if (behaviour.hover) {
                attachEvent(actions.move, scope_Base, eventHover, { hover: true });
            }

            if (behaviour.drag) {

                scope_Connects.forEach(function (connect, index) {

                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                        return;
                    }

                    var handleBefore = scope_Handles[index - 1];
                    var handleAfter = scope_Handles[index];
                    var eventHolders = [connect];

                    addClass(connect, options.cssClasses.draggable);

                    if (behaviour.fixed) {
                        eventHolders.push(handleBefore.children[0]);
                        eventHolders.push(handleAfter.children[0]);
                    }

                    eventHolders.forEach(function (eventHolder) {
                        attachEvent(actions.start, eventHolder, eventStart, {
                            handles: [handleBefore, handleAfter],
                            handleNumbers: [index - 1, index]
                        });
                    });
                });
            }
        }

        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward) {
            if (scope_Handles.length > 1) {

                if (lookBackward && handleNumber > 0) {
                    to = Math.max(to, reference[handleNumber - 1] + options.margin);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.min(to, reference[handleNumber + 1] - options.margin);
                }
            }

            if (scope_Handles.length > 1 && options.limit) {

                if (lookBackward && handleNumber > 0) {
                    to = Math.min(to, reference[handleNumber - 1] + options.limit);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.max(to, reference[handleNumber + 1] - options.limit);
                }
            }

            if (options.padding) {

                if (handleNumber === 0) {
                    to = Math.max(to, options.padding);
                }

                if (handleNumber === scope_Handles.length - 1) {
                    to = Math.min(to, 100 - options.padding);
                }
            }

            to = scope_Spectrum.getStep(to);

            to = limit(to);

            if (to === reference[handleNumber]) {
                return false;
            }

            return to;
        }

        function toPct(pct) {
            return pct + '%';
        }

        function updateHandlePosition(handleNumber, to) {
            scope_Locations[handleNumber] = to;

            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);

            var stateUpdate = function stateUpdate() {
                scope_Handles[handleNumber].style[options.style] = toPct(to);
                updateConnect(handleNumber);
                updateConnect(handleNumber + 1);
            };

            if (window.requestAnimationFrame && options.useRequestAnimationFrame) {
                window.requestAnimationFrame(stateUpdate);
            } else {
                stateUpdate();
            }
        }

        function setZindex() {

            scope_HandleNumbers.forEach(function (handleNumber) {
                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
                scope_Handles[handleNumber].childNodes[0].style.zIndex = zIndex;
            });
        }

        function setHandle(handleNumber, to, lookBackward, lookForward) {

            to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward);

            if (to === false) {
                return false;
            }

            updateHandlePosition(handleNumber, to);

            return true;
        }

        function updateConnect(index) {
            if (!scope_Connects[index]) {
                return;
            }

            var l = 0;
            var h = 100;

            if (index !== 0) {
                l = scope_Locations[index - 1];
            }

            if (index !== scope_Connects.length - 1) {
                h = scope_Locations[index];
            }

            scope_Connects[index].style[options.style] = toPct(l);
            scope_Connects[index].style[options.styleOposite] = toPct(100 - h);

            var direction = scope_Self.options.direction;

            if (direction === "ltr") {

                if (parseInt(toPct(l)) !== 0) scope_Connects[index].style[options.style] = parseInt(toPct(l)) + 1 + "%";
                if (parseInt(toPct(100 - h)) !== 0) scope_Connects[index].style[options.styleOposite] = parseInt(toPct(100 - h)) - 1 + "%";
            } else if (direction === "rtl") {

                if (parseInt(toPct(l)) !== 0) scope_Connects[index].style[options.style] = parseInt(toPct(l)) - 1 + "%";
                if (parseInt(toPct(100 - h)) !== 0) scope_Connects[index].style[options.styleOposite] = parseInt(toPct(100 - h)) + 1 + "%";
            }
        }

        function setValue(to, handleNumber) {
            if (to === null || to === false) {
                return;
            }

            if (typeof to === 'number') {
                to = String(to);
            }

            to = options.format.from(to);

            if (to !== false && !isNaN(to)) {
                setHandle(handleNumber, scope_Spectrum.toStepping(to), false, false);
            }
        }

        function valueSet(input, fireSetEvent) {

            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;

            fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent;

            values.forEach(setValue);

            if (options.animate && !isInit) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            scope_HandleNumbers.forEach(function (handleNumber) {
                setHandle(handleNumber, scope_Locations[handleNumber], true, false);
            });

            setZindex();

            scope_HandleNumbers.forEach(function (handleNumber) {

                fireEvent('update', handleNumber);

                if (values[handleNumber] !== null && fireSetEvent) {
                    fireEvent('set', handleNumber);
                }
            });
        }

        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }

        function valueGet() {

            var values = scope_Values.map(options.format.to);

            if (values.length === 1) {
                return values[0];
            }

            return values;
        }

        function destroy() {

            for (var key in options.cssClasses) {
                if (!options.cssClasses.hasOwnProperty(key)) {
                    continue;
                }
                removeClass(scope_Target, options.cssClasses[key]);
            }

            while (scope_Target.firstChild) {
                scope_Target.removeChild(scope_Target.firstChild);
            }

            delete scope_Target.noUiSlider;
        }

        function getCurrentStep() {
            return scope_Locations.map(function (location, index) {

                var nearbySteps = scope_Spectrum.getNearbySteps(location);
                var value = scope_Values[index];
                var increment = nearbySteps.thisStep.step;
                var decrement = null;

                if (increment !== false) {
                    if (value + increment > nearbySteps.stepAfter.startValue) {
                        increment = nearbySteps.stepAfter.startValue - value;
                    }
                }

                if (value > nearbySteps.thisStep.startValue) {
                    decrement = nearbySteps.thisStep.step;
                } else if (nearbySteps.stepBefore.step === false) {
                    decrement = false;
                } else {
                        decrement = value - nearbySteps.stepBefore.highestStep;
                    }

                if (location === 100) {
                    increment = null;
                } else if (location === 0) {
                    decrement = null;
                }

                var stepDecimals = scope_Spectrum.countStepDecimals();

                if (increment !== null && increment !== false) {
                    increment = Number(increment.toFixed(stepDecimals));
                }

                if (decrement !== null && decrement !== false) {
                    decrement = Number(decrement.toFixed(stepDecimals));
                }

                return [decrement, increment];
            });
        }

        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);

            if (namespacedEvent.split('.')[0] === 'update') {
                scope_Handles.forEach(function (a, index) {
                    fireEvent('update', index);
                });
            }
        }

        function removeEvent(namespacedEvent) {

            var event = namespacedEvent && namespacedEvent.split('.')[0];
            var namespace = event && namespacedEvent.substring(event.length);

            Object.keys(scope_Events).forEach(function (bind) {

                var tEvent = bind.split('.')[0],
                    tNamespace = bind.substring(tEvent.length);

                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                    delete scope_Events[bind];
                }
            });
        }

        function updateOptions(optionsToUpdate, fireSetEvent) {
            var v = valueGet();

            var updateAble = ['margin', 'limit', 'padding', 'range', 'animate', 'snap', 'step', 'format'];

            updateAble.forEach(function (name) {
                if (optionsToUpdate[name] !== undefined) {
                    originalOptions[name] = optionsToUpdate[name];
                }
            });

            var newOptions = testOptions(originalOptions);

            updateAble.forEach(function (name) {
                if (optionsToUpdate[name] !== undefined) {
                    options[name] = newOptions[name];
                }
            });

            newOptions.spectrum.direction = scope_Spectrum.direction;
            scope_Spectrum = newOptions.spectrum;

            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;

            scope_Locations = [];
            valueSet(optionsToUpdate.start || v, fireSetEvent);
        }

        if (scope_Target.noUiSlider) {
            throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");
        }

        addSlider(scope_Target);
        addElements(options.connect, scope_Base);

        scope_Self = {
            destroy: destroy,
            steps: getCurrentStep,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            reset: valueReset,

            __moveHandles: function __moveHandles(a, b, c) {
                moveHandles(a, b, scope_Locations, c);
            },
            options: originalOptions,
            updateOptions: updateOptions,
            target: scope_Target,
            pips: pips };

        bindSliderEvents(options.events);

        valueSet(options.start);

        if (options.pips) {
            pips(options.pips);
        }

        if (options.tooltips) {
            tooltips();
        }

        return scope_Self;
    }

    function initialize(target, originalOptions) {

        if (!target.nodeName) {
            throw new Error("noUiSlider (" + VERSION + "): create requires a single element.");
        }

        var options = testOptions(originalOptions, target);
        var api = closure(target, options, originalOptions);

        target.noUiSlider = api;

        return api;
    }

    return {
        version: VERSION,
        create: initialize
    };
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('SUNEDITOR_LANG a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    var lang = {
        toolbar: {
            default: '기본값',
            save: '저장',
            font: '글꼴',
            formats: '문단 형식',
            fontSize: '크기',
            bold: '굵게',
            underline: '밑줄',
            italic: '기울임',
            strike: '취소선',
            subscript: '아래 첨자',
            superscript: '위 첨자',
            removeFormat: '형식 제거',
            fontColor: '글자색',
            hiliteColor: '글자 배경색',
            indent: '들여쓰기',
            outdent: '내어쓰기',
            align: '정렬',
            alignLeft: '왼쪽 정렬',
            alignRight: '오른쪽 정렬',
            alignCenter: '가운데 정렬',
            alignJustify: '양쪽 정렬',
            list: '리스트',
            orderList: '숫자형 리스트',
            unorderList: '원형 리스트',
            horizontalRule: '가로 줄 삽입',
            hr_solid: '실선',
            hr_dotted: '점선',
            hr_dashed: '대시',
            table: '테이블',
            link: '링크',
            image: '이미지',
            video: '동영상',
            fullScreen: '전체 화면',
            showBlocks: '블록 보기',
            codeView: 'HTML 편집',
            undo: '실행 취소',
            redo: '다시 실행',
            preview: '미리보기',
            print: '인쇄',
            tag_p: '본문',
            tag_div: '기본 (DIV)',
            tag_h: '제목',
            tag_blockquote: '인용문',
            tag_pre: '코드',
            template: '템플릿'
        },
        dialogBox: {
            linkBox: {
                title: '링크 삽입',
                url: '인터넷 주소',
                text: '화면 텍스트',
                newWindowCheck: '새창으로 열기'
            },
            imageBox: {
                title: '이미지 삽입',
                file: '파일 선택',
                url: '이미지 주소',
                altText: '대체 문자열'
            },
            videoBox: {
                title: '동영상 삽입',
                url: '미디어 임베드 주소, 유튜브'
            },
            caption: '설명 넣기',
            close: '닫기',
            submitButton: '확인',
            revertButton: '되돌리기',
            proportion: '비율 맞춤',
            basic: '기본',
            left: '왼쪽',
            right: '오른쪽',
            center: '가운데',
            width: '가로',
            height: '세로'
        },
        controller: {
            edit: '편집',
            remove: '삭제',
            insertRowAbove: '위에 행 삽입',
            insertRowBelow: '아래에 행 삽입',
            deleteRow: '행 삭제',
            insertColumnBefore: '왼쪽에 열 삽입',
            insertColumnAfter: '오른쪽에 열 삽입',
            deleteColumn: '열 삭제',
            resize100: '100% 크기',
            resize75: '75% 크기',
            resize50: '50% 크기',
            resize25: '25% 크기',
            mirrorHorizontal: '좌우 반전',
            mirrorVertical: '상하 반전',
            rotateLeft: '왼쪽으로 회전',
            rotateRight: '오른쪽으로 회전',
            maxSize: '최대화',
            minSize: '최소화',
            tableHeader: '테이블 제목',
            mergeCells: '셀 병합',
            splitCells: '셀 분할',
            HorizontalSplit: '가로 분할',
            VerticalSplit: '세로 분할'
        }
    };

    if ((typeof noGlobal === 'undefined' ? 'undefined' : _typeof(noGlobal)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {
        if (!window.SUNEDITOR_LANG) {
            window.SUNEDITOR_LANG = {};
        }

        window.SUNEDITOR_LANG.ko = lang;
    }

    return lang;
});var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e) {
    var t = {};

    function n(i) {
        if (t[i]) return t[i].exports;
        var l = t[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return e[i].call(l.exports, l, l.exports, n), l.l = !0, l.exports;
    }
    n.m = e, n.c = t, n.d = function (e, t, i) {
        n.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: i
        });
    }, n.r = function (e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        });
    }, n.t = function (e, t) {
        if (1 & t && (e = n(e)), 8 & t) return e;
        if (4 & t && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && e && e.__esModule) return e;
        var i = Object.create(null);
        if (n.r(i), Object.defineProperty(i, "default", {
            enumerable: !0,
            value: e
        }), 2 & t && "string" != typeof e) for (var l in e) {
            n.d(i, l, function (t) {
                return e[t];
            }.bind(null, l));
        }return i;
    }, n.n = function (e) {
        var t = e && e.__esModule ? function () {
            return e.default;
        } : function () {
            return e;
        };
        return n.d(t, "a", t), t;
    }, n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "", n(n.s = "XJR1");
}({
    "3FqI": function FqI(e, t, n) {},
    P6u4: function P6u4(e, t, n) {
        "use strict";

        var i, l;
        i = "undefined" != typeof window ? window : this, l = function l(e, t) {
            var n = {
                toolbar: {
                    default: "Default",
                    save: "Save",
                    font: "Font",
                    formats: "Formats",
                    fontSize: "Size",
                    bold: "Bold",
                    underline: "Underline",
                    italic: "Italic",
                    strike: "Strike",
                    subscript: "Subscript",
                    superscript: "Superscript",
                    removeFormat: "Remove Format",
                    fontColor: "Font Color",
                    hiliteColor: "Hilite Color",
                    indent: "Indent",
                    outdent: "Outdent",
                    align: "Align",
                    alignLeft: "Align left",
                    alignRight: "Align right",
                    alignCenter: "Align center",
                    alignJustify: "Align justify",
                    list: "list",
                    orderList: "Ordered list",
                    unorderList: "Unordered list",
                    horizontalRule: "horizontal line",
                    hr_solid: "solid",
                    hr_dotted: "dotted",
                    hr_dashed: "dashed",
                    table: "Table",
                    link: "Link",
                    image: "Image",
                    video: "Video",
                    fullScreen: "Full screen",
                    showBlocks: "Show blocks",
                    codeView: "Code view",
                    undo: "Undo",
                    redo: "Redo",
                    preview: "Preview",
                    print: "print",
                    tag_p: "Paragraph",
                    tag_div: "Normal (DIV)",
                    tag_h: "Header",
                    tag_blockquote: "Quote",
                    tag_pre: "Code",
                    template: "Template"
                },
                dialogBox: {
                    linkBox: {
                        title: "Insert Link",
                        url: "URL to link",
                        text: "Text to display",
                        newWindowCheck: "Open in new window"
                    },
                    imageBox: {
                        title: "Insert image",
                        file: "Select from files",
                        url: "Image URL",
                        altText: "Alternative text"
                    },
                    videoBox: {
                        title: "Insert Video",
                        url: "Media embed URL, YouTube"
                    },
                    caption: "Insert description",
                    close: "Close",
                    submitButton: "Submit",
                    revertButton: "Revert",
                    proportion: "constrain proportions",
                    width: "Width",
                    height: "Height",
                    basic: "Basic",
                    left: "Left",
                    right: "Right",
                    center: "Center"
                },
                controller: {
                    edit: "Edit",
                    remove: "Remove",
                    insertRowAbove: "Insert row above",
                    insertRowBelow: "Insert row below",
                    deleteRow: "Delete row",
                    insertColumnBefore: "Insert column before",
                    insertColumnAfter: "Insert column after",
                    deleteColumn: "Delete column",
                    resize100: "Resize 100%",
                    resize75: "Resize 75%",
                    resize50: "Resize 50%",
                    resize25: "Resize 25%",
                    mirrorHorizontal: "Mirror, Horizontal",
                    mirrorVertical: "Mirror, Vertical",
                    rotateLeft: "Rotate left",
                    rotateRight: "Rotate right",
                    maxSize: "Max size",
                    minSize: "Min size",
                    tableHeader: "Table header",
                    mergeCells: "Merge cells",
                    splitCells: "Split Cells",
                    HorizontalSplit: "Horizontal split",
                    VerticalSplit: "Vertical split"
                }
            };
            return void 0 === t && (e.SUNEDITOR_LANG || (e.SUNEDITOR_LANG = {}), e.SUNEDITOR_LANG.en = n), n;
        }, "object" == _typeof(e.exports) ? e.exports = i.document ? l(i, !0) : function (e) {
            if (!e.document) throw new Error("SUNEDITOR_LANG a window with a document");
            return l(e);
        } : l(i);
    },
    WUQj: function WUQj(e, t, n) {},
    XJR1: function XJR1(e, t, n) {
        "use strict";

        n.r(t);
        n("3FqI"), n("WUQj");
        var i = {
            name: "colorPicker",
            add: function add(e) {
                var t = e.context;
                t.colorPicker = {
                    colorListHTML: "",
                    _colorInput: "",
                    _defaultColor: "#000",
                    _styleProperty: "color",
                    _currentColor: "",
                    _colorList: []
                };
                var n = this.createColorList(e.context.option, e.lang, this._makeColorList);
                t.colorPicker.colorListHTML = n, n = null;
            },
            createColorList: function createColorList(e, t, n) {
                var i = e.colorList && 0 !== e.colorList.length ? e.colorList : ["#ff0000", "#ff5e00", "#ffe400", "#abf200", "#00d8ff", "#0055ff", "#6600ff", "#ff00dd", "#000000", "#ffd8d8", "#fae0d4", "#faf4c0", "#e4f7ba", "#d4f4fa", "#d9e5ff", "#e8d9ff", "#ffd9fa", "#f1f1f1", "#ffa7a7", "#ffc19e", "#faed7d", "#cef279", "#b2ebf4", "#b2ccff", "#d1b2ff", "#ffb2f5", "#bdbdbd", "#f15f5f", "#f29661", "#e5d85c", "#bce55c", "#5cd1e5", "#6699ff", "#a366ff", "#f261df", "#8c8c8c", "#980000", "#993800", "#998a00", "#6b9900", "#008299", "#003399", "#3d0099", "#990085", "#353535", "#670000", "#662500", "#665c00", "#476600", "#005766", "#002266", "#290066", "#660058", "#222222"];
                var l = [],
                    o = '<div class="se-list-inner">';
                for (var _e = 0, _t = i.length; _e < _t; _e++) {
                    "string" == typeof i[_e] && (l.push(i[_e]), _e < _t - 1) || (l.length > 0 && (o += '<div class="se-selector-color">' + n(l) + "</div>", l = []), "object" == _typeof(i[_e]) && (o += '<div class="se-selector-color">' + n(i[_e]) + "</div>"));
                }return o += '<form class="se-submenu-form-group">   <input type="text" maxlength="7" class="_se_color_picker_input" />   <button type="submit" class="se-btn-primary se-tooltip _se_color_picker_submit">       <i class="se-icon-checked"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + t.dialogBox.submitButton + '</span></span>   </button>   <button type="button" class="se-btn se-tooltip _se_color_picker_remove">       <i class="se-icon-erase"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + t.toolbar.removeFormat + "</span></span>   </button></form></div>";
            },
            _makeColorList: function _makeColorList(e) {
                var t = "";
                t += '<ul class="se-color-pallet">';
                for (var _n, _i = 0, _l = e.length; _i < _l; _i++) {
                    "string" == typeof (_n = e[_i]) && (t += '<li>   <button type="button" data-value="' + _n + '" title="' + _n + '" style="background-color:' + _n + ';"></button></li>');
                }return t += "</ul>";
            },
            init: function init(e, t) {
                var n = this.plugins.colorPicker;
                var i = t || n.getColorInNode.call(this, e) || this.context.colorPicker._defaultColor;
                i = n.isHexColor(i) ? i : n.rgb2hex(i) || i;
                var l = this.context.colorPicker._colorList;
                if (l) for (var _e2 = 0, _t2 = l.length; _e2 < _t2; _e2++) {
                    i.toLowerCase() === l[_e2].getAttribute("data-value").toLowerCase() ? this.util.addClass(l[_e2], "active") : this.util.removeClass(l[_e2], "active");
                }n.setInputText.call(this, n.colorName2hex.call(this, i));
            },
            setCurrentColor: function setCurrentColor(e) {
                this.context.colorPicker._currentColor = e, this.context.colorPicker._colorInput.style.borderColor = e;
            },
            setInputText: function setInputText(e) {
                e = /^#/.test(e) ? e : "#" + e, this.context.colorPicker._colorInput.value = e, this.plugins.colorPicker.setCurrentColor.call(this, e);
            },
            getColorInNode: function getColorInNode(e) {
                var t = "";
                var n = this.context.colorPicker._styleProperty;
                for (; e && !this.util.isWysiwygDiv(e) && 0 === t.length;) {
                    1 === e.nodeType && e.style[n] && (t = e.style[n]), e = e.parentNode;
                }return t;
            },
            isHexColor: function isHexColor(e) {
                return (/^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(e)
                );
            },
            rgb2hex: function rgb2hex(e) {
                return (e = e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === e.length ? "#" + ("0" + parseInt(e[1], 10).toString(16)).slice(-2) + ("0" + parseInt(e[2], 10).toString(16)).slice(-2) + ("0" + parseInt(e[3], 10).toString(16)).slice(-2) : "";
            },
            colorName2hex: function colorName2hex(e) {
                if (/^#/.test(e)) return e;
                var t = this.util.createElement("div");
                t.style.display = "none", t.style.color = e;
                var n = this._w.getComputedStyle(this._d.body.appendChild(t)).color.match(/\d+/g).map(function (e) {
                    return parseInt(e, 10);
                });
                return this.util.removeItem(t), n.length >= 3 && "#" + ((1 << 24) + (n[0] << 16) + (n[1] << 8) + n[2]).toString(16).substr(1);
            }
        },
            l = {
            name: "dialog",
            add: function add(e) {
                var t = e.context;
                t.dialog = {};
                var n = e.util.createElement("DIV");
                n.className = "se-dialog sun-editor-common";
                var i = e.util.createElement("DIV");
                i.className = "se-dialog-back", i.style.display = "none";
                var l = e.util.createElement("DIV");
                l.className = "se-dialog-inner", l.style.display = "none", n.appendChild(i), n.appendChild(l), t.dialog.modalArea = n, t.dialog.back = i, t.dialog.modal = l, t.dialog.modal.addEventListener("click", this.onClick_dialog.bind(e)), t.element.relative.appendChild(n), n = null, i = null, l = null;
            },
            onClick_dialog: function onClick_dialog(e) {
                e.stopPropagation(), (/se-dialog-inner/.test(e.target.className) || /close/.test(e.target.getAttribute("data-command"))) && this.plugins.dialog.close.call(this);
            },
            open: function open(e, t) {
                if (this.modalForm) return !1;
                this.plugins.dialog._bindClose && (this._d.removeEventListener("keydown", this.plugins.dialog._bindClose), this.plugins.dialog._bindClose = null), this.plugins.dialog._bindClose = function (e) {
                    /27/.test(e.keyCode) && this.plugins.dialog.close.call(this);
                }.bind(this), this._d.addEventListener("keydown", this.plugins.dialog._bindClose), this.context.dialog.updateModal = t, "full" === this.context.option.popupDisplay ? this.context.dialog.modalArea.style.position = "fixed" : this.context.dialog.modalArea.style.position = "absolute", this.context.dialog.kind = e, this.modalForm = this.context[e].modal;
                var n = this.context[e].focusElement;
                "function" == typeof this.plugins[e].on && this.plugins[e].on.call(this, t), this.context.dialog.modalArea.style.display = "block", this.context.dialog.back.style.display = "block", this.context.dialog.modal.style.display = "block", this.modalForm.style.display = "block", n && n.focus();
            },
            _bindClose: null,
            close: function close() {
                this.plugins.dialog._bindClose && (this._d.removeEventListener("keydown", this.plugins.dialog._bindClose), this.plugins.dialog._bindClose = null), this.modalForm.style.display = "none", this.context.dialog.back.style.display = "none", this.context.dialog.modalArea.style.display = "none", this.modalForm = null, this.context.dialog.updateModal = !1, this.plugins[this.context.dialog.kind].init.call(this);
            }
        },
            o = {
            name: "resizing",
            add: function add(e) {
                var t = e.context;
                t.resizing = {
                    _resizeClientX: 0,
                    _resizeClientY: 0,
                    _resize_plugin: "",
                    _resize_w: 0,
                    _resize_h: 0,
                    _origin_w: 0,
                    _origin_h: 0,
                    _rotateVertical: !1,
                    _resize_direction: "",
                    _move_path: null,
                    _isChange: !1
                };
                var n = this.setController_resize.call(e);
                t.resizing.resizeContainer = n, t.resizing.resizeDiv = n.querySelector(".se-modal-resize"), t.resizing.resizeDot = n.querySelector(".se-resize-dot"), t.resizing.resizeDisplay = n.querySelector(".se-resize-display");
                var i = this.setController_button.call(e);
                t.resizing.resizeButton = i, i.addEventListener("mousedown", function (e) {
                    e.stopPropagation();
                }, !1);
                var l = t.resizing.resizeHandles = t.resizing.resizeDot.querySelectorAll("span");
                t.resizing.resizeButtonGroup = i.querySelector("._se_resizing_btn_group"), t.resizing.alignMenu = i.querySelector(".se-resizing-align-list"), t.resizing.alignMenuList = t.resizing.alignMenu.querySelectorAll("button"), t.resizing.alignButton = i.querySelector("._se_resizing_align_button"), t.resizing.alignButtonIcon = t.resizing.alignButton.querySelector("i"), t.resizing.captionButton = i.querySelector("._se_resizing_caption_button"), l[0].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[1].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[2].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[3].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[4].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[5].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[6].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), l[7].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(e)), i.addEventListener("click", this.onClick_resizeButton.bind(e)), t.element.relative.appendChild(n), t.element.relative.appendChild(i), n = null, i = null, l = null;
            },
            setController_resize: function setController_resize() {
                var e = this.util.createElement("DIV");
                return e.className = "se-resizing-container", e.style.display = "none", e.innerHTML = '<div class="se-modal-resize">   <div class="se-resize-display"></div></div><div class="se-resize-dot">   <span class="tl"></span>   <span class="tr"></span>   <span class="bl"></span>   <span class="br"></span>   <span class="lw"></span>   <span class="th"></span>   <span class="rw"></span>   <span class="bh"></span></div>', e;
            },
            setController_button: function setController_button() {
                var e = this.lang,
                    t = this.util.createElement("DIV");
                return t.className = "se-controller se-controller-resizing", t.innerHTML = '<div class="se-arrow se-arrow-up"></div><div class="se-btn-group _se_resizing_btn_group">   <button type="button" data-command="percent" data-value="1" class="se-tooltip">       <span>100%</span>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.resize100 + '</span></span>   </button>   <button type="button" data-command="percent" data-value="0.75" class="se-tooltip">       <span>75%</span>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.resize75 + '</span></span>   </button>   <button type="button" data-command="percent" data-value="0.5" class="se-tooltip">       <span>50%</span>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.resize50 + '</span></span>   </button>   <button type="button" data-command="percent" data-value="0.25" class="se-tooltip">       <span>25%</span>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.resize25 + '</span></span>   </button>   <button type="button" data-command="rotate" data-value="-90" class="se-tooltip">       <i class="se-icon-rotate-left"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.rotateLeft + '</span></span>   </button>   <button type="button" data-command="rotate" data-value="90" class="se-tooltip">       <i class="se-icon-rotate-right"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.rotateRight + '</span></span>   </button></div><div class="se-btn-group">   <button type="button" data-command="mirror" data-value="h" class="se-tooltip">       <i class="se-icon-mirror-horizontal"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.mirrorHorizontal + '</span></span>   </button>   <button type="button" data-command="mirror" data-value="v" class="se-tooltip">       <i class="se-icon-mirror-vertical"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.mirrorVertical + '</span></span>   </button>   <button type="button" data-command="onalign" class="se-tooltip _se_resizing_align_button">       <i class="se-icon-align-justify"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.align + '</span></span>   </button>   <div class="se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list">       <div class="se-list-inner">           <ul class="se-list-basic">               <li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="basic">                   <i class="se-icon-align-justify"></i>                   <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.basic + '</span></span>               </button></li>               <li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="left">                   <i class="se-icon-align-left"></i>                   <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.left + '</span></span>               </button></li>               <li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="center">                   <i class="se-icon-align-center"></i>                   <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.center + '</span></span>               </button></li>               <li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="right">                   <i class="se-icon-align-right"></i>                   <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.right + '</span></span>               </button></li>           </ul>       </div>   </div>   <button type="button" data-command="caption" class="se-tooltip _se_resizing_caption_button">       <i class="se-icon-caption"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.caption + '</span></span>   </button>   <button type="button" data-command="revert" class="se-tooltip">       <i class="se-icon-revert"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.dialogBox.revertButton + '</span></span>   </button>   <button type="button" data-command="update" class="se-tooltip">       <i class="se-icon-modify"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.edit + '</span></span>   </button>   <button type="button" data-command="delete" class="se-tooltip">       <i class="se-icon-delete"></i>       <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.remove + "</span></span>   </button></div>", t;
            },
            call_controller_resize: function call_controller_resize(e, t) {
                var n = this.context.resizing;
                n._resize_plugin = t;
                var i = n.resizeContainer,
                    l = n.resizeDiv,
                    o = this.util.getOffset(e),
                    s = n._rotateVertical = /^(90|270)$/.test(Math.abs(e.getAttribute("data-rotate")).toString()),
                    a = s ? e.offsetHeight : e.offsetWidth,
                    r = s ? e.offsetWidth : e.offsetHeight,
                    c = o.top,
                    d = o.left - this.context.element.wysiwyg.scrollLeft;
                i.style.top = c + "px", i.style.left = d + "px", i.style.width = a + "px", i.style.height = r + "px", l.style.top = "0px", l.style.left = "0px", l.style.width = a + "px", l.style.height = r + "px";
                var u = e.getAttribute("data-align") || "basic";
                u = "none" === u ? "basic" : u, this.util.changeTxt(n.resizeDisplay, this.lang.dialogBox[u] + " (" + a + " x " + r + ")");
                var h = this.context[t]._resizing ? "flex" : "none",
                    g = n.resizeHandles;
                n.resizeButtonGroup.style.display = h;
                for (var _e3 = 0, _t3 = g.length; _e3 < _t3; _e3++) {
                    g[_e3].style.display = h;
                }var p = n.alignMenuList;
                this.util.removeClass(n.alignButtonIcon, "se-icon-align\\-[a-z]+"), this.util.addClass(n.alignButtonIcon, "se-icon-align-" + ("basic" === u ? "justify" : u));
                for (var _e4 = 0, _t4 = p.length; _e4 < _t4; _e4++) {
                    p[_e4].getAttribute("data-value") === u ? this.util.addClass(p[_e4], "on") : this.util.removeClass(p[_e4], "on");
                }this.util.getChildElement(e.parentNode, "figcaption") ? (this.util.addClass(n.captionButton, "active"), this.context[t]._captionChecked = !0) : (this.util.removeClass(n.captionButton, "active"), this.context[t]._captionChecked = !1), this._resizingName = t, this.controllersOn(n.resizeContainer, n.resizeButton);
                var m = this.context.element.wysiwyg.offsetWidth - d - n.resizeButton.offsetWidth;
                n.resizeButton.style.top = r + c + 60 + "px", n.resizeButton.style.left = d + (m < 0 ? m : 0) + "px", n.resizeButton.firstElementChild.style.left = m < 0 ? 20 - m + "px" : "20px", n._resize_w = a, n._resize_h = r;
                var f = (e.getAttribute("origin-size") || "").split(",");
                return n._origin_w = f[0] || e.naturalWidth, n._origin_h = f[1] || e.naturalHeight, {
                    w: a,
                    h: r,
                    t: c,
                    l: d
                };
            },
            _closeAlignMenu: null,
            openAlignMenu: function openAlignMenu() {
                this.util.addClass(this.context.resizing.alignButton, "on"), this.context.resizing.alignMenu.style.display = "inline-table", this.plugins.resizing._closeAlignMenu = function () {
                    this.util.removeClass(this.context.resizing.alignButton, "on"), this.context.resizing.alignMenu.style.display = "none", this._d.removeEventListener("mousedown", this.plugins.resizing._closeAlignMenu), this.plugins.resizing._closeAlignMenu = null;
                }.bind(this), this._d.addEventListener("mousedown", this.plugins.resizing._closeAlignMenu);
            },
            create_caption: function create_caption() {
                var e = this.util.createElement("FIGCAPTION");
                return e.setAttribute("contenteditable", !0), e.innerHTML = "<div>" + this.lang.dialogBox.caption + "</div>", e;
            },
            set_cover: function set_cover(e) {
                var t = this.util.createElement("FIGURE");
                return t.appendChild(e), t;
            },
            set_container: function set_container(e, t) {
                var n = this.util.createElement("DIV");
                return n.className = "se-component " + t, n.setAttribute("contenteditable", !1), n.appendChild(e), n;
            },
            onClick_resizeButton: function onClick_resizeButton(e) {
                e.stopPropagation();
                var t = e.target,
                    n = t.getAttribute("data-command") || t.parentNode.getAttribute("data-command");
                if (!n) return;
                var i = t.getAttribute("data-value") || t.parentNode.getAttribute("data-value"),
                    l = this.context.resizing._resize_plugin,
                    o = this.context[l],
                    s = o._element,
                    a = this.plugins[l];
                if (e.preventDefault(), "function" != typeof this.plugins.resizing._closeAlignMenu || (this.plugins.resizing._closeAlignMenu(), "onalign" !== n)) {
                    switch (n) {
                        case "percent":
                            this.plugins.resizing.resetTransform.call(this, s), a.setPercentSize.call(this, 100 * i + "%", "auto"), a.onModifyMode.call(this, s, this.plugins.resizing.call_controller_resize.call(this, s, l));
                            break;
                        case "mirror":
                            var _e5 = s.getAttribute("data-rotate") || "0";
                            var _t5 = s.getAttribute("data-rotateX") || "",
                                _r = s.getAttribute("data-rotateY") || "";
                            "h" === i && !this.context.resizing._rotateVertical || "v" === i && this.context.resizing._rotateVertical ? _r = _r ? "" : "180" : _t5 = _t5 ? "" : "180", s.setAttribute("data-rotateX", _t5), s.setAttribute("data-rotateY", _r), this.plugins.resizing._setTransForm(s, _e5, _t5, _r);
                            break;
                        case "rotate":
                            var _c = this.context.resizing,
                                _d = 1 * s.getAttribute("data-rotate") + 1 * i,
                                _u = this._w.Math.abs(_d) >= 360 ? 0 : _d;
                            s.setAttribute("data-rotate", _u), _c._rotateVertical = /^(90|270)$/.test(this._w.Math.abs(_u).toString()), this.plugins.resizing.setTransformSize.call(this, s, null, null), a.onModifyMode.call(this, s, this.plugins.resizing.call_controller_resize.call(this, s, _c._resize_plugin));
                            break;
                        case "onalign":
                            this.plugins.resizing.openAlignMenu.call(this);
                            break;
                        case "align":
                            var _h = "basic" === i ? "none" : i;
                            o._cover.style.margin = _h && "none" !== _h ? "auto" : "0", this.util.removeClass(o._container, o._floatClassRegExp), this.util.addClass(o._container, "float-" + _h), s.setAttribute("data-align", _h), a.onModifyMode.call(this, s, this.plugins.resizing.call_controller_resize.call(this, s, l));
                            break;
                        case "caption":
                            var _g = !o._captionChecked;
                            if (a.openModify.call(this, !0), o._captionChecked = o.captionCheckEl.checked = _g, "image" === l ? a.update_image.call(this, !1, !1) : "video" === l && (this.context.dialog.updateModal = !0, a.submitAction.call(this)), _g) {
                                var _e6 = this.util.getChildElement(o._caption, function (e) {
                                    return 3 === e.nodeType;
                                });
                                _e6 ? this.setRange(_e6, 0, _e6, _e6.textContent.length) : o._caption.focus(), this.controllersOff();
                            } else a.onModifyMode.call(this, s, this.plugins.resizing.call_controller_resize.call(this, s, l)), a.openModify.call(this, !0);
                            break;
                        case "revert":
                            a.setAutoSize ? a.setAutoSize.call(this) : (a.resetAlign.call(this), this.plugins.resizing.resetTransform.call(this, s)), a.onModifyMode.call(this, s, this.plugins.resizing.call_controller_resize.call(this, s, l));
                            break;
                        case "update":
                            a.openModify.call(this), this.controllersOff();
                            break;
                        case "delete":
                            a.destroy.call(this);
                    }
                    this.history.push();
                }
            },
            resetTransform: function resetTransform(e) {
                var t = (e.getAttribute("data-origin") || "").split(",");
                this.context.resizing._rotateVertical = !1, e.style.transform = "", e.style.transformOrigin = "", e.setAttribute("data-rotate", ""), e.setAttribute("data-rotateX", ""), e.setAttribute("data-rotateY", ""), e.style.width = t[0] ? t[0] + "px" : "auto", e.style.height = t[1] ? t[1] + "px" : "", this.plugins.resizing.setTransformSize.call(this, e, null, null);
            },
            setTransformSize: function setTransformSize(e, t, n) {
                var i = this.util.getParentElement(e, "FIGURE"),
                    l = this.context.resizing._rotateVertical,
                    o = 1 * e.getAttribute("data-rotate"),
                    s = t || e.offsetWidth,
                    a = n || e.offsetHeight,
                    r = l ? a : s,
                    c = l ? s : a;
                this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this), this.plugins[this.context.resizing._resize_plugin].setSize.call(this, s, a), i.style.width = r + "px", i.style.height = this.context[this.context.resizing._resize_plugin]._caption ? "" : c + "px";
                var d = "";
                if (l) {
                    var _e7 = s / 2 + "px " + s / 2 + "px 0",
                        _t6 = a / 2 + "px " + a / 2 + "px 0";
                    d = 90 === o || -270 === o ? _t6 : _e7;
                }
                e.style.transformOrigin = d, this.plugins.resizing._setTransForm(e, o.toString(), e.getAttribute("data-rotateX") || "", e.getAttribute("data-rotateY") || ""), this.plugins.resizing._setCaptionPosition.call(this, e, this.util.getChildElement(this.util.getParentElement(e, "FIGURE"), "FIGCAPTION"));
            },
            _setTransForm: function _setTransForm(e, t, n, i) {
                var l = (e.offsetWidth - e.offsetHeight) * (/-/.test(t) ? 1 : -1),
                    o = "";
                if (/[1-9]/.test(t) && (n || i)) switch (o = n ? "Y" : "X", t) {
                    case "90":
                        o = n && i ? "X" : i ? o : "";
                        break;
                    case "270":
                        l *= -1, o = n && i ? "Y" : n ? o : "";
                        break;
                    case "-90":
                        o = n && i ? "Y" : n ? o : "";
                        break;
                    case "-270":
                        l *= -1, o = n && i ? "X" : i ? o : "";
                        break;
                    default:
                        o = "";
                }
                t % 180 == 0 && (e.style.maxWidth = "100%"), e.style.transform = "rotate(" + t + "deg)" + (n ? " rotateX(" + n + "deg)" : "") + (i ? " rotateY(" + i + "deg)" : "") + (o ? " translate" + o + "(" + l + "px)" : "");
            },
            _setCaptionPosition: function _setCaptionPosition(e, t) {
                t && (t.style.marginTop = (this.context.resizing._rotateVertical ? e.offsetWidth - e.offsetHeight : 0) + "px");
            },
            onMouseDown_resize_handle: function onMouseDown_resize_handle(e) {
                var t = this.context.resizing,
                    n = t._resize_direction = e.target.classList[0];
                e.stopPropagation(), e.preventDefault(), t._resizeClientX = e.clientX, t._resizeClientY = e.clientY, this.context.element.resizeBackground.style.display = "block", t.resizeButton.style.display = "none", t.resizeDiv.style.float = /l/.test(n) ? "right" : /r/.test(n) ? "left" : "none";
                var i = function () {
                    var e = t._isChange;
                    t._isChange = !1, document.removeEventListener("mousemove", l), document.removeEventListener("mouseup", i), this.plugins.resizing.cancel_controller_resize.call(this), e && this.history.push();
                }.bind(this),
                    l = this.plugins.resizing.resizing_element.bind(this, t, n, this.context[t._resize_plugin]);
                document.addEventListener("mousemove", l), document.addEventListener("mouseup", i);
            },
            resizing_element: function resizing_element(e, t, n, i) {
                var l = i.clientX,
                    o = i.clientY;
                var s = n._element_w,
                    a = n._element_h;
                var r = n._element_w + (/r/.test(t) ? l - e._resizeClientX : e._resizeClientX - l),
                    c = n._element_h + (/b/.test(t) ? o - e._resizeClientY : e._resizeClientY - o),
                    d = n._element_h / n._element_w * r;
                /t/.test(t) && (e.resizeDiv.style.top = n._element_h - (/h/.test(t) ? c : d) + "px"), /l/.test(t) && (e.resizeDiv.style.left = n._element_w - r + "px"), /r|l/.test(t) && (e.resizeDiv.style.width = r + "px", s = r), /^(t|b)[^h]$/.test(t) ? (e.resizeDiv.style.height = d + "px", a = d) : /^(t|b)h$/.test(t) && (e.resizeDiv.style.height = c + "px", a = c), e._resize_w = s, e._resize_h = a, this.util.changeTxt(e.resizeDisplay, this._w.Math.round(s) + " x " + this._w.Math.round(a)), e._isChange = !0;
            },
            cancel_controller_resize: function cancel_controller_resize() {
                var e = this.context.resizing._rotateVertical;
                this.controllersOff(), this.context.element.resizeBackground.style.display = "none";
                var t = this._w.Math.round(e ? this.context.resizing._resize_h : this.context.resizing._resize_w),
                    n = this._w.Math.round(e ? this.context.resizing._resize_w : this.context.resizing._resize_h);
                if (!e && !/^\d+%$/.test(t)) {
                    var _e8 = 16,
                        _i2 = this.context.element.wysiwyg.clientWidth - 2 * _e8 - 2;
                    t.toString().match(/\d+/)[0] > _i2 && (t = _i2, n = "video" === this.context.resizing._resize_plugin ? n / t * _i2 : "auto");
                }
                this.plugins[this.context.resizing._resize_plugin].setSize.call(this, t, n), this.plugins.resizing.setTransformSize.call(this, this.context[this.context.resizing._resize_plugin]._element, t, n), this.plugins[this.context.resizing._resize_plugin].init.call(this);
            }
        },
            s = {
            name: "notice",
            add: function add(e) {
                var t = e.context;
                t.notice = {};
                var n = e.util.createElement("DIV"),
                    i = e.util.createElement("SPAN"),
                    l = e.util.createElement("BUTTON");
                n.className = "se-notice", l.className = "close", l.setAttribute("aria-label", "Close"), l.setAttribute("title", e.lang.dialogBox.close), l.innerHTML = '<i aria-hidden="true" data-command="close" class="se-icon-cancel"></i>', n.appendChild(i), n.appendChild(l), t.notice.modal = n, t.notice.message = i, l.addEventListener("click", this.onClick_cancel.bind(e)), t.element.editorArea.insertBefore(n, t.element.wysiwyg), n = null;
            },
            onClick_cancel: function onClick_cancel(e) {
                e.preventDefault(), e.stopPropagation(), this.plugins.notice.close.call(this);
            },
            open: function open(e) {
                this.context.notice.message.textContent = e, this.context.notice.modal.style.display = "block";
            },
            close: function close() {
                this.context.notice.modal.style.display = "none";
            }
        },
            a = {
            align: {
                name: "align",
                add: function add(e, t) {
                    var n = e.context;
                    n.align = {
                        _alignList: null,
                        currentAlign: ""
                    };
                    var i = this.setSubmenu.call(e),
                        l = i.querySelector("ul");
                    l.addEventListener("click", this.pickup.bind(e)), n.align._alignList = l.querySelectorAll("li button"), t.parentNode.appendChild(i), i = null, l = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-list-layer", t.innerHTML = '<div class="se-submenu se-list-inner se-list-align">   <ul class="se-list-basic">       <li><button type="button" class="se-btn-list se-btn-align" data-command="justifyleft" data-value="left" title="' + e.toolbar.alignLeft + '"><span class="se-icon-align-left"></span>' + e.toolbar.alignLeft + '</button></li>       <li><button type="button" class="se-btn-list se-btn-align" data-command="justifycenter" data-value="center" title="' + e.toolbar.alignCenter + '"><span class="se-icon-align-center"></span>' + e.toolbar.alignCenter + '</button></li>       <li><button type="button" class="se-btn-list se-btn-align" data-command="justifyright" data-value="right" title="' + e.toolbar.alignRight + '"><span class="se-icon-align-right"></span>' + e.toolbar.alignRight + '</button></li>       <li><button type="button" class="se-btn-list se-btn-align" data-command="justifyfull" data-value="justify" title="' + e.toolbar.alignJustify + '"><span class="se-icon-align-justify"></span>' + e.toolbar.alignJustify + "</button></li>   </ul></div>", t;
                },
                on: function on() {
                    var e = this.context.align,
                        t = e._alignList,
                        n = this.commandMap.ALIGN.getAttribute("data-focus") || "left";
                    if (n !== e.currentAlign) {
                        for (var _e9 = 0, _i3 = t.length; _e9 < _i3; _e9++) {
                            n === t[_e9].getAttribute("data-value") ? this.util.addClass(t[_e9], "active") : this.util.removeClass(t[_e9], "active");
                        }e.currentAlign = n;
                    }
                },
                pickup: function pickup(e) {
                    e.preventDefault(), e.stopPropagation();
                    var t = e.target,
                        n = null;
                    for (; !n && !/UL/i.test(t.tagName);) {
                        n = t.getAttribute("data-command"), t = t.parentNode;
                    }n && (this.execCommand(n, !1, null), this.submenuOff());
                }
            },
            font: {
                name: "font",
                add: function add(e, t) {
                    var n = e.context;
                    n.font = {
                        _fontList: null,
                        currentFont: ""
                    };
                    var i = this.setSubmenu.call(e);
                    i.querySelector(".se-list-font-family").addEventListener("click", this.pickup.bind(e)), n.font._fontList = i.querySelectorAll("ul li button"), t.parentNode.appendChild(i), i = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.option,
                        t = this.lang,
                        n = this.util.createElement("DIV");
                    var i = void 0,
                        l = void 0,
                        o = void 0,
                        s = void 0;
                    n.className = "se-list-layer";
                    var a = e.font ? e.font : ["Arial", "Comic Sans MS", "Courier New", "Impact", "Georgia", "tahoma", "Trebuchet MS", "Verdana"],
                        r = '<div class="se-submenu se-list-inner se-list-font-family">   <ul class="se-list-basic">       <li><button type="button" class="default_value se-btn-list" title="' + t.toolbar.default + '">(' + t.toolbar.default + ")</button></li>";
                    for (o = 0, s = a.length; o < s; o++) {
                        l = (i = a[o]).split(",")[0], r += '<li><button type="button" class="se-btn-list" data-value="' + i + '" data-txt="' + l + '" title="' + l + '" style="font-family:' + i + ';">' + l + "</button></li>";
                    }return r += "   </ul>", r += "</div>", n.innerHTML = r, n;
                },
                on: function on() {
                    var e = this.context.font,
                        t = e._fontList,
                        n = this.commandMap.FONT.textContent;
                    if (n !== e.currentFont) {
                        for (var _e10 = 0, _i4 = t.length; _e10 < _i4; _e10++) {
                            n === t[_e10].getAttribute("data-value") ? this.util.addClass(t[_e10], "active") : this.util.removeClass(t[_e10], "active");
                        }e.currentFont = n;
                    }
                },
                pickup: function pickup(e) {
                    if (!/^BUTTON$/i.test(e.target.tagName)) return !1;
                    e.preventDefault(), e.stopPropagation();
                    var t = e.target.getAttribute("data-value");
                    if (t) {
                        var _e11 = this.util.createElement("SPAN");
                        _e11.style.fontFamily = t, this.nodeChange(_e11, ["font-family"]);
                    } else this.nodeChange(null, ["font-family"]);
                    this.submenuOff();
                }
            },
            fontSize: {
                name: "fontSize",
                add: function add(e, t) {
                    var n = e.context;
                    n.fontSize = {
                        _sizeList: null,
                        currentSize: ""
                    };
                    var i = this.setSubmenu.call(e),
                        l = i.querySelector("ul");
                    l.addEventListener("click", this.pickup.bind(e)), n.fontSize._sizeList = l.querySelectorAll("li button"), t.parentNode.appendChild(i), i = null, l = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.option,
                        t = this.lang,
                        n = this.util.createElement("DIV");
                    n.className = "se-submenu se-list-layer";
                    var i = e.fontSize ? e.fontSize : [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];
                    var l = '<div class="se-list-inner se-list-font-size">   <ul class="se-list-basic">       <li><button type="button" class="default_value se-btn-list" title="' + t.toolbar.default + '">(' + t.toolbar.default + ")</button></li>";
                    for (var _e12 = 0, _t7 = i.length; _e12 < _t7; _e12++) {
                        var _t8 = i[_e12];
                        l += '<li><button type="button" class="se-btn-list" data-value="' + _t8 + '" title="' + _t8 + '" style="font-size:' + _t8 + 'px;">' + _t8 + "</button></li>";
                    }
                    return l += "   </ul></div>", n.innerHTML = l, n;
                },
                on: function on() {
                    var e = this.context.fontSize,
                        t = e._sizeList,
                        n = (this.commandMap.SIZE.textContent.match(/\d+/) || [""])[0];
                    if (n !== e.currentSize) {
                        for (var _e13 = 0, _i5 = t.length; _e13 < _i5; _e13++) {
                            n === t[_e13].getAttribute("data-value") ? this.util.addClass(t[_e13], "active") : this.util.removeClass(t[_e13], "active");
                        }e.currentSize = n;
                    }
                },
                pickup: function pickup(e) {
                    if (!/^BUTTON$/i.test(e.target.tagName)) return !1;
                    e.preventDefault(), e.stopPropagation();
                    var t = e.target.getAttribute("data-value");
                    if (t) {
                        var _e14 = this.util.createElement("SPAN");
                        _e14.style.fontSize = t + "px", this.nodeChange(_e14, ["font-size"]);
                    } else this.nodeChange(null, ["font-size"]);
                    this.submenuOff();
                }
            },
            fontColor: {
                name: "fontColor",
                add: function add(e, t) {
                    e.addModule([i]);
                    var n = e.context;
                    n.fontColor = {
                        previewEl: null,
                        colorInput: null,
                        colorList: null
                    };
                    var l = this.setSubmenu.call(e);
                    n.fontColor.colorInput = l.querySelector("._se_color_picker_input"), n.fontColor.colorInput.addEventListener("keyup", this.onChangeInput.bind(e)), l.querySelector("._se_color_picker_submit").addEventListener("click", this.submit.bind(e)), l.querySelector("._se_color_picker_remove").addEventListener("click", this.remove.bind(e)), l.addEventListener("click", this.pickup.bind(e)), n.fontColor.colorList = l.querySelectorAll("li button"), t.parentNode.appendChild(l), l = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.colorPicker.colorListHTML,
                        t = this.util.createElement("DIV");
                    return t.className = "se-submenu se-list-layer", t.innerHTML = e, t;
                },
                on: function on() {
                    var e = this.context.colorPicker,
                        t = this.context.fontColor;
                    e._colorInput = t.colorInput, e._defaultColor = "#333333", e._styleProperty = "color", e._colorList = t.colorList, this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);
                },
                onChangeInput: function onChangeInput(e) {
                    this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);
                },
                remove: function remove() {
                    this.nodeChange(null, ["color"]), this.submenuOff(), this.focus();
                },
                submit: function submit() {
                    this.plugins.fontColor.applyColor.call(this, this.context.colorPicker._currentColor);
                },
                pickup: function pickup(e) {
                    e.preventDefault(), e.stopPropagation(), this.plugins.fontColor.applyColor.call(this, e.target.getAttribute("data-value"));
                },
                applyColor: function applyColor(e) {
                    if (!e) return;
                    var t = this.util.createElement("SPAN");
                    t.style.color = e, this.nodeChange(t, ["color"]), this.submenuOff();
                }
            },
            hiliteColor: {
                name: "hiliteColor",
                add: function add(e, t) {
                    e.addModule([i]);
                    var n = e.context;
                    n.hiliteColor = {
                        previewEl: null,
                        colorInput: null,
                        colorList: null
                    };
                    var l = this.setSubmenu.call(e);
                    n.hiliteColor.colorInput = l.querySelector("._se_color_picker_input"), n.hiliteColor.colorInput.addEventListener("keyup", this.onChangeInput.bind(e)), l.querySelector("._se_color_picker_submit").addEventListener("click", this.submit.bind(e)), l.querySelector("._se_color_picker_remove").addEventListener("click", this.remove.bind(e)), l.addEventListener("click", this.pickup.bind(e)), n.hiliteColor.colorList = l.querySelectorAll("li button"), t.parentNode.appendChild(l), l = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.colorPicker.colorListHTML,
                        t = this.util.createElement("DIV");
                    return t.className = "se-submenu se-list-layer", t.innerHTML = e, t;
                },
                on: function on() {
                    var e = this.context.colorPicker,
                        t = this.context.hiliteColor;
                    e._colorInput = t.colorInput, e._defaultColor = "#FFFFFF", e._styleProperty = "backgroundColor", e._colorList = t.colorList, this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);
                },
                onChangeInput: function onChangeInput(e) {
                    this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);
                },
                remove: function remove() {
                    this.nodeChange(null, ["background-color"]), this.submenuOff(), this.focus();
                },
                submit: function submit() {
                    this.plugins.hiliteColor.applyColor.call(this, this.context.colorPicker._currentColor);
                },
                pickup: function pickup(e) {
                    e.preventDefault(), e.stopPropagation(), this.plugins.hiliteColor.applyColor.call(this, e.target.getAttribute("data-value"));
                },
                applyColor: function applyColor(e) {
                    if (!e) return;
                    var t = this.util.createElement("SPAN");
                    t.style.backgroundColor = e, this.nodeChange(t, ["background-color"]), this.submenuOff();
                }
            },
            horizontalRule: {
                name: "horizontalRule",
                add: function add(e, t) {
                    var n = this.setSubmenu.call(e);
                    n.querySelector("ul").addEventListener("click", this.horizontalRulePick.bind(e)), t.parentNode.appendChild(n), n = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-submenu se-list-layer", t.innerHTML = '<div class="se-list-inner se-list-line">   <ul class="se-list-basic">       <li>           <button type="button" class="se-btn-list btn_line se-tooltip" data-command="horizontalRule" data-value="solid">               <hr style="border-width: 1px 0 0; border-style: solid none none; border-color: black; border-image: initial; height: 1px;" />               <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.hr_solid + '</span></span>           </button>       </li>       <li>           <button type="button" class="se-btn-list btn_line se-tooltip" data-command="horizontalRule" data-value="dotted">               <hr style="border-width: 1px 0 0; border-style: dotted none none; border-color: black; border-image: initial; height: 1px;" />               <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.hr_dotted + '</span></span>           </button>       </li>       <li>           <button type="button" class="se-btn-list btn_line se-tooltip" data-command="horizontalRule" data-value="dashed">               <hr style="border-width: 1px 0 0; border-style: dashed none none; border-color: black; border-image: initial; height: 1px;" />               <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.hr_dashed + "</span></span>           </button>       </li>   </ul></div>", t;
                },
                appendHr: function appendHr(e) {
                    var t = this.util.createElement("HR");
                    t.className = e, this.focus();
                    var n = this.insertComponent(t);
                    this.setRange(n, 0, n, 0);
                },
                horizontalRulePick: function horizontalRulePick(e) {
                    e.preventDefault(), e.stopPropagation();
                    var t = e.target,
                        n = null;
                    for (; !n && !/UL/i.test(t.tagName);) {
                        n = t.getAttribute("data-value"), t = t.parentNode;
                    }n && (this.plugins.horizontalRule.appendHr.call(this, n), this.submenuOff());
                }
            },
            list: {
                name: "list",
                add: function add(e, t) {
                    var n = e.context;
                    n.list = {
                        _list: null,
                        currentList: ""
                    };
                    var i = this.setSubmenu.call(e),
                        l = i.querySelector("ul");
                    l.addEventListener("click", this.pickup.bind(e)), n.list._list = l.querySelectorAll("li button"), t.parentNode.appendChild(i), i = null, l = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-submenu se-list-layer", t.innerHTML = '<div class="se-list-inner">   <ul class="se-list-basic">       <li><button type="button" class="se-btn-list se-tooltip" data-command="OL">           <i class="se-icon-list-number"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.orderList + '</span></span>       </button></li>       <li><button type="button" class="se-btn-list se-tooltip" data-command="UL">           <i class="se-icon-list-bullets"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.toolbar.unorderList + "</span></span>       </button></li>   </ul></div>", t;
                },
                on: function on() {
                    var e = this.context.list,
                        t = e._list,
                        n = this.commandMap.LI.getAttribute("data-focus") || "";
                    if (n !== e.currentList) {
                        for (var _e15 = 0, _i6 = t.length; _e15 < _i6; _e15++) {
                            n === t[_e15].getAttribute("data-command") ? this.util.addClass(t[_e15], "active") : this.util.removeClass(t[_e15], "active");
                        }e.currentList = n;
                    }
                },
                pickup: function pickup(e) {
                    var _this = this;

                    e.preventDefault(), e.stopPropagation();
                    var t = e.target,
                        n = "";
                    for (; !n && !/^UL$/i.test(t.tagName);) {
                        n = t.getAttribute("data-command"), t = t.parentNode;
                    }if (!n) return;
                    var i = this.getSelectedElementsAndComponents();
                    if (!i || 0 === i.length) return;
                    var l = !0,
                        o = null,
                        s = null;
                    var a = i[0],
                        r = i[i.length - 1];
                    var c = !this.util.isListCell(a) && !this.util.isComponent(a) || a.previousElementSibling ? a.previousElementSibling : a.parentNode.previousElementSibling,
                        d = !this.util.isListCell(r) && !this.util.isComponent(r) || r.nextElementSibling ? r.nextElementSibling : r.parentNode.nextElementSibling;

                    var _loop = function _loop(_e16, _t9) {
                        if (!_this.util.isList(_this.util.getRangeFormatElement(i[_e16], function (t) {
                            return this.getRangeFormatElement(t) && t !== i[_e16];
                        }.bind(_this.util)))) {
                            l = !1;
                            return "break";
                        }
                    };

                    for (var _e16 = 0, _t9 = i.length; _e16 < _t9; _e16++) {
                        var _ret = _loop(_e16, _t9);

                        if (_ret === "break") break;
                    }if (!l || c && n === c.tagName || d && n === d.tagName) {
                        var _e17 = c ? c.parentNode : c,
                            _t10 = d ? d.parentNode : d;
                        c = _e17 && !this.util.isWysiwygDiv(_e17) && _e17.nodeName === n ? _e17 : c, d = _t10 && !this.util.isWysiwygDiv(_t10) && _t10.nodeName === n ? _t10 : d;
                        var _l2 = c && c.tagName === n,
                            _a = d && d.tagName === n;
                        var _r2 = _l2 ? c : this.util.createElement(n),
                            _u2 = null,
                            _h2 = null,
                            _g2 = null,
                            _p = null;
                        var _m = function (e) {
                            return !this.isComponent(e) && !this.isList(e);
                        }.bind(this.util);
                        for (var _e18, _t11, _o, _s, _a2, _c2, _d2, _p2, f, _ = 0, b = i.length; _ < b; _++) {
                            if (0 !== (_t11 = i[_]).childNodes.length || this.util.isIgnoreNodeChange(_t11)) {
                                if (_s = i[_ + 1], _a2 = _t11.parentNode, _c2 = _s ? _s.parentNode : null, _o = this.util.isListCell(_t11), f = this.util.isRangeFormatElement(_a2) ? _a2 : null, _d2 = _o && !this.util.isWysiwygDiv(_a2) ? _a2.parentNode : _a2, _p2 = _o && !this.util.isWysiwygDiv(_a2) ? _s ? _a2.nextSibling : _a2 : _t11.nextSibling, _e18 = this.util.createElement("LI"), this.util.isComponent(_t11)) {
                                    var _n2 = /^HR$/i.test(_t11.nodeName);
                                    _n2 || (_e18.innerHTML = "<br>"), _e18.innerHTML += _t11.outerHTML, _n2 && (_e18.innerHTML += "<br>");
                                } else _e18.innerHTML = _t11.innerHTML;
                                _r2.appendChild(_e18), _s || (_h2 = _r2), _s && _d2 === _c2 && !this.util.isRangeFormatElement(_p2) || (_u2 || (_u2 = _r2), _l2 && _s && _d2 === _c2 || _s && this.util.isList(_c2) && _c2 === _a2 || _r2.parentNode !== _d2 && _d2.insertBefore(_r2, _p2)), this.util.removeItem(_t11), _l2 && null === _g2 && (_g2 = _r2.children.length - 1), _s && this.util.getRangeFormatElement(_c2, _m) !== this.util.getRangeFormatElement(_a2, _m) && (_r2 = this.util.createElement(n)), f && 0 === f.children.length && this.util.removeItem(f);
                            } else this.util.removeItem(_t11);
                        }_g2 && (_u2 = _u2.children[_g2]), _a && (_p = _r2.children.length - 1, _r2.innerHTML += d.innerHTML, _h2 = _r2.children[_p], this.util.removeItem(d)), o = s = this.util.getEdgeChildNodes(_u2.firstChild, _h2.lastChild);
                    } else {
                        var _e19 = this.util.getRangeFormatElement(this.getSelectionNode()),
                            _t12 = _e19 && _e19.tagName === n;
                        var _l3 = void 0,
                            _a3 = void 0;
                        var _r3 = function (e) {
                            return !this.isComponent(e);
                        }.bind(this.util);
                        _t12 || (_a3 = this.util.createElement(n));
                        for (var _e20, _c3, _d3 = 0, _u3 = i.length; _d3 < _u3; _d3++) {
                            if ((_c3 = this.util.getRangeFormatElement(i[_d3], _r3)) && this.util.isList(_c3)) {
                                if (_e20) {
                                    if (_e20 !== _c3) {
                                        var _s2 = this.detachRangeFormatElement(_l3.r, _l3.f, _a3, !1, !0);
                                        o || (o = _s2), _t12 || (_a3 = this.util.createElement(n)), _l3 = {
                                            r: _e20 = _c3,
                                            f: [this.util.getParentElement(i[_d3], "LI")]
                                        };
                                    } else _l3.f.push(this.util.getParentElement(i[_d3], "LI"));
                                } else _l3 = {
                                    r: _e20 = _c3,
                                    f: [this.util.getParentElement(i[_d3], "LI")]
                                };
                                _d3 === _u3 - 1 && (s = this.detachRangeFormatElement(_l3.r, _l3.f, _a3, !1, !0), o || (o = s));
                            }
                        }
                    }
                    this.history.push(), i.length > 1 ? this.setRange(o.sc, 0, s.ec, s.ec.textContent.length) : this.setRange(o.ec, o.ec.textContent.length, s.ec, s.ec.textContent.length), this.submenuOff();
                }
            },
            table: {
                name: "table",
                add: function add(e, t) {
                    var n = e.context;
                    n.table = {
                        _element: null,
                        _tdElement: null,
                        _trElement: null,
                        _trElements: null,
                        _tableXY: [],
                        _maxWidth: !0,
                        resizeIcon: null,
                        resizeText: null,
                        headerButton: null,
                        mergeButton: null,
                        splitButton: null,
                        splitMenu: null,
                        maxText: e.lang.controller.maxSize,
                        minText: e.lang.controller.minSize,
                        _physical_cellCnt: 0,
                        _logical_cellCnt: 0,
                        _rowCnt: 0,
                        _rowIndex: 0,
                        _physical_cellIndex: 0,
                        _logical_cellIndex: 0,
                        _current_colSpan: 0,
                        _current_rowSpan: 0
                    };
                    var i = this.setSubmenu.call(e),
                        l = i.querySelector(".se-controller-table-picker");
                    n.table.tableHighlight = i.querySelector(".se-table-size-highlighted"), n.table.tableUnHighlight = i.querySelector(".se-table-size-unhighlighted"), n.table.tableDisplay = i.querySelector(".se-table-size-display");
                    var o = this.setController_table.call(e);
                    n.table.tableController = o, n.table.resizeIcon = o.querySelector("._se_table_resize > i"), n.table.resizeText = o.querySelector("._se_table_resize > span > span"), n.table.headerButton = o.querySelector("._se_table_header"), o.addEventListener("mousedown", function (e) {
                        e.stopPropagation();
                    }, !1);
                    var s = this.setController_tableEditor.call(e);
                    n.table.resizeDiv = s, n.table.splitMenu = s.querySelector(".se-btn-group-sub"), n.table.mergeButton = s.querySelector("._se_table_merge_button"), n.table.splitButton = s.querySelector("._se_table_split_button"), s.addEventListener("mousedown", function (e) {
                        e.stopPropagation();
                    }, !1), l.addEventListener("mousemove", this.onMouseMove_tablePicker.bind(e)), l.addEventListener("click", this.appendTable.bind(e)), s.addEventListener("click", this.onClick_tableController.bind(e)), o.addEventListener("click", this.onClick_tableController.bind(e)), t.parentNode.appendChild(i), n.element.relative.appendChild(s), n.element.relative.appendChild(o), i = null, l = null, s = null, o = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.util.createElement("DIV");
                    return e.className = "se-submenu se-selector-table", e.innerHTML = '<div class="se-table-size">   <div class="se-table-size-picker se-controller-table-picker"></div>   <div class="se-table-size-highlighted"></div>   <div class="se-table-size-unhighlighted"></div></div><div class="se-table-size-display">1 x 1</div>', e;
                },
                setController_table: function setController_table() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-controller se-controller-table", t.innerHTML = '<div>   <div class="se-btn-group">       <button type="button" data-command="resize" class="se-tooltip _se_table_resize">           <i class="se-icon-expansion"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.maxSize + '</span></span>       </button>       <button type="button" data-command="header" class="se-tooltip _se_table_header">           <i class="se-icon-table-header"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.tableHeader + '</span></span>       </button>       <button type="button" data-command="remove" class="se-tooltip">           <i class="se-icon-delete"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.remove + "</span></span>       </button>   </div></div>", t;
                },
                setController_tableEditor: function setController_tableEditor() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-controller se-controller-table-cell", t.innerHTML = '<div class="se-arrow se-arrow-up"></div><div>   <div class="se-btn-group">       <button type="button" data-command="insert" data-value="row" data-option="up" class="se-tooltip">           <i class="se-icon-insert-row-above"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.insertRowAbove + '</span></span>       </button>       <button type="button" data-command="insert" data-value="row" data-option="down" class="se-tooltip">           <i class="se-icon-insert-row-below"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.insertRowBelow + '</span></span>       </button>       <button type="button" data-command="delete" data-value="row" class="se-tooltip">           <i class="se-icon-delete-row"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.deleteRow + '</span></span>       </button>       <button type="button" data-command="merge" class="_se_table_merge_button se-tooltip" disabled>           <i class="se-icon-merge-cell"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.mergeCells + '</span></span>       </button>   </div></div><div>   <div class="se-btn-group">     <button type="button" data-command="insert" data-value="cell" data-option="left" class="se-tooltip">       <i class="se-icon-insert-column-left"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.insertColumnBefore + '</span></span>       </button>       <button type="button" data-command="insert" data-value="cell" data-option="right" class="se-tooltip">           <i class="se-icon-insert-column-right"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.insertColumnAfter + '</span></span>       </button>       <button type="button" data-command="delete" data-value="cell" class="se-tooltip">           <i class="se-icon-delete-column"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.deleteColumn + '</span></span>       </button>       <button type="button" data-command="onsplit" class="_se_table_split_button se-tooltip">           <i class="se-icon-split-cell"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.splitCells + '</span></span>       </button>       <div class="se-btn-group-sub sun-editor-common se-list-layer">           <div class="se-list-inner">               <ul class="se-list-basic">                   <li class="se-btn-list" data-command="split" data-value="vertical" style="line-height:32px;" title="' + e.controller.VerticalSplit + '">                   ' + e.controller.VerticalSplit + '</li>                   <li class="se-btn-list" data-command="split" data-value="horizontal" style="line-height:32px;" title="' + e.controller.HorizontalSplit + '">                   ' + e.controller.HorizontalSplit + "</li>               </ul>           </div>       </div>   </div></div>", t;
                },
                appendTable: function appendTable() {
                    var e = this.util.createElement("TABLE"),
                        t = this.plugins.table.createCells,
                        n = this.context.table._tableXY[0];
                    e.classList.add("htmleditor-table");
                    var i = this.context.table._tableXY[1],
                        l = "<tbody>";
                    for (; i > 0;) {
                        l += "<tr>" + t.call(this, "td", n) + "</tr>", --i;
                    }l += "</tbody>", e.innerHTML = l, this.insertComponent(e), this.focus(), this.plugins.table.reset_table_picker.call(this);
                },
                createCells: function createCells(e, t, n) {
                    if (e = e.toLowerCase(), n) {
                        var _t13 = this.util.createElement(e);
                        return _t13.innerHTML = "<br>", _t13;
                    }{
                        var _n3 = "";
                        for (; t > 0;) {
                            _n3 += "<" + e + "><br></" + e + ">", t--;
                        }return _n3;
                    }
                },
                onMouseMove_tablePicker: function onMouseMove_tablePicker(e) {
                    e.stopPropagation();
                    var t = this._w.Math.ceil(e.offsetX / 18),
                        n = this._w.Math.ceil(e.offsetY / 18);
                    t = t < 1 ? 1 : t, n = n < 1 ? 1 : n, this.context.table.tableHighlight.style.width = t + "em", this.context.table.tableHighlight.style.height = n + "em";
                    var i = t < 5 ? 5 : t > 9 ? 10 : t + 1,
                        l = n < 5 ? 5 : n > 9 ? 10 : n + 1;
                    this.context.table.tableUnHighlight.style.width = i + "em", this.context.table.tableUnHighlight.style.height = l + "em", this.util.changeTxt(this.context.table.tableDisplay, t + " x " + n), this.context.table._tableXY = [t, n];
                },
                reset_table_picker: function reset_table_picker() {
                    if (!this.context.table.tableHighlight) return;
                    var e = this.context.table.tableHighlight.style,
                        t = this.context.table.tableUnHighlight.style;
                    e.width = "1em", e.height = "1em", t.width = "5em", t.height = "5em", this.util.changeTxt(this.context.table.tableDisplay, "1 x 1"), this.submenuOff();
                },
                init: function init() {
                    var e = this.context.table,
                        t = this.plugins.table;
                    if (t._removeEvents.call(this), t._selectedTable) {
                        var _e21 = t._selectedTable.querySelectorAll(".se-table-selected-cell");
                        for (var _t14 = 0, _n4 = _e21.length; _t14 < _n4; _t14++) {
                            this.util.removeClass(_e21[_t14], "se-table-selected-cell");
                        }
                    }
                    t._toggleEditor.call(this, !0), e._element = null, e._tdElement = null, e._trElement = null, e._trElements = null, e._tableXY = [], e._maxWidth = !0, e._physical_cellCnt = 0, e._logical_cellCnt = 0, e._rowCnt = 0, e._rowIndex = 0, e._physical_cellIndex = 0, e._logical_cellIndex = 0, e._current_colSpan = 0, e._current_rowSpan = 0, t._shift = !1, t._selectedCells = null, t._selectedTable = null, t._ref = null, t._fixedCell = null, t._selectedCell = null, t._fixedCellName = null;
                },
                call_controller_tableEdit: function call_controller_tableEdit(e) {
                    var t = this.context.table,
                        n = this.plugins.table,
                        i = t.tableController;
                    n.setPositionControllerDiv.call(this, e, n._shift);
                    var l = t._element,
                        o = this.util.getOffset(l);
                    t._maxWidth = !l.style.width || "100%" === l.style.width, n.resizeTable.call(this), i.style.left = o.left + "px", i.style.display = "block", i.style.top = o.top - i.offsetHeight - 2 + "px", n._shift || this.controllersOn(t.resizeDiv, i, n.init.bind(this));
                },
                setPositionControllerDiv: function setPositionControllerDiv(e, t) {
                    var n = this.context.table.resizeDiv;
                    this.plugins.table.setCellInfo.call(this, e, t), n.style.display = "block";
                    var i = this.util.getOffset(e);
                    n.style.left = i.left - this.context.element.wysiwyg.scrollLeft + "px", n.style.top = i.top + e.offsetHeight + 12 + "px";
                    var l = this.context.element.wysiwyg.offsetWidth - (n.offsetLeft + n.offsetWidth);
                    l < 0 ? (n.style.left = n.offsetLeft + l + "px", n.firstElementChild.style.left = 20 - l + "px") : n.firstElementChild.style.left = "20px";
                },
                setCellInfo: function setCellInfo(e, t) {
                    var n = this.context.table,
                        i = n._element = this.plugins.table._selectedTable || this.util.getParentElement(e, "TABLE");
                    if (/THEAD/i.test(i.firstElementChild.nodeName) ? this.util.addClass(n.headerButton, "active") : this.util.removeClass(n.headerButton, "active"), t || 0 === n._physical_cellCnt) {
                        n._tdElement !== e && (n._tdElement = e, n._trElement = e.parentNode);
                        var _t15 = n._trElements = i.rows,
                            _l4 = e.cellIndex;
                        var _o2 = 0;
                        for (var _e22 = 0, _n5 = _t15[0].cells, _i7 = _t15[0].cells.length; _e22 < _i7; _e22++) {
                            _o2 += _n5[_e22].colSpan;
                        }var _s3 = n._rowIndex = n._trElement.rowIndex;
                        n._rowCnt = _t15.length, n._physical_cellCnt = n._trElement.cells.length, n._logical_cellCnt = _o2, n._physical_cellIndex = _l4, n._current_colSpan = n._tdElement.colSpan - 1, n._current_rowSpan, n._trElement.cells[_l4].rowSpan;
                        var _a4 = [],
                            _r4 = [];
                        for (var _e23, _i8, _o3 = 0; _o3 <= _s3; _o3++) {
                            _e23 = _t15[_o3].cells, _i8 = 0;
                            for (var _t16, _c4, _d4, _u4, _h3 = 0, _g3 = _e23.length; _h3 < _g3; _h3++) {
                                if (_c4 = (_t16 = _e23[_h3]).colSpan - 1, _d4 = _t16.rowSpan - 1, _u4 = _h3 + _i8, _r4.length > 0) for (var _e24, _t17 = 0; _t17 < _r4.length; _t17++) {
                                    (_e24 = _r4[_t17]).row > _o3 || (_u4 >= _e24.index ? (_i8 += _e24.cs, _u4 += _e24.cs, _e24.rs -= 1, _e24.row = _o3 + 1, _e24.rs < 1 && (_r4.splice(_t17, 1), _t17--)) : _h3 === _g3 - 1 && (_e24.rs -= 1, _e24.row = _o3 + 1, _e24.rs < 1 && (_r4.splice(_t17, 1), _t17--)));
                                }if (_o3 === _s3 && _h3 === _l4) {
                                    n._logical_cellIndex = _u4;
                                    break;
                                }
                                _d4 > 0 && _a4.push({
                                    index: _u4,
                                    cs: _c4 + 1,
                                    rs: _d4,
                                    row: -1
                                }), _i8 += _c4;
                            }
                            _r4 = _r4.concat(_a4).sort(function (e, t) {
                                return e.index - t.index;
                            }), _a4 = [];
                        }
                        _a4 = null, _r4 = null;
                    }
                },
                editTable: function editTable(e, t) {
                    var n = this.plugins.table,
                        i = this.context.table,
                        l = i._element,
                        o = "row" === e;
                    if (o) {
                        var _e25 = i._trElement.parentNode;
                        if (/^THEAD$/i.test(_e25.nodeName)) {
                            if ("up" === t) return;
                            if (!_e25.nextElementSibling || !/^TBODY$/i.test(_e25.nextElementSibling.nodeName)) return void (l.innerHTML += "<tbody><tr>" + n.createCells.call(this, "td", i._logical_cellCnt, !1) + "</tr></tbody>");
                        }
                    }
                    if (n._ref) {
                        var _e26 = i._tdElement,
                            _l5 = n._selectedCells;
                        if (o) {
                            if (t) n.setCellInfo.call(this, "up" === t ? _l5[0] : _l5[_l5.length - 1], !0), n.editRow.call(this, t, _e26);else {
                                var _e27 = _l5[0].parentNode;
                                var _i9 = [_l5[0]];
                                for (var _t18, _n6 = 1, _o4 = _l5.length; _n6 < _o4; _n6++) {
                                    _e27 !== (_t18 = _l5[_n6]).parentNode && (_i9.push(_t18), _e27 = _t18.parentNode);
                                }for (var _e28 = 0, _l6 = _i9.length; _e28 < _l6; _e28++) {
                                    n.setCellInfo.call(this, _i9[_e28], !0), n.editRow.call(this, t);
                                }
                            }
                        } else {
                            var _i10 = _l5[0].parentNode;
                            if (t) {
                                var _o5 = null;
                                for (var _e29 = 0, _t19 = _l5.length - 1; _e29 < _t19; _e29++) {
                                    if (_i10 !== _l5[_e29 + 1].parentNode) {
                                        _o5 = _l5[_e29];
                                        break;
                                    }
                                }n.setCellInfo.call(this, "left" === t ? _l5[0] : _o5 || _l5[0], !0), n.editCell.call(this, t, _e26);
                            } else {
                                var _e30 = [_l5[0]];
                                for (var _t20, _n7 = 1, _o6 = _l5.length; _n7 < _o6 && _i10 === (_t20 = _l5[_n7]).parentNode; _n7++) {
                                    _e30.push(_t20);
                                }for (var _i11 = 0, _l7 = _e30.length; _i11 < _l7; _i11++) {
                                    n.setCellInfo.call(this, _e30[_i11], !0), n.editCell.call(this, t);
                                }
                            }
                        }
                        t || n.init.call(this);
                    } else n[o ? "editRow" : "editCell"].call(this, t);
                    if (!t) {
                        var _e31 = l.children;
                        for (var _t21 = 0; _t21 < _e31.length; _t21++) {
                            0 === _e31[_t21].children.length && (this.util.removeItem(_e31[_t21]), _t21--);
                        }0 === l.children.length && this.util.removeItem(l);
                    }
                },
                editRow: function editRow(e, t) {
                    var n = this.context.table,
                        i = !e,
                        l = "up" === e,
                        o = n._rowIndex,
                        s = i || l ? o : o + n._current_rowSpan + 1,
                        a = i ? -1 : 1,
                        r = n._trElements;
                    var c = n._logical_cellCnt;
                    for (var _e32, _t22 = 0, _n8 = o + (i ? -1 : 0); _t22 <= _n8; _t22++) {
                        if (0 === (_e32 = r[_t22].cells).length) return;
                        for (var _n9, _i12, _l8 = 0, _o7 = _e32.length; _l8 < _o7; _l8++) {
                            _n9 = _e32[_l8].rowSpan, _i12 = _e32[_l8].colSpan, _n9 < 2 && _i12 < 2 || _n9 + _t22 > s && s > _t22 && (_e32[_l8].rowSpan = _n9 + a, c -= _i12);
                        }
                    }
                    if (i) {
                        var _e33 = r[o + 1];
                        if (_e33) {
                            var _t23 = [];
                            var _n10 = r[o].cells,
                                _i13 = 0;
                            for (var _e34, _l9, _o8 = 0, _s4 = _n10.length; _o8 < _s4; _o8++) {
                                _e34 = _n10[_o8], _l9 = _o8 + _i13, _i13 += _e34.colSpan - 1, _e34.rowSpan > 1 && (_e34.rowSpan -= 1, _t23.push({
                                    cell: _e34.cloneNode(!1),
                                    index: _l9
                                }));
                            }if (_t23.length > 0) {
                                var _l10 = _t23.shift();
                                _n10 = _e33.cells, _i13 = 0;
                                for (var _o9, _s5, _a5 = 0, _r5 = _n10.length; _a5 < _r5 && (_o9 = _n10[_a5], _s5 = _a5 + _i13, _i13 += _o9.colSpan - 1, !(_s5 >= _l10.index) || (_a5--, _i13--, _i13 += _l10.cell.colSpan - 1, _e33.insertBefore(_l10.cell, _o9), _l10 = _t23.shift())); _a5++) {}
                                if (_l10) {
                                    _e33.appendChild(_l10.cell);
                                    for (var _n11 = 0, _i14 = _t23.length; _n11 < _i14; _n11++) {
                                        _e33.appendChild(_t23[_n11].cell);
                                    }
                                }
                            }
                        }
                        n._element.deleteRow(s);
                    } else n._element.insertRow(s).innerHTML = this.plugins.table.createCells.call(this, "td", c, !1);
                    i ? this.controllersOff() : this.plugins.table.setPositionControllerDiv.call(this, t || n._tdElement, !0);
                },
                editCell: function editCell(e, t) {
                    var n = this.context.table,
                        i = this.util,
                        l = !e,
                        o = "left" === e,
                        s = n._current_colSpan,
                        a = l || o ? n._logical_cellIndex : n._logical_cellIndex + s + 1,
                        r = n._trElements;
                    var c = [],
                        d = [],
                        u = 0;
                    var h = [],
                        g = [];
                    for (var _e35, _t24, _o10, _p3, _m2, f, _ = 0, b = n._rowCnt; _ < b; _++) {
                        _e35 = r[_], _t24 = a, _m2 = !1, _o10 = _e35.cells, f = 0;
                        for (var _e36, _n12, _r6, _p4, _b = 0, y = _o10.length; _b < y && (_e36 = _o10[_b]); _b++) {
                            if (_n12 = _e36.rowSpan - 1, _r6 = _e36.colSpan - 1, l) {
                                if (_p4 = _b + f, d.length > 0) {
                                    var _e37 = !_o10[_b + 1];
                                    for (var _t25, _n13 = 0; _n13 < d.length; _n13++) {
                                        (_t25 = d[_n13]).row > _ || (_p4 >= _t25.index ? (_p4 = _b + (f += _t25.cs), _t25.rs -= 1, _t25.row = _ + 1, _t25.rs < 1 && (d.splice(_n13, 1), _n13--)) : _e37 && (_t25.rs -= 1, _t25.row = _ + 1, _t25.rs < 1 && (d.splice(_n13, 1), _n13--)));
                                    }
                                }
                                _n12 > 0 && c.push({
                                    rs: _n12,
                                    cs: _r6 + 1,
                                    index: _p4,
                                    row: -1
                                }), _p4 >= _t24 && _p4 + _r6 <= _t24 + s ? h.push(_e36) : _p4 <= _t24 + s && _p4 + _r6 >= _t24 ? _e36.colSpan -= i.getOverlapRangeAtIndex(a, a + s, _p4, _p4 + _r6) : _n12 > 0 && (_p4 < _t24 || _p4 + _r6 > _t24 + s) && g.push({
                                    cell: _e36,
                                    i: _,
                                    rs: _ + _n12
                                }), f += _r6;
                            } else {
                                if (_b >= _t24) break;
                                if (_r6 > 0) {
                                    if (u < 1 && _r6 + _b >= _t24) {
                                        _e36.colSpan += 1, _t24 = null, u = _n12 + 1;
                                        break;
                                    }
                                    _t24 -= _r6;
                                }
                                if (!_m2) {
                                    for (var _e38, _n14 = 0; _n14 < d.length; _n14++) {
                                        _t24 -= (_e38 = d[_n14]).cs, _e38.rs -= 1, _e38.rs < 1 && (d.splice(_n14, 1), _n14--);
                                    }_m2 = !0;
                                }
                            }
                        }if (d = d.concat(c).sort(function (e, t) {
                            return e.index - t.index;
                        }), c = [], !l) {
                            if (u > 0) {
                                u -= 1;
                                continue;
                            }
                            null !== _t24 && _o10.length > 0 && (_p3 = this.plugins.table.createCells.call(this, _o10[0].nodeName, 0, !0), _p3 = _e35.insertBefore(_p3, _o10[_t24]));
                        }
                    }
                    if (l) {
                        var _e39 = void 0,
                            _t26 = void 0;
                        for (var _n15, _l11 = 0, _o11 = h.length; _l11 < _o11; _l11++) {
                            _n15 = h[_l11].parentNode, i.removeItem(h[_l11]), 0 === _n15.cells.length && (_e39 || (_e39 = i.getArrayIndex(r, _n15)), _t26 = i.getArrayIndex(r, _n15), i.removeItem(_n15));
                        }for (var _n16, _l12 = 0, _o12 = g.length; _l12 < _o12; _l12++) {
                            (_n16 = g[_l12]).cell.rowSpan = i.getOverlapRangeAtIndex(_e39, _t26, _n16.i, _n16.rs);
                        }this.controllersOff();
                    } else this.plugins.table.setPositionControllerDiv.call(this, t || n._tdElement, !0);
                },
                _closeSplitMenu: null,
                openSplitMenu: function openSplitMenu() {
                    this.util.addClass(this.context.table.splitButton, "on"), this.context.table.splitMenu.style.display = "inline-table", this.plugins.table._closeSplitMenu = function () {
                        this.util.removeClass(this.context.table.splitButton, "on"), this.context.table.splitMenu.style.display = "none", this._d.removeEventListener("mousedown", this.plugins.table._closeSplitMenu), this.plugins.table._closeSplitMenu = null;
                    }.bind(this), this._d.addEventListener("mousedown", this.plugins.table._closeSplitMenu);
                },
                splitCells: function splitCells(e) {
                    var t = this.util,
                        n = "vertical" === e,
                        i = this.context.table,
                        l = i._tdElement,
                        o = i._trElements,
                        s = i._trElement,
                        a = i._logical_cellIndex,
                        r = i._rowIndex,
                        c = this.plugins.table.createCells.call(this, l.nodeName, 0, !0);
                    if (n) {
                        var _e40 = l.colSpan;
                        if (c.rowSpan = l.rowSpan, _e40 > 1) c.colSpan = this._w.Math.floor(_e40 / 2), l.colSpan = _e40 - c.colSpan, s.insertBefore(c, l.nextElementSibling);else {
                            var _t27 = [],
                                _n17 = [];
                            for (var _s6, _r7, _c5 = 0, _d5 = i._rowCnt; _c5 < _d5; _c5++) {
                                _s6 = o[_c5].cells, _r7 = 0;
                                for (var _i15, _o13, _d6, _u5, _h4 = 0, _g4 = _s6.length; _h4 < _g4; _h4++) {
                                    if (_o13 = (_i15 = _s6[_h4]).colSpan - 1, _d6 = _i15.rowSpan - 1, _u5 = _h4 + _r7, _n17.length > 0) for (var _e41, _t28 = 0; _t28 < _n17.length; _t28++) {
                                        (_e41 = _n17[_t28]).row > _c5 || (_u5 >= _e41.index ? (_r7 += _e41.cs, _u5 += _e41.cs, _e41.rs -= 1, _e41.row = _c5 + 1, _e41.rs < 1 && (_n17.splice(_t28, 1), _t28--)) : _h4 === _g4 - 1 && (_e41.rs -= 1, _e41.row = _c5 + 1, _e41.rs < 1 && (_n17.splice(_t28, 1), _t28--)));
                                    }if (_u5 <= a && _d6 > 0 && _t27.push({
                                        index: _u5,
                                        cs: _o13 + 1,
                                        rs: _d6,
                                        row: -1
                                    }), _i15 !== l && _u5 <= a && _u5 + _o13 >= a + _e40 - 1) {
                                        _i15.colSpan += 1;
                                        break;
                                    }
                                    if (_u5 > a) break;
                                    _r7 += _o13;
                                }
                                _n17 = _n17.concat(_t27).sort(function (e, t) {
                                    return e.index - t.index;
                                }), _t27 = [];
                            }
                            s.insertBefore(c, l.nextElementSibling);
                        }
                    } else {
                        var _e42 = l.rowSpan;
                        if (c.colSpan = l.colSpan, _e42 > 1) {
                            c.rowSpan = this._w.Math.floor(_e42 / 2);
                            var _n18 = _e42 - c.rowSpan,
                                _i16 = [],
                                _r8 = t.getArrayIndex(o, s) + _n18;
                            for (var _e43, _t29, _n19 = 0; _n19 < _r8; _n19++) {
                                _e43 = o[_n19].cells, _t29 = 0;
                                for (var _l13, _o14, _s7, _c6 = 0, _d8 = _e43.length; _c6 < _d8 && !((_s7 = _c6 + _t29) >= a); _c6++) {
                                    (_o14 = (_l13 = _e43[_c6]).rowSpan - 1) > 0 && _o14 + _n19 >= _r8 && _s7 < a && _i16.push({
                                        index: _s7,
                                        cs: _l13.colSpan
                                    }), _t29 += _l13.colSpan - 1;
                                }
                            }
                            var _d7 = o[_r8],
                                _u6 = _d7.cells;
                            var _h5 = _i16.shift();
                            for (var _e44, _t30, _n20, _l14, _o15 = 0, _s8 = _u6.length, _r9 = 0; _o15 < _s8; _o15++) {
                                if (_l14 = (_n20 = _o15 + _r9) + (_t30 = (_e44 = _u6[_o15]).colSpan - 1) + 1, _h5 && _l14 >= _h5.index && (_r9 += _h5.cs, _l14 += _h5.cs, _h5 = _i16.shift()), _l14 >= a || _o15 === _s8 - 1) {
                                    _d7.insertBefore(c, _e44.nextElementSibling);
                                    break;
                                }
                                _r9 += _t30;
                            }
                            l.rowSpan = _n18;
                        } else {
                            c.rowSpan = l.rowSpan;
                            var _e45 = t.createElement("TR");
                            _e45.appendChild(c);
                            for (var _e46, _t31 = 0; _t31 < r; _t31++) {
                                if (0 === (_e46 = o[_t31].cells).length) return;
                                for (var _n22 = 0, _i17 = _e46.length; _n22 < _i17; _n22++) {
                                    _t31 + _e46[_n22].rowSpan - 1 >= r && (_e46[_n22].rowSpan += 1);
                                }
                            }
                            var _n21 = i._physical_cellIndex,
                                _a6 = s.cells;
                            for (var _e47 = 0, _t32 = _a6.length; _e47 < _t32; _e47++) {
                                _e47 !== _n21 && (_a6[_e47].rowSpan += 1);
                            }s.parentNode.insertBefore(_e45, s.nextElementSibling);
                        }
                    }
                    this.plugins.table.setPositionControllerDiv.call(this, l, !0);
                },
                mergeCells: function mergeCells() {
                    var e = this.plugins.table,
                        t = this.context.table,
                        n = this.util,
                        i = e._ref,
                        l = e._selectedCells,
                        o = l[0];
                    var s = null,
                        a = null,
                        r = i.ce - i.cs + 1,
                        c = i.re - i.rs + 1,
                        d = "",
                        u = null;
                    for (var _e48, _t33, _i18 = 1, _o16 = l.length; _i18 < _o16; _i18++) {
                        u !== (_e48 = l[_i18]).parentNode && (u = _e48.parentNode);
                        for (var _i19 = 0, _l15 = (_t33 = _e48.children).length; _i19 < _l15; _i19++) {
                            n.isFormatElement(_t33[_i19]) && n.onlyZeroWidthSpace(_t33[_i19].textContent) && n.removeItem(_t33[_i19]);
                        }d += _e48.innerHTML, n.removeItem(_e48), 0 === u.cells.length && (s ? a = u : s = u, c -= 1);
                    }
                    if (s) {
                        var _e49 = t._trElements,
                            _i20 = n.getArrayIndex(_e49, s),
                            _l16 = n.getArrayIndex(_e49, a || s),
                            _o17 = [];
                        for (var _t34, _s9 = 0; _s9 <= _l16; _s9++) {
                            if (0 !== (_t34 = _e49[_s9].cells).length) for (var _e50, _o18, _a7 = 0, _r10 = _t34.length; _a7 < _r10; _a7++) {
                                (_o18 = (_e50 = _t34[_a7]).rowSpan - 1) > 0 && _s9 + _o18 >= _i20 && (_e50.rowSpan -= n.getOverlapRangeAtIndex(_i20, _l16, _s9, _s9 + _o18));
                            } else _o17.push(_e49[_s9]);
                        }for (var _e51 = 0, _t35 = _o17.length; _e51 < _t35; _e51++) {
                            n.removeItem(_o17[_e51]);
                        }
                    }
                    o.innerHTML += d, o.colSpan = r, o.rowSpan = c, this.controllersOff(), e.setActiveButton.call(this, !0, !1), e.call_controller_tableEdit.call(this, o), n.addClass(o, "se-table-selected-cell");
                },
                toggleHeader: function toggleHeader() {
                    var e = this.util,
                        t = this.context.table.headerButton,
                        n = e.hasClass(t, "active"),
                        i = this.context.table._element;
                    if (n) e.removeItem(i.querySelector("thead"));else {
                        var _t36 = e.createElement("THEAD");
                        _t36.innerHTML = "<tr>" + this.plugins.table.createCells.call(this, "th", this.context.table._logical_cellCnt, !1) + "</tr>", i.insertBefore(_t36, i.firstElementChild);
                    }
                    e.toggleClass(t, "active"), /TH/i.test(this.context.table._tdElement.nodeName) ? this.controllersOff() : this.plugins.table.setPositionControllerDiv.call(this, this.context.table._tdElement, !1);
                },
                resizeTable: function resizeTable() {
                    var e = this.context.table,
                        t = e.resizeIcon,
                        n = e.resizeText;
                    var i = "se-icon-expansion",
                        l = "se-icon-reduction",
                        o = e.minText,
                        s = "100%";
                    e._maxWidth || (i = "se-icon-reduction", l = "se-icon-expansion", o = e.maxText, s = "auto"), this.util.removeClass(t, i), this.util.addClass(t, l), this.util.changeTxt(n, o), e._element.style.width = s;
                },
                setActiveButton: function setActiveButton(e, t) {
                    var n = this.context.table;
                    t && e !== t ? (n.splitButton.setAttribute("disabled", !0), n.mergeButton.removeAttribute("disabled")) : (n.splitButton.removeAttribute("disabled"), n.mergeButton.setAttribute("disabled", !0));
                },
                _bindOnSelect: null,
                _bindOffSelect: null,
                _bindOffShift: null,
                _selectedCells: null,
                _shift: !1,
                _fixedCell: null,
                _fixedCellName: null,
                _selectedCell: null,
                _selectedTable: null,
                _ref: null,
                _toggleEditor: function _toggleEditor(e) {
                    this.context.element.wysiwyg.setAttribute("contenteditable", e), e ? this.util.removeClass(this.context.element.wysiwyg, "se-disabled") : this.util.addClass(this.context.element.wysiwyg, "se-disabled");
                },
                _offCellMultiSelect: function _offCellMultiSelect(e) {
                    e.stopPropagation();
                    var t = this.plugins.table;
                    t._shift ? t._initBind && (this._d.removeEventListener("touchmove", t._initBind), t._initBind = null) : (t._removeEvents.call(this), t._toggleEditor.call(this, !0)), t._fixedCell && t._selectedTable && (t.setActiveButton.call(this, t._fixedCell, t._selectedCell), t.call_controller_tableEdit.call(this, t._selectedCell || t._fixedCell), t._selectedCells = t._selectedTable.querySelectorAll(".se-table-selected-cell"), t._shift || (t._fixedCell = null, t._selectedCell = null, t._fixedCellName = null), this._editorRange(), this.focus());
                },
                _onCellMultiSelect: function _onCellMultiSelect(e) {
                    var t = this.plugins.table,
                        n = this.util.getParentElement(e.target, this.util.isCell);
                    if (t._shift) n === t._fixedCell ? t._toggleEditor.call(this, !0) : t._toggleEditor.call(this, !1);else if (!t._ref) {
                        if (n === t._fixedCell) return;
                        t._toggleEditor.call(this, !1);
                    }
                    n && n !== t._selectedCell && t._fixedCellName === n.nodeName && t._selectedTable === this.util.getParentElement(n, "TABLE") && (t._selectedCell = n, t._setMultiCells.call(this, t._fixedCell, n));
                },
                _setMultiCells: function _setMultiCells(e, t) {
                    var n = this.plugins.table,
                        i = n._selectedTable.rows,
                        l = this.util,
                        o = n._selectedTable.querySelectorAll(".se-table-selected-cell");
                    for (var _e52 = 0, _t37 = o.length; _e52 < _t37; _e52++) {
                        l.removeClass(o[_e52], "se-table-selected-cell");
                    }if (e === t && (l.addClass(e, "se-table-selected-cell"), !n._shift)) return;
                    var s = !0,
                        a = [],
                        r = [];
                    var c = n._ref = {
                        _i: 0,
                        cs: null,
                        ce: null,
                        rs: null,
                        re: null
                    };
                    for (var _n23, _o19, _d9 = 0, _u7 = i.length; _d9 < _u7; _d9++) {
                        _n23 = i[_d9].cells, _o19 = 0;
                        for (var _i21, _u8, _h6, _g5, _p5 = 0, _m3 = _n23.length; _p5 < _m3; _p5++) {
                            if (_h6 = (_i21 = _n23[_p5]).colSpan - 1, _g5 = _i21.rowSpan - 1, _u8 = _p5 + _o19, a.length > 0) for (var _e53, _t38 = 0; _t38 < a.length; _t38++) {
                                (_e53 = a[_t38]).row > _d9 || (_u8 >= _e53.index ? (_o19 += _e53.cs, _u8 += _e53.cs, _e53.rs -= 1, _e53.row = _d9 + 1, _e53.rs < 1 && (a.splice(_t38, 1), _t38--)) : _p5 === _m3 - 1 && (_e53.rs -= 1, _e53.row = _d9 + 1, _e53.rs < 1 && (a.splice(_t38, 1), _t38--)));
                            }if (s) {
                                if (_i21 !== e && _i21 !== t || (c.cs = null !== c.cs && c.cs < _u8 ? c.cs : _u8, c.ce = null !== c.ce && c.ce > _u8 + _h6 ? c.ce : _u8 + _h6, c.rs = null !== c.rs && c.rs < _d9 ? c.rs : _d9, c.re = null !== c.re && c.re > _d9 + _g5 ? c.re : _d9 + _g5, c._i += 1), 2 === c._i) {
                                    s = !1, a = [], r = [], _d9 = -1;
                                    break;
                                }
                            } else if (l.getOverlapRangeAtIndex(c.cs, c.ce, _u8, _u8 + _h6) && l.getOverlapRangeAtIndex(c.rs, c.re, _d9, _d9 + _g5)) {
                                var _e54 = c.cs < _u8 ? c.cs : _u8,
                                    _t39 = c.ce > _u8 + _h6 ? c.ce : _u8 + _h6,
                                    _n24 = c.rs < _d9 ? c.rs : _d9,
                                    _o20 = c.re > _d9 + _g5 ? c.re : _d9 + _g5;
                                if (c.cs !== _e54 || c.ce !== _t39 || c.rs !== _n24 || c.re !== _o20) {
                                    c.cs = _e54, c.ce = _t39, c.rs = _n24, c.re = _o20, _d9 = -1, a = [], r = [];
                                    break;
                                }
                                l.addClass(_i21, "se-table-selected-cell");
                            }
                            _g5 > 0 && r.push({
                                index: _u8,
                                cs: _h6 + 1,
                                rs: _g5,
                                row: -1
                            }), _o19 += _i21.colSpan - 1;
                        }
                        a = a.concat(r).sort(function (e, t) {
                            return e.index - t.index;
                        }), r = [];
                    }
                },
                _removeEvents: function _removeEvents() {
                    var e = this.plugins.table;
                    e._initBind && (this._d.removeEventListener("touchmove", e._initBind), e._initBind = null), e._bindOnSelect && (this._d.removeEventListener("mousedown", e._bindOnSelect), this._d.removeEventListener("mousemove", e._bindOnSelect), e._bindOnSelect = null), e._bindOffSelect && (this._d.removeEventListener("mouseup", e._bindOffSelect), e._bindOffSelect = null), e._bindOffShift && (this._d.removeEventListener("keyup", e._bindOffShift), e._bindOffShift = null);
                },
                _initBind: null,
                onTableCellMultiSelect: function onTableCellMultiSelect(e, t) {
                    var n = this.plugins.table;
                    n._removeEvents.call(this), this.controllersOff(), n._shift = t, n._fixedCell = e, n._fixedCellName = e.nodeName, n._selectedTable = this.util.getParentElement(e, "TABLE");
                    var i = n._selectedTable.querySelectorAll(".se-table-selected-cell");
                    for (var _e55 = 0, _t40 = i.length; _e55 < _t40; _e55++) {
                        this.util.removeClass(i[_e55], "se-table-selected-cell");
                    }this.util.addClass(e, "se-table-selected-cell"), n._bindOnSelect = n._onCellMultiSelect.bind(this), n._bindOffSelect = n._offCellMultiSelect.bind(this), t ? (n._bindOffShift = function () {
                        this.controllersOn(this.context.table.resizeDiv, this.context.table.tableController, this.plugins.table.init.bind(this), this.focus.bind(this)), n._ref || this.controllersOff();
                    }.bind(this), this._d.addEventListener("keyup", n._bindOffShift, !1), this._d.addEventListener("mousedown", n._bindOnSelect, !1)) : this._d.addEventListener("mousemove", n._bindOnSelect, !1), this._d.addEventListener("mouseup", n._bindOffSelect, !1), n._initBind = n.init.bind(this), this._d.addEventListener("touchmove", n._initBind, !1);
                },
                onClick_tableController: function onClick_tableController(e) {
                    e.stopPropagation();
                    var t = e.target.getAttribute("data-command") ? e.target : e.target.parentNode;
                    if (t.getAttribute("disabled")) return;
                    var n = t.getAttribute("data-command"),
                        i = t.getAttribute("data-value"),
                        l = t.getAttribute("data-option");
                    if ("function" == typeof this.plugins.table._closeSplitMenu && (this.plugins.table._closeSplitMenu(), "onsplit" === n)) return;
                    if (!n) return;
                    e.preventDefault();
                    var o = this.context.table;
                    switch (n) {
                        case "insert":
                        case "delete":
                            this.plugins.table.editTable.call(this, i, l);
                            break;
                        case "header":
                            this.plugins.table.toggleHeader.call(this);
                            break;
                        case "onsplit":
                            this.plugins.table.openSplitMenu.call(this);
                            break;
                        case "split":
                            this.plugins.table.splitCells.call(this, i);
                            break;
                        case "merge":
                            this.plugins.table.mergeCells.call(this);
                            break;
                        case "resize":
                            o.resizeDiv.style.display = "none", o._maxWidth = !o._maxWidth, this.plugins.table.resizeTable.call(this);
                            break;
                        case "remove":
                            this.util.removeItem(o._element), this.controllersOff();
                    }
                    this.focus(), this.history.push();
                }
            },
            formatBlock: {
                name: "formatBlock",
                add: function add(e, t) {
                    var n = e.context;
                    n.formatBlock = {
                        _formatList: null,
                        currentFormat: ""
                    };
                    var i = this.setSubmenu.call(e);
                    i.querySelector("ul").addEventListener("click", this.pickUp.bind(e)), n.formatBlock._formatList = i.querySelectorAll("li button"), t.parentNode.appendChild(i), i = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.option,
                        t = this.lang.toolbar,
                        n = this.util.createElement("DIV"),
                        i = e.formats && 0 !== e.formats.length ? e.formats : ["p", "div", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"];
                    n.className = "se-submenu se-list-layer";
                    var l = '<div class="se-list-inner"><ul class="se-list-basic se-list-format">';
                    for (var _e56, _n25, _o21, _s10, _a8 = 0, _r11 = i.length; _a8 < _r11; _a8++) {
                        _n25 = "pre" === (_e56 = i[_a8].toLowerCase()) || "blockquote" === _e56 ? "range" : "replace", _s10 = /^h/.test(_e56) ? _e56.match(/\d+/)[0] : "", l += '<li><button type="button" class="se-btn-list" data-command="' + _n25 + '" data-value="' + _e56 + '" title="' + (_o21 = t["tag_" + (_s10 ? "h" : _e56)] + _s10) + '"><' + _e56 + ">" + _o21 + "</" + _e56 + "></button></li>";
                    }return l += "</ul></div>", n.innerHTML = l, n;
                },
                on: function on() {
                    var e = this.context.formatBlock,
                        t = e._formatList,
                        n = (this.commandMap.FORMAT.getAttribute("data-focus") || "P").toLowerCase();
                    if (n !== e.currentFormat) {
                        for (var _e57 = 0, _i22 = t.length; _e57 < _i22; _e57++) {
                            n === t[_e57].getAttribute("data-value") ? this.util.addClass(t[_e57], "active") : this.util.removeClass(t[_e57], "active");
                        }e.currentFormat = n;
                    }
                },
                pickUp: function pickUp(e) {
                    e.preventDefault(), e.stopPropagation();
                    var t = e.target,
                        n = null,
                        i = null;
                    for (; !n && !/UL/i.test(t.tagName);) {
                        n = t.getAttribute("data-command"), i = t.getAttribute("data-value"), t = t.parentNode;
                    }if (n && i) {
                        if ("range" === n) {
                            var _e58 = this.util.createElement(i);
                            this.applyRangeFormatElement(_e58);
                        } else {
                            var _e59 = this.getRange(),
                                _t41 = _e59.startOffset,
                                _n26 = _e59.endOffset;
                            var _l17 = this.getSelectedElementsAndComponents();
                            if (0 === _l17.length) return;
                            var _o22 = _l17[0],
                                _s11 = _l17[_l17.length - 1];
                            var _a9 = this.util.getNodePath(_e59.startContainer, _o22),
                                _r12 = this.util.getNodePath(_e59.endContainer, _s11);
                            var _c7 = {},
                                _d10 = !1,
                                _u9 = !1;
                            var _h7 = function (e) {
                                return !this.isComponent(e);
                            }.bind(this.util);
                            for (var _e60, _t42, _n27, _i23, _a10 = 0, _r13 = _l17.length; _a10 < _r13; _a10++) {
                                if (_n27 = _a10 === _r13 - 1, _t42 = this.util.getRangeFormatElement(_l17[_a10], _h7), _i23 = this.util.isList(_t42), !_e60 && _i23) _c7 = {
                                    r: _e60 = _t42,
                                    f: [this.util.getParentElement(_l17[_a10], "LI")]
                                }, 0 === _a10 && (_d10 = !0);else if (_e60 && _i23) if (_e60 !== _t42) {
                                    var _r14 = this.detachRangeFormatElement(_c7.r, _c7.f, null, !1, !0);
                                    _d10 && (_o22 = _r14.sc, _d10 = !1), _n27 && (_s11 = _r14.ec), _i23 ? (_c7 = {
                                        r: _e60 = _t42,
                                        f: [this.util.getParentElement(_l17[_a10], "LI")]
                                    }, _n27 && (_u9 = !0)) : _e60 = null;
                                } else _c7.f.push(this.util.getParentElement(_l17[_a10], "LI")), _n27 && (_u9 = !0);
                                if (_n27 && this.util.isList(_e60)) {
                                    var _e61 = this.detachRangeFormatElement(_c7.r, _c7.f, null, !1, !0);
                                    (_u9 || 1 === _r13) && (_s11 = _e61.ec, _d10 && (_o22 = _e61.sc || _s11));
                                }
                            }
                            this.setRange(this.util.getNodeFromPath(_a9, _o22), _t41, this.util.getNodeFromPath(_r12, _s11), _n26);
                            for (var _e62, _t43, _n28 = 0, _a11 = (_l17 = this.getSelectedElementsAndComponents()).length; _n28 < _a11; _n28++) {
                                (_e62 = _l17[_n28]).nodeName.toLowerCase() === i.toLowerCase() || this.util.isComponent(_e62) || ((_t43 = this.util.createElement(i)).innerHTML = _e62.innerHTML, _e62.parentNode.insertBefore(_t43, _e62), this.util.removeItem(_e62)), 0 === _n28 && (_o22 = _t43 || _e62), _n28 === _a11 - 1 && (_s11 = _t43 || _e62), _t43 = null;
                            }this.setRange(this.util.getNodeFromPath(_a9, _o22), _t41, this.util.getNodeFromPath(_r12, _s11), _n26), this.history.push();
                        }
                        this.submenuOff();
                    }
                }
            },
            template: {
                name: "template",
                add: function add(e, t) {
                    e.context.template = {};
                    var n = this.setSubmenu.call(e);
                    n.querySelector("ul").addEventListener("click", this.pickup.bind(e)), t.parentNode.appendChild(n), n = null;
                },
                setSubmenu: function setSubmenu() {
                    var e = this.context.option.templates,
                        t = this.util.createElement("DIV");
                    t.className = "se-list-layer";
                    var n = '<div class="se-submenu se-list-inner">   <ul class="se-list-basic">';
                    for (var _t44, _i24 = 0, _l18 = e.length; _i24 < _l18; _i24++) {
                        n += '<li><button type="button" class="se-btn-list" data-value="' + _i24 + '" title="' + (_t44 = e[_i24]).name + '">' + _t44.name + "</button></li>";
                    }return n += "   </ul>", n += "</div>", t.innerHTML = n, t;
                },
                pickup: function pickup(e) {
                    if (!/^BUTTON$/i.test(e.target.tagName)) return !1;
                    e.preventDefault(), e.stopPropagation();
                    var t = this.context.option.templates[e.target.getAttribute("data-value")];
                    if (!t.html) throw this.submenuOff(), Error('[SUNEDITOR.template.fail] cause : "templates[i].html not found"');
                    this.setContents(t.html), this.submenuOff();
                }
            },
            link: {
                name: "link",
                add: function add(e) {
                    e.addModule([l]);
                    var t = e.context;
                    t.link = {};
                    var n = this.setDialog.call(e);
                    t.link.modal = n, t.link.focusElement = n.querySelector("._se_link_url"), t.link.linkAnchorText = n.querySelector("._se_link_text"), t.link.linkNewWindowCheck = n.querySelector("._se_link_check");
                    var i = this.setController_LinkButton.call(e);
                    t.link.linkBtn = i, t.link._linkAnchor = null, i.addEventListener("mousedown", function (e) {
                        e.stopPropagation();
                    }, !1), n.querySelector(".se-btn-primary").addEventListener("click", this.submit.bind(e)), i.addEventListener("click", this.onClick_linkBtn.bind(e)), t.dialog.modal.appendChild(n), t.element.relative.appendChild(i), n = null, i = null;
                },
                setDialog: function setDialog() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-dialog-content", t.style.display = "none", t.innerHTML = '<form class="editor_link">   <div class="se-dialog-header">       <button type="button" data-command="close" class="close" aria-label="Close" title="' + e.dialogBox.close + '">           <i aria-hidden="true" data-command="close" class="se-icon-cancel"></i>       </button>       <span class="se-modal-title">' + e.dialogBox.linkBox.title + '</span>   </div>   <div class="se-dialog-body">       <div class="se-dialog-form">           <label>' + e.dialogBox.linkBox.url + '</label>           <input class="se-input-form _se_link_url" type="text" />       </div>       <div class="se-dialog-form">           <label>' + e.dialogBox.linkBox.text + '</label><input class="se-input-form _se_link_text" type="text" />       </div>       <div class="se-dialog-form-footer">           <label><input type="checkbox" class="se-dialog-btn-check _se_link_check" />&nbsp;' + e.dialogBox.linkBox.newWindowCheck + '</label>       </div>   </div>   <div class="se-dialog-footer">       <button type="submit" class="se-btn-primary" title="' + e.dialogBox.submitButton + '"><span>' + e.dialogBox.submitButton + "</span></button>   </div></form>", t;
                },
                setController_LinkButton: function setController_LinkButton() {
                    var e = this.lang,
                        t = this.util.createElement("DIV");
                    return t.className = "se-controller se-controller-link", t.innerHTML = '<div class="se-arrow se-arrow-up"></div><div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span>   <div class="se-btn-group">       <button type="button" data-command="update" tabindex="-1" class="se-tooltip">           <i class="se-icon-edit"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.edit + '</span></span>       </button>       <button type="button" data-command="delete" tabindex="-1" class="se-tooltip">           <i class="se-icon-delete"></i>           <span class="se-tooltip-inner"><span class="se-tooltip-text">' + e.controller.remove + "</span></span>       </button>   </div></div>", t;
                },
                submit: function submit(e) {
                    this.showLoading(), e.preventDefault(), e.stopPropagation();
                    var t = function () {
                        if (0 === this.context.link.focusElement.value.trim().length) return !1;
                        var e = this.context.link.focusElement.value,
                            t = this.context.link.linkAnchorText,
                            n = 0 === t.value.length ? e : t.value;
                        if (this.context.dialog.updateModal) this.context.link._linkAnchor.href = e, this.context.link._linkAnchor.textContent = n, this.context.link._linkAnchor.target = this.context.link.linkNewWindowCheck.checked ? "_blank" : "", this.history.push(), this.setRange(this.context.link._linkAnchor.childNodes[0], 0, this.context.link._linkAnchor.childNodes[0], this.context.link._linkAnchor.textContent.length);else {
                            var _t45 = this.util.createElement("A");
                            _t45.href = e, _t45.textContent = n, _t45.target = this.context.link.linkNewWindowCheck.checked ? "_blank" : "", this.insertNode(_t45), this.setRange(_t45.childNodes[0], 0, _t45.childNodes[0], _t45.textContent.length);
                        }
                        this.context.link.focusElement.value = "", this.context.link.linkAnchorText.value = "";
                    }.bind(this);
                    try {
                        t();
                    } finally {
                        this.plugins.dialog.close.call(this), this.closeLoading(), this.focus();
                    }
                    return !1;
                },
                call_controller_linkButton: function call_controller_linkButton(e) {
                    this.editLink = this.context.link._linkAnchor = e;
                    var t = this.context.link.linkBtn,
                        n = t.querySelector("a");
                    n.href = e.href, n.title = e.textContent, n.textContent = e.textContent;
                    var i = this.util.getOffset(e);
                    t.style.top = i.top + e.offsetHeight + 10 + "px", t.style.left = i.left - this.context.element.wysiwyg.scrollLeft + "px", t.style.display = "block";
                    var l = this.context.element.wysiwyg.offsetWidth - (t.offsetLeft + t.offsetWidth);
                    l < 0 ? (t.style.left = t.offsetLeft + l + "px", t.firstElementChild.style.left = 20 - l + "px") : t.firstElementChild.style.left = "20px", this.controllersOn(t);
                },
                onClick_linkBtn: function onClick_linkBtn(e) {
                    e.stopPropagation();
                    var t = e.target.getAttribute("data-command") || e.target.parentNode.getAttribute("data-command");
                    t && (e.preventDefault(), /update/.test(t) ? (this.context.link.focusElement.value = this.context.link._linkAnchor.href, this.context.link.linkAnchorText.value = this.context.link._linkAnchor.textContent, this.context.link.linkNewWindowCheck.checked = !!/_blank/i.test(this.context.link._linkAnchor.target), this.plugins.dialog.open.call(this, "link", !0)) : (this.util.removeItem(this.context.link._linkAnchor), this.context.link._linkAnchor = null, this.focus()), this.controllersOff(), this.history.push());
                },
                init: function init() {
                    var e = this.context.link;
                    e.linkBtn.style.display = "none", e._linkAnchor = null, e.focusElement.value = "", e.linkAnchorText.value = "", e.linkNewWindowCheck.checked = !1;
                }
            },
            image: {
                name: "image",
                add: function add(e) {
                    e.addModule([l, o, s]);
                    var t = e.context;
                    t.image = {
                        _linkElement: null,
                        _container: null,
                        _cover: null,
                        _element: null,
                        _element_w: 1,
                        _element_h: 1,
                        _element_l: 0,
                        _element_t: 0,
                        _origin_w: "auto" === t.option.imageWidth ? "" : t.option.imageWidth,
                        _origin_h: "",
                        _altText: "",
                        _caption: null,
                        captionCheckEl: null,
                        _linkValue: "",
                        _align: "none",
                        _captionChecked: !1,
                        _proportionChecked: !0,
                        _floatClassRegExp: "float\\-[a-z]+",
                        _xmlHttp: null,
                        _resizing: t.option.imageResizing,
                        _defaultAuto: "auto" === t.option.imageWidth,
                        _uploadFileLength: 0
                    };
                    var n = this.setDialog.call(e);
                    t.image.modal = n, t.image.imgUrlFile = n.querySelector("._se_image_url"), t.image.imgInputFile = t.image.focusElement = n.querySelector("._se_image_file"), t.image.altText = n.querySelector("._se_image_alt"), t.image.imgLink = n.querySelector("._se_image_link"), t.image.imgLinkNewWindowCheck = n.querySelector("._se_image_link_check"), t.image.captionCheckEl = n.querySelector("._se_image_check_caption"), t.image.modal.querySelector(".se-dialog-tabs").addEventListener("click", this.openTab.bind(e)), t.image.modal.querySelector(".se-btn-primary").addEventListener("click", this.submit.bind(e)), t.image.imageX = {}, t.image.imageY = {}, t.option.imageResizing && (t.image.proportion = n.querySelector("._se_image_check_proportion"), t.image.imageX = n.querySelector("._se_image_size_x"), t.image.imageY = n.querySelector("._se_image_size_y"), t.image.imageX.value = t.option.imageWidth, t.image.imageX.addEventListener("change", this.setInputSize.bind(e, "x")), t.image.imageY.addEventListener("change", this.setInputSize.bind(e, "y")), n.querySelector(".se-dialog-btn-revert").addEventListener("click", this.sizeRevert.bind(e))), t.dialog.modal.appendChild(n), n = null;
                },
                setDialog: function setDialog() {
                    var e = this.context.option,
                        t = this.lang,
                        n = this.util.createElement("DIV");
                    n.className = "se-dialog-content", n.style.display = "none";
                    var i = '<div class="se-dialog-header">   <button type="button" data-command="close" class="close" aria-label="Close" title="' + t.dialogBox.close + '">       <i aria-hidden="true" data-command="close" class="se-icon-cancel"></i>   </button>   <span class="se-modal-title">' + t.dialogBox.imageBox.title + '</span></div><div class="se-dialog-tabs">   <button type="button" class="_se_tab_link active" data-tab-link="image">' + t.toolbar.image + '</button>   <button type="button" class="_se_tab_link" data-tab-link="url">' + t.toolbar.link + '</button></div><form class="editor_image" method="post" enctype="multipart/form-data">   <div class="_se_tab_content _se_tab_content_image">       <div class="se-dialog-body">';
                    return e.imageFileInput && (i += '   <div class="se-dialog-form">       <label>' + t.dialogBox.imageBox.file + '</label>       <input class="se-input-form _se_image_file" type="file" accept="image/*" multiple="multiple" />   </div>'), e.imageUrlInput && (i += '   <div class="se-dialog-form">       <label>' + t.dialogBox.imageBox.url + '</label>       <input class="se-input-form _se_image_url" type="text" />   </div>'), i += '           <div class="se-dialog-form">               <label>' + t.dialogBox.imageBox.altText + '</label><input class="se-input-form _se_image_alt" type="text" />           </div>', e.imageResizing && (i += '       <div class="se-dialog-form">           <div class="se-dialog-size-text"><label class="size-w">' + t.dialogBox.width + '</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h">' + t.dialogBox.height + '</label></div>           <input class="se-input-control _se_image_size_x" type="number" min="1" ' + ("auto" === e.imageWidth ? "disabled" : "") + ' /><label class="se-dialog-size-x">x</label><input class="se-input-control _se_image_size_y" type="number" min="1" disabled />           <label><input type="checkbox" class="se-dialog-btn-check _se_image_check_proportion" checked disabled/>&nbsp;' + t.dialogBox.proportion + '</label>           <button type="button" title="' + t.dialogBox.revertButton + '" class="se-btn se-dialog-btn-revert" style="float: right;"><i class="se-icon-revert"></i></button>       </div>'), i += '           <div class="se-dialog-form-footer">               <label><input type="checkbox" class="se-dialog-btn-check _se_image_check_caption" />&nbsp;' + t.dialogBox.caption + '</label>           </div>       </div>   </div>   <div class="_se_tab_content _se_tab_content_url" style="display: none">       <div class="se-dialog-body">           <div class="se-dialog-form">               <label>' + t.dialogBox.linkBox.url + '</label><input class="se-input-form _se_image_link" type="text" />           </div>           <label><input type="checkbox" class="_se_image_link_check"/>&nbsp;' + t.dialogBox.linkBox.newWindowCheck + '</label>       </div>   </div>   <div class="se-dialog-footer">       <div>           <label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="none" checked>' + t.dialogBox.basic + '</label>           <label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="left">' + t.dialogBox.left + '</label>           <label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="center">' + t.dialogBox.center + '</label>           <label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="right">' + t.dialogBox.right + '</label>       </div>       <button type="submit" class="se-btn-primary" title="' + t.dialogBox.submitButton + '"><span>' + t.dialogBox.submitButton + "</span></button>   </div></form>", n.innerHTML = i, n;
                },
                openTab: function openTab(e) {
                    var t = this.context.image.modal,
                        n = "init" === e ? t.querySelector("._se_tab_link") : e.target;
                    if (!/^BUTTON$/i.test(n.tagName)) return !1;
                    var i = n.getAttribute("data-tab-link");
                    var l = void 0,
                        o = void 0,
                        s = void 0;
                    for (o = t.getElementsByClassName("_se_tab_content"), l = 0; l < o.length; l++) {
                        o[l].style.display = "none";
                    }for (s = t.getElementsByClassName("_se_tab_link"), l = 0; l < s.length; l++) {
                        this.util.removeClass(s[l], "active");
                    }return t.querySelector("._se_tab_content_" + i).style.display = "block", this.util.addClass(n, "active"), "image" === i ? this.context.image.imgInputFile.focus() : "url" === i && this.context.image.imgLink.focus(), !1;
                },
                submitAction: function submitAction(e) {
                    if (e.length > 0) {
                        var _t46 = 0;
                        var _n29 = [];
                        for (var _i26 = 0, _l20 = e.length; _i26 < _l20; _i26++) {
                            /image/i.test(e[_i26].type) && (_n29.push(e[_i26]), _t46 += e[_i26].size);
                        }var _i25 = this.context.option.imageUploadSizeLimit;
                        if (_i25 > 0) {
                            var _e63 = 0;
                            var _n30 = this._variable._imagesInfo;
                            for (var _t47 = 0, _i27 = _n30.length; _t47 < _i27; _t47++) {
                                _e63 += 1 * _n30[_t47].size;
                            }if (_t46 + _e63 > _i25) {
                                var _n31 = "[SUNEDITOR.imageUpload.fail] Size of uploadable total images: " + _i25 / 1e3 + "KB";
                                return this._imageUploadError(_n31, {
                                    limitSize: _i25,
                                    currentSize: _e63,
                                    uploadSize: _t46
                                }) && s.open.call(this, _n31), void this.closeLoading();
                            }
                        }
                        this.context.image._uploadFileLength = _n29.length;
                        var _l19 = this.context.option.imageUploadUrl,
                            _o23 = this.context.option.imageUploadHeader,
                            _a12 = this.context.dialog.updateModal ? 1 : _n29.length;
                        if ("string" == typeof _l19 && _l19.length > 0) {
                            var _e64 = new FormData();
                            for (var _t48 = 0; _t48 < _a12; _t48++) {
                                _e64.append("file-" + _t48, _n29[_t48]);
                            }if (this.context.image._xmlHttp = this.util.getXMLHttpRequest(), this.context.image._xmlHttp.onreadystatechange = this.plugins.image.callBack_imgUpload.bind(this, this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.image.imageX.value, this.context.image._align, this.context.dialog.updateModal, this.context.image._element), this.context.image._xmlHttp.open("post", _l19, !0), "object" == (typeof _o23 === "undefined" ? "undefined" : _typeof(_o23)) && Object.keys(_o23).length > 0) for (var _e65 in _o23) {
                                this.context.image._xmlHttp.setRequestHeader(_e65, _o23[_e65]);
                            }this.context.image._xmlHttp.send(_e64);
                        } else for (var _e66 = 0; _e66 < _a12; _e66++) {
                            this.plugins.image.setup_reader.call(this, _n29[_e66], this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.image.imageX.value, this.context.image._align, _e66, _a12 - 1);
                        }
                    }
                },
                onRender_imgInput: function onRender_imgInput() {
                    try {
                        this.plugins.image.submitAction.call(this, this.context.image.imgInputFile.files);
                    } catch (e) {
                        throw this.closeLoading(), Error('[SUNEDITOR.imageUpload.fail] cause : "' + e.message + '"');
                    }
                },
                setup_reader: function setup_reader(e, t, n, i, l, o, s) {
                    var a = new FileReader();
                    this.context.dialog.updateModal && (this.context.image._element.setAttribute("data-file-name", e.name), this.context.image._element.setAttribute("data-file-size", e.size)), a.onload = function (e, r, c) {
                        try {
                            e ? this.plugins.image.update_src.call(this, a.result, r, c) : this.plugins.image.create_image.call(this, a.result, t, n, i, l, c), o === s && this.closeLoading();
                        } catch (e) {
                            throw this.closeLoading(), Error('[SUNEDITOR.imageFileRendering.fail] cause : "' + e.message + '"');
                        }
                    }.bind(this, this.context.dialog.updateModal, this.context.image._element, e), a.readAsDataURL(e);
                },
                callBack_imgUpload: function callBack_imgUpload(e, t, n, i, l, o) {
                    if (4 === this.context.image._xmlHttp.readyState) {
                        if (200 !== this.context.image._xmlHttp.status) throw this.closeLoading(), Error("[SUNEDITOR.imageUpload.fail] status: " + this.context.image._xmlHttp.status + ", responseURL: " + this.context.image._xmlHttp.responseURL);{
                            var _a13 = JSON.parse(this.context.image._xmlHttp.responseText);
                            if (_a13.errorMessage) this.closeLoading(), this._imageUploadError(_a13.errorMessage, _a13.result) && s.open.call(this, _a13.errorMessage);else {
                                var _s12 = _a13.result;
                                for (var _a14, _r15 = 0, _c8 = _s12.length; _r15 < _c8; _r15++) {
                                    _a14 = {
                                        name: _s12[_r15].name,
                                        size: _s12[_r15].size
                                    }, l ? this.plugins.image.update_src.call(this, _s12[_r15].url, o, _a14) : this.plugins.image.create_image.call(this, _s12[_r15].url, e, t, n, i, _a14);
                                }
                            }
                            this.closeLoading();
                        }
                    }
                },
                onRender_imgUrl: function onRender_imgUrl() {
                    if (0 === this.context.image.imgUrlFile.value.trim().length) return !1;
                    try {
                        var _e67 = {
                            name: this.context.image.imgUrlFile.value.split("/").pop(),
                            size: 0
                        };
                        this.context.dialog.updateModal ? this.plugins.image.update_src.call(this, this.context.image.imgUrlFile.value, this.context.image._element, _e67) : this.plugins.image.create_image.call(this, this.context.image.imgUrlFile.value, this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.image.imageX.value + "px", this.context.image._align, _e67);
                    } catch (e) {
                        throw Error('[SUNEDITOR.imageURLRendering.fail] cause : "' + e.message + '"');
                    } finally {
                        this.closeLoading();
                    }
                },
                onRender_link: function onRender_link(e, t, n) {
                    if (t.trim().length > 0) {
                        var _i28 = this.util.createElement("A");
                        return _i28.href = /^https?:\/\//.test(t) ? t : "http://" + t, _i28.target = n ? "_blank" : "", _i28.setAttribute("data-image-link", "image"), e.setAttribute("data-image-link", t), _i28.appendChild(e), _i28;
                    }
                    return e;
                },
                setInputSize: function setInputSize(e) {
                    if (!this.context.dialog.updateModal) return;
                    var t = this.context.image;
                    t.proportion.checked && ("x" === e ? t.imageY.value = Math.round(t._element_h / t._element_w * t.imageX.value) : t.imageX.value = Math.round(t._element_w / t._element_h * t.imageY.value));
                },
                submit: function submit(e) {
                    var t = this.context.image,
                        n = this.plugins.image;
                    this.showLoading(), e.preventDefault(), e.stopPropagation(), t._linkValue = t.imgLink.value, t._altText = t.altText.value, t._align = t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value, t._captionChecked = t.captionCheckEl.checked, t._resizing && (t._proportionChecked = t.proportion.checked);
                    try {
                        this.context.dialog.updateModal && n.update_image.call(this, !1, !1), t.imgInputFile && t.imgInputFile.files.length > 0 ? n.onRender_imgInput.call(this) : t.imgUrlFile && t.imgUrlFile.value.trim().length > 0 ? n.onRender_imgUrl.call(this) : this.closeLoading();
                    } catch (e) {
                        throw this.closeLoading(), Error('[SUNEDITOR.image.submit.fail] cause : "' + e.message + '"');
                    } finally {
                        this.plugins.dialog.close.call(this);
                    }
                    return !1;
                },
                setImagesInfo: function setImagesInfo(e, t) {
                    var n = this._variable._imagesInfo;
                    var i = e.getAttribute("data-index"),
                        l = null,
                        o = "";
                    if (i) {
                        o = "update", i *= 1;
                        for (var _e68 = 0, _t49 = n.length; _e68 < _t49; _e68++) {
                            if (i === n[_e68].index) {
                                l = n[_e68];
                                break;
                            }
                        }l.src = e.src, l.name = e.getAttribute("data-file-name"), l.size = 1 * e.getAttribute("data-file-size");
                    } else o = "create", i = this._variable._imageIndex, this._variable._imageIndex++, e.setAttribute("data-index", i), e.setAttribute("data-file-name", t.name), e.setAttribute("data-file-size", t.size), l = {
                        src: e.src,
                        index: 1 * i,
                        name: t.name,
                        size: t.size
                    }, n.push(l);
                    l.delete = this.plugins.image.destroy.bind(this, e), l.select = function () {
                        e.scrollIntoView(!0), this._w.setTimeout(function () {
                            this.plugins.image.onModifyMode.call(this, e, this.plugins.resizing.call_controller_resize.call(this, e, "image"));
                        }.bind(this));
                    }.bind(this), e.setAttribute("origin-size", e.naturalWidth + "," + e.naturalHeight), e.setAttribute("data-origin", e.offsetWidth + "," + e.offsetHeight), this._imageUpload(e, i, o, l, --this.context.image._uploadFileLength < 0 ? 0 : this.context.image._uploadFileLength);
                },
                checkImagesInfo: function checkImagesInfo() {
                    var e = this.context.element.wysiwyg.getElementsByTagName("IMG"),
                        t = this._variable._imagesInfo;
                    if (e.length === t.length) return;
                    var n = this.plugins.image,
                        i = [],
                        l = [];
                    for (var _e69 = 0, _n32 = t.length; _e69 < _n32; _e69++) {
                        l[_e69] = t[_e69].index;
                    }for (var _t50, _o24 = 0, _s13 = e.length; _o24 < _s13; _o24++) {
                        _t50 = e[_o24], this.util.getParentElement(_t50, ".se-image-container") ? !_t50.getAttribute("data-index") || l.indexOf(1 * _t50.getAttribute("data-index")) < 0 ? (i.push(this._variable._imageIndex), _t50.removeAttribute("data-index"), n.setImagesInfo.call(this, _t50, {
                            name: _t50.getAttribute("data-file-name") || _t50.src.split("/").pop(),
                            size: _t50.getAttribute("data-file-size") || 0
                        })) : i.push(1 * _t50.getAttribute("data-index")) : (i.push(this._variable._imageIndex), n.onModifyMode.call(this, _t50, null), n.openModify.call(this, !0), n.update_image.call(this, !0, !1));
                    }for (var _e70, _n33 = 0; _n33 < t.length; _n33++) {
                        _e70 = t[_n33].index, i.indexOf(_e70) > -1 || (t.splice(_n33, 1), this._imageUpload(null, _e70, "delete", null, 0), _n33--);
                    }
                },
                _onload_image: function _onload_image(e, t) {
                    t && this.plugins.image.setImagesInfo.call(this, e, t);
                },
                create_image: function create_image(e, t, n, i, l, o) {
                    var s = this.context.image;
                    var a = this.util.createElement("IMG");
                    a.addEventListener("load", this.plugins.image._onload_image.bind(this, a, o)), a.src = e, a.setAttribute("data-align", l), a.alt = s._altText, (a = this.plugins.image.onRender_link.call(this, a, t, n)).setAttribute("data-rotate", "0"), s._resizing && (/\d+/.test(i) && ((i = 1 * i.match(/\d+/)[0]) > 0 ? a.style.width = i + "px" : i = ""), a.setAttribute("data-proportion", s._proportionChecked));
                    var r = this.plugins.resizing.set_cover.call(this, a),
                        c = this.plugins.resizing.set_container.call(this, r, "se-image-container");
                    s._captionChecked && (s._caption = this.plugins.resizing.create_caption.call(this), s._caption.setAttribute("contenteditable", !1), r.appendChild(s._caption)), r.style.margin = "none" !== l ? "auto" : "0", this.util.removeClass(c, s._floatClassRegExp), this.util.addClass(c, "float-" + l), s._resizing && /\d+/.test(i) || (this.context.resizing._resize_plugin = "image", s._element = a, s._cover = r, s._container = c, this.plugins.image.setAutoSize.call(this)), this.insertComponent(c);
                },
                update_image: function update_image(e, t) {
                    var n = this.context.image,
                        i = n._linkValue;
                    var l = n._element,
                        o = n._cover,
                        s = n._container,
                        a = !1;
                    var r = 1 * n.imageX.value !== l.offsetWidth || 1 * n.imageY.value !== l.offsetHeight;
                    if (null === o && (a = !0, l = n._element.cloneNode(!0), o = this.plugins.resizing.set_cover.call(this, l)), null === s && (o = o.cloneNode(!0), a = !0, s = this.plugins.resizing.set_container.call(this, o, "se-image-container")), a && (s.innerHTML = "", s.appendChild(o)), l.alt = n._altText, n._resizing && (l.setAttribute("data-proportion", n._proportionChecked), r && this.plugins.image.setSize.call(this, n.imageX.value, n.imageY.value)), n._captionChecked ? n._caption || (n._caption = this.plugins.resizing.create_caption.call(this), o.appendChild(n._caption)) : n._caption && (this.util.removeItem(n._caption), n._caption = null), n._align && "none" !== n._align ? o.style.margin = "auto" : o.style.margin = "0", this.util.removeClass(s, this.context.image._floatClassRegExp), this.util.addClass(s, "float-" + n._align), l.setAttribute("data-align", n._align), i.trim().length > 0) {
                        if (null !== n._linkElement) n._linkElement.href = i, n._linkElement.target = n.imgLinkNewWindowCheck.checked ? "_blank" : "", l.setAttribute("data-image-link", i);else {
                            var _e71 = this.plugins.image.onRender_link.call(this, l, i, this.context.image.imgLinkNewWindowCheck.checked);
                            o.insertBefore(_e71, n._caption);
                        }
                    } else if (null !== n._linkElement) {
                        var _e72 = l;
                        _e72.setAttribute("data-image-link", "");
                        var _t51 = _e72.cloneNode(!0);
                        o.removeChild(n._linkElement), o.insertBefore(_t51, n._caption), l = _t51;
                    }
                    if (a) {
                        var _e73 = this.util.isRangeFormatElement(n._element.parentNode) || this.util.isWysiwygDiv(n._element.parentNode) ? n._element : /^A$/i.test(n._element.parentNode.nodeName) ? n._element.parentNode : this.util.getFormatElement(n._element) || n._element;
                        _e73.parentNode.insertBefore(s, _e73), this.util.removeItem(_e73), l = s.querySelector("img");
                    }
                    if (!e && (/\d+/.test(l.style.height) || n._resizing && r || this.context.resizing._rotateVertical && n._captionChecked) && this.plugins.resizing.setTransformSize.call(this, l, null, null), e && this.plugins.image.setImagesInfo.call(this, l, {
                        name: l.getAttribute("data-file-name") || l.src.split("/").pop(),
                        size: l.getAttribute("data-file-size") || 0
                    }), t) {
                        this.plugins.image.init.call(this);
                        var _e74 = this.plugins.resizing.call_controller_resize.call(this, l, "image");
                        this.plugins.image.onModifyMode.call(this, l, _e74);
                    }
                    this.history.push();
                },
                update_src: function update_src(e, t, n) {
                    t.src = e, this._w.setTimeout(this.plugins.image.setImagesInfo.bind(this, t, n));
                },
                sizeRevert: function sizeRevert() {
                    var e = this.context.image;
                    e._origin_w && (e.imageX.value = e._element_w = e._origin_w, e.imageY.value = e._element_h = e._origin_h);
                },
                onModifyMode: function onModifyMode(e, t) {
                    var n = this.context.image;
                    n._linkElement = /^A$/i.test(e.parentNode.nodeName) ? e.parentNode : null, n._element = e, n._cover = this.util.getParentElement(e, "FIGURE"), n._container = this.util.getParentElement(e, ".se-image-container"), n._caption = this.util.getChildElement(n._cover, "FIGCAPTION"), n._align = e.getAttribute("data-align") || "none", t && (n._element_w = t.w, n._element_h = t.h, n._element_t = t.t, n._element_l = t.l);
                    var i = n._element.getAttribute("data-origin");
                    i ? (i = i.split(","), n._origin_w = 1 * i[0], n._origin_h = 1 * i[1]) : t && (n._origin_w = t.w, n._origin_h = t.h, n._element.setAttribute("data-origin", t.w + "," + t.h));
                },
                openModify: function openModify(e) {
                    var t = this.context.image;
                    t.imgUrlFile.value = t._element.src, t._altText = t.altText.value = t._element.alt, t._linkValue = t.imgLink.value = null === t._linkElement ? "" : t._linkElement.href, t.imgLinkNewWindowCheck.checked = t._linkElement && "_blank" === t._linkElement.target, t.modal.querySelector('input[name="suneditor_image_radio"][value="' + t._align + '"]').checked = !0, t._align = t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value, t._captionChecked = t.captionCheckEl.checked = !!t._caption, t._resizing && (t.proportion.checked = t._proportionChecked = "false" !== t._element.getAttribute("data-proportion"), t.imageX.value = t._element.offsetWidth, t.imageY.value = t._element.offsetHeight, t.imageX.disabled = !1, t.imageY.disabled = !1, t.proportion.disabled = !1), e || this.plugins.dialog.open.call(this, "image", !0);
                },
                on: function on(e) {
                    if (!e) {
                        var _e75 = this.context.image;
                        _e75.imageX.value = _e75._origin_w = _e75._defaultAuto ? "" : this.context.option.imageWidth, _e75.imageY.value = _e75._origin_h = "";
                    }
                },
                setSize: function setSize(e, t) {
                    var n = this.context.image;
                    n._element.style.width = /^\d+$/.test(e) ? e + "px" : e, n._element.style.height = /^\d+$/.test(t) ? t + "px" : t;
                },
                setAutoSize: function setAutoSize() {
                    var e = this.context.image;
                    this.plugins.resizing.resetTransform.call(this, e._element), this.plugins.image.cancelPercentAttr.call(this);
                    var t = (e._element.getAttribute("data-origin") || "").split(",");
                    e._element.style.maxWidth = "100%", e._element.style.width = t[0] ? t[0] + "px" : "100%", e._element.style.height = "", e._cover.style.width = "", e._cover.style.height = "";
                },
                setPercentSize: function setPercentSize(e) {
                    var t = this.context.image;
                    t._element.style.maxWidth = "100%", t._container.style.width = e, t._container.style.height = "", t._cover.style.width = "100%", t._cover.style.height = "", t._element.style.width = "100%", t._element.style.height = "", /100/.test(e) && (this.util.removeClass(t._container, this.context.image._floatClassRegExp), this.util.addClass(t._container, "float-center"));
                },
                cancelPercentAttr: function cancelPercentAttr() {
                    var e = this.context.image;
                    e._element.style.maxWidth = "none", e._cover.style.width = "", e._cover.style.height = "", e._container.style.width = "", e._container.style.height = "", this.util.removeClass(e._container, this.context.image._floatClassRegExp), this.util.addClass(e._container, "float-" + e._align);
                },
                resetAlign: function resetAlign() {
                    var e = this.context.image;
                    e._element.setAttribute("data-align", ""), e._align = "none", e._cover.style.margin = "0", this.util.removeClass(e._container, e._floatClassRegExp);
                },
                destroy: function destroy(e) {
                    var t = e || this.context.image._element,
                        n = this.util.getParentElement(t, ".se-image-container") || t,
                        i = 1 * t.getAttribute("data-index");
                    if (this.util.removeItem(n), this.plugins.image.init.call(this), this.controllersOff(), this.history.push(), i >= 0) {
                        var _e76 = this._variable._imagesInfo;
                        for (var _t52 = 0, _n34 = _e76.length; _t52 < _n34; _t52++) {
                            if (i === _e76[_t52].index) return _e76.splice(_t52, 1), void this._imageUpload(null, i, "delete", null, 0);
                        }
                    }
                },
                init: function init() {
                    var e = this.context.image;
                    e.imgInputFile && (e.imgInputFile.value = ""), e.imgUrlFile && (e.imgUrlFile.value = ""), e.altText.value = "", e.imgLink.value = "", e.imgLinkNewWindowCheck.checked = !1, e.modal.querySelector('input[name="suneditor_image_radio"][value="none"]').checked = !0, e.captionCheckEl.checked = !1, e._element = null, this.plugins.image.openTab.call(this, "init"), e._resizing && (e.proportion.checked = !1, e.imageX.value = e._defaultAuto ? "" : this.context.option.imageWidth, e.imageY.value = "", e.imageX.disabled = e._defaultAuto, e.imageY.disabled = !0, e.proportion.disabled = !0);
                }
            },
            video: {
                name: "video",
                add: function add(e) {
                    e.addModule([l, o]);
                    var t = e.context;
                    t.video = {
                        _container: null,
                        _cover: null,
                        _element: null,
                        _element_w: t.option.videoWidth,
                        _element_h: t.option.videoHeight,
                        _element_l: 0,
                        _element_t: 0,
                        _origin_w: t.option.videoWidth,
                        _origin_h: t.option.videoHeight,
                        _caption: null,
                        captionCheckEl: null,
                        _captionChecked: !1,
                        _proportionChecked: !0,
                        _align: "none",
                        _floatClassRegExp: "float\\-[a-z]+",
                        _resizing: t.option.videoResizing,
                        _youtubeQuery: t.option.youtubeQuery
                    };
                    var n = this.setDialog.call(e);
                    t.video.modal = n, t.video.focusElement = n.querySelector("._se_video_url"), t.video.captionCheckEl = n.querySelector("._se_video_check_caption"), n.querySelector(".se-btn-primary").addEventListener("click", this.submit.bind(e)), t.video.videoWidth = {}, t.video.videoHeight = {}, t.option.videoResizing && (t.video.videoWidth = n.querySelector("._se_video_size_x"), t.video.videoHeight = n.querySelector("._se_video_size_y"), t.video.proportion = n.querySelector("._se_video_check_proportion"), t.video.videoWidth.value = t.option.videoWidth, t.video.videoHeight.value = t.option.videoHeight, t.video.videoWidth.addEventListener("change", this.setInputSize.bind(e, "x")), t.video.videoHeight.addEventListener("change", this.setInputSize.bind(e, "y")), n.querySelector(".se-dialog-btn-revert").addEventListener("click", this.sizeRevert.bind(e))), t.dialog.modal.appendChild(n), n = null;
                },
                setDialog: function setDialog() {
                    var e = this.context.option,
                        t = this.lang,
                        n = this.util.createElement("DIV");
                    n.className = "se-dialog-content", n.style.display = "none";
                    var i = '<form class="editor_video">   <div class="se-dialog-header">       <button type="button" data-command="close" class="close" aria-label="Close" title="' + t.dialogBox.close + '">           <i aria-hidden="true" data-command="close" class="se-icon-cancel"></i>       </button>       <span class="se-modal-title">' + t.dialogBox.videoBox.title + '</span>   </div>   <div class="se-dialog-body">       <div class="se-dialog-form">           <label>' + t.dialogBox.videoBox.url + '</label>           <input class="se-input-form _se_video_url" type="text" />       </div>';
                    return e.videoResizing && (i += '   <div class="se-dialog-form">       <div class="se-dialog-size-text"><label class="size-w">' + t.dialogBox.width + '</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h">' + t.dialogBox.height + '</label></div>       <input type="number" class="se-input-control _se_video_size_x" /><label class="se-dialog-size-x">x</label><input type="number" class="se-input-control _se_video_size_y" />       <label><input type="checkbox" class="se-dialog-btn-check _se_video_check_proportion" checked/>&nbsp;' + t.dialogBox.proportion + '</label>       <button type="button" title="' + t.dialogBox.revertButton + '" class="se-btn se-dialog-btn-revert" style="float: right;"><i class="se-icon-revert"></i></button>   </div>'), i += '       <div class="se-dialog-form-footer">           <label><input type="checkbox" class="se-dialog-btn-check _se_video_check_caption" />&nbsp;' + t.dialogBox.caption + '</label>       </div>   </div>   <div class="se-dialog-footer">       <div>           <label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="none" checked>' + t.dialogBox.basic + '</label>           <label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="left">' + t.dialogBox.left + '</label>           <label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="center">' + t.dialogBox.center + '</label>           <label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="right">' + t.dialogBox.right + '</label>       </div>       <button type="submit" class="se-btn-primary" title="' + t.dialogBox.submitButton + '"><span>' + t.dialogBox.submitButton + "</span></button>   </div></form>", n.innerHTML = i, n;
                },
                setInputSize: function setInputSize(e) {
                    this.context.video.proportion.checked && ("x" === e ? this.context.video.videoHeight.value = Math.round(this.context.video._element_h / this.context.video._element_w * this.context.video.videoWidth.value) : this.context.video.videoWidth.value = Math.round(this.context.video._element_w / this.context.video._element_h * this.context.video.videoHeight.value));
                },
                submitAction: function submitAction() {
                    if (0 === this.context.video.focusElement.value.trim().length) return !1;
                    var e = this.context.video,
                        t = /^\d+$/.test(e.videoWidth.value) ? e.videoWidth.value : this.context.option.videoWidth,
                        n = /^\d+$/.test(e.videoHeight.value) ? e.videoHeight.value : this.context.option.videoHeight;
                    var i = null,
                        l = null,
                        o = null,
                        s = e.focusElement.value.trim();
                    if (e._align = e.modal.querySelector('input[name="suneditor_video_radio"]:checked').value, /^<iframe.*\/iframe>$/.test(s)) i = new this._w.DOMParser().parseFromString(s, "text/html").querySelector("iframe");else {
                        if (i = this.util.createElement("IFRAME"), /youtu\.?be/.test(s) && (s = s.replace("watch?v=", ""), /^\/\/.+\/embed\//.test(s) || (s = s.replace(s.match(/\/\/.+\//)[0], "//www.youtube.com/embed/")), e._youtubeQuery.length > 0)) if (/\?/.test(s)) {
                            var _t53 = s.split("?");
                            s = _t53[0] + "?" + e._youtubeQuery + "&" + _t53[1];
                        } else s += "?" + e._youtubeQuery;
                        i.src = s;
                    }
                    this.context.dialog.updateModal ? (e._element.src = i.src, o = e._container, l = this.util.getParentElement(e._element, "FIGURE"), i = e._element) : (i.frameBorder = "0", i.allowFullscreen = !0, i.onload = function () {
                        this.setAttribute("origin-size", this.offsetWidth + "," + this.offsetHeight), this.setAttribute("data-origin", this.offsetWidth + "," + this.offsetHeight), this.style.height = this.offsetHeight + "px";
                    }.bind(i), e._element = i, l = this.plugins.resizing.set_cover.call(this, i), o = this.plugins.resizing.set_container.call(this, l, "se-video-container"), this._variable._videosCnt++), e._cover = l, e._container = o;
                    var a = 1 * t !== i.offsetWidth || 1 * n !== i.offsetHeight;
                    e._resizing && (this.context.video._proportionChecked = e.proportion.checked, i.setAttribute("data-proportion", e._proportionChecked)), e._captionChecked ? e._caption || (e._caption = this.plugins.resizing.create_caption.call(this), l.appendChild(e._caption)) : e._caption && (this.util.removeItem(e._caption), e._caption = null), a && this.plugins.video.setSize.call(this, t, n), e._align && "none" !== e._align ? l.style.margin = "auto" : l.style.margin = "0", this.util.removeClass(o, this.context.video._floatClassRegExp), this.util.addClass(o, "float-" + e._align), i.setAttribute("data-align", e._align), this.context.dialog.updateModal ? (/\d+/.test(l.style.height) || e._resizing && a || this.context.resizing._rotateVertical && e._captionChecked) && this.plugins.resizing.setTransformSize.call(this, i, null, null) : this.insertComponent(o), this.history.push();
                },
                submit: function submit(e) {
                    this.showLoading(), e.preventDefault(), e.stopPropagation(), this.context.video._captionChecked = this.context.video.captionCheckEl.checked;
                    try {
                        this.plugins.video.submitAction.call(this);
                    } finally {
                        this.plugins.dialog.close.call(this), this.closeLoading();
                    }
                    return this.focus(), !1;
                },
                _update_videoCover: function _update_videoCover(e) {
                    var t = this.context.video;
                    e.frameBorder = "0", e.allowFullscreen = !0, e.onload = function () {
                        this.setAttribute("origin-size", this.offsetWidth + "," + this.offsetHeight), this.setAttribute("data-origin", this.offsetWidth + "," + this.offsetHeight), this.style.height = this.offsetHeight + "px";
                    }.bind(e);
                    var n = this.util.getParentElement(e, this.util.isComponent) || this.util.getParentElement(e, function (e) {
                        return this.isWysiwygDiv(e.parentNode);
                    }.bind(this.util));
                    t._element = e = e.cloneNode(!1);
                    var i = this.plugins.resizing.set_cover.call(this, e),
                        l = this.plugins.resizing.set_container.call(this, i, "se-video-container"),
                        o = n.getElementsByTagName("FIGCAPTION")[0];
                    if (o) {
                        var _e77 = this.plugins.resizing.create_caption.call(this);
                        _e77.innerHTML = o.innerHTML, i.appendChild(_e77);
                    }
                    var s = (e.getAttribute("origin-size") || "").split(","),
                        a = s[0] || this.context.option.videoWidth,
                        r = s[1] || this.context.option.videoHeight;
                    this.plugins.video.setSize.call(this, a, r), n.parentNode.insertBefore(l, n), this.util.removeItem(n);
                },
                sizeRevert: function sizeRevert() {
                    var e = this.context.video;
                    e._origin_w && (e.videoWidth.value = e._element_w = e._origin_w, e.videoHeight.value = e._element_h = e._origin_h);
                },
                onModifyMode: function onModifyMode(e, t) {
                    var n = this.context.video;
                    n._element = e, n._cover = this.util.getParentElement(e, "FIGURE"), n._container = this.util.getParentElement(e, ".se-video-container"), n._caption = this.util.getChildElement(n._cover, "FIGCAPTION"), n._align = e.getAttribute("data-align") || "none", n._element_w = t.w, n._element_h = t.h, n._element_t = t.t, n._element_l = t.l;
                    var i = n._element.getAttribute("data-origin");
                    i ? (i = i.split(","), n._origin_w = 1 * i[0], n._origin_h = 1 * i[1]) : (n._origin_w = t.w, n._origin_h = t.h, n._element.setAttribute("data-origin", t.w + "," + t.h));
                },
                openModify: function openModify(e) {
                    var t = this.context.video;
                    t.focusElement.value = t._element.src, t.videoWidth.value = t._element.offsetWidth, t.videoHeight.value = t._element.offsetHeight, t._captionChecked = t.captionCheckEl.checked = !!t._caption, t.modal.querySelector('input[name="suneditor_video_radio"][value="' + t._align + '"]').checked = !0, t._resizing && (t.proportion.checked = t._proportionChecked = "false" !== t._element.getAttribute("data-proportion"), t.proportion.disabled = !1), e || this.plugins.dialog.open.call(this, "video", !0);
                },
                checkVideosInfo: function checkVideosInfo() {
                    var e = this.context.element.wysiwyg.getElementsByTagName("IFRAME");
                    if (e.length === this._variable._videosCnt) return;
                    var t = this.plugins.video;
                    this._variable._videosCnt = e.length;
                    for (var _n35, _i29 = 0, _l21 = this._variable._videosCnt; _i29 < _l21; _i29++) {
                        _n35 = e[_i29], this.util.getParentElement(_n35, ".se-video-container") || t._update_videoCover.call(this, _n35);
                    }
                },
                setSize: function setSize(e, t) {
                    var n = this.context.video;
                    n._element.style.width = /^\d+$/.test(e) ? e + "px" : e, n._element.style.height = /^\d+$/.test(t) ? t + "px" : t;
                },
                setAutoSize: function setAutoSize() {
                    var e = this.context.video;
                    this.plugins.resizing.resetTransform.call(this, e._element), this.plugins.video.cancelPercentAttr.call(this);
                    var t = (e._element.getAttribute("data-origin") || "").split(","),
                        n = (t[0] || this.context.option.videoWidth) + "px",
                        i = (t[1] || this.context.option.videoHeight) + "px";
                    e._element.style.maxWidth = "100%", e._cover.style.width = e._element.style.width = n, e._cover.style.height = e._element.style.height = i;
                },
                setPercentSize: function setPercentSize(e) {
                    var t = this.context.video;
                    t._element.style.maxWidth = "100%", t._container.style.width = e, t._container.style.height = "", t._cover.style.width = "100%", t._cover.style.height = "", t._element.style.width = "100%", t._element.style.height = t._origin_h / t._origin_w * t._element.offsetWidth + "px", /100/.test(e) && (this.util.removeClass(t._container, this.context.video._floatClassRegExp), this.util.addClass(t._container, "float-center"));
                },
                cancelPercentAttr: function cancelPercentAttr() {
                    var e = this.context.video;
                    e._element.style.maxWidth = "none", e._cover.style.width = "", e._cover.style.height = "", e._container.style.width = "", e._container.style.height = "", this.util.removeClass(e._container, this.context.video._floatClassRegExp), this.util.addClass(e._container, "float-" + e._align);
                },
                resetAlign: function resetAlign() {
                    var e = this.context.video;
                    e._element.setAttribute("data-align", ""), e._align = "none", e._cover.style.margin = "0", this.util.removeClass(e._container, e._floatClassRegExp);
                },
                destroy: function destroy() {
                    this._variable._videosCnt--, this.util.removeItem(this.context.video._container), this.plugins.video.init.call(this), this.controllersOff(), this.history.push();
                },
                init: function init() {
                    var e = this.context.video;
                    e.focusElement.value = "", e.captionCheckEl.checked = !1, e._origin_w = this.context.option.videoWidth, e._origin_h = this.context.option.videoHeight, e.modal.querySelector('input[name="suneditor_video_radio"][value="none"]').checked = !0, e._resizing && (e.videoWidth.value = this.context.option.videoWidth, e.videoHeight.value = this.context.option.videoHeight, e.proportion.checked = !0, e.proportion.disabled = !0);
                }
            }
        },
            r = n("P6u4"),
            c = n.n(r);
        var d = {
            _d: document,
            _w: window,
            _onlyZeroWidthRegExp: new RegExp("^" + String.fromCharCode(8203) + "+$"),
            _tagConvertor: function _tagConvertor(e) {
                var t = {
                    b: "strong",
                    i: "em",
                    var: "em",
                    u: "ins",
                    strike: "del",
                    s: "del"
                };
                return e.replace(/(<\/?)(pre|blockquote|h[1-6]|ol|ul|dl|li|hr|b|strong|var|i|em|u|ins|s|strike|del|sub|sup)\b\s*(?:[^>^<]+)?\s*(?=>)/gi, function (e, n, i) {
                    return n + ("string" == typeof t[i] ? t[i] : i);
                });
            },
            zeroWidthSpace: "​",
            onlyZeroWidthSpace: function onlyZeroWidthSpace(e) {
                return "string" != typeof e && (e = e.textContent), "" === e || this._onlyZeroWidthRegExp.test(e);
            },
            getXMLHttpRequest: function getXMLHttpRequest() {
                if (!this._w.ActiveXObject) return this._w.XMLHttpRequest ? new XMLHttpRequest() : null;
                try {
                    return new ActiveXObject("Msxml2.XMLHTTP");
                } catch (e) {
                    try {
                        return new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) {
                        return null;
                    }
                }
            },
            createElement: function createElement(e) {
                return this._d.createElement(e);
            },
            createTextNode: function createTextNode(e) {
                return this._d.createTextNode(e || "");
            },
            getIncludePath: function getIncludePath(e, t) {
                var n = "";
                var i = [],
                    l = "js" === t ? "script" : "link",
                    o = "js" === t ? "src" : "href";
                var s = "(?:";
                for (var _t54 = 0, _n36 = e.length; _t54 < _n36; _t54++) {
                    s += e[_t54] + (_t54 < _n36 - 1 ? "|" : ")");
                }var a = new this._w.RegExp("(^|.*[\\/])" + s + "(\\.[^\\/]+)?." + t + "(?:\\?.*|;.*)?$", "i"),
                    r = new this._w.RegExp(".+\\." + t + "(?:\\?.*|;.*)?$", "i");
                for (var _e78 = this._d.getElementsByTagName(l), _t55 = 0; _t55 < _e78.length; _t55++) {
                    r.test(_e78[_t55][o]) && i.push(_e78[_t55]);
                }for (var _e79 = 0; _e79 < i.length; _e79++) {
                    var _t56 = i[_e79][o].match(a);
                    if (_t56) {
                        n = _t56[0];
                        break;
                    }
                }
                if ("" === n && (n = i.length > 0 ? i[0][o] : ""), -1 === n.indexOf(":/") && "//" !== n.slice(0, 2) && (n = 0 === n.indexOf("/") ? location.href.match(/^.*?:\/\/[^\/]*/)[0] + n : location.href.match(/^[^\?]*\/(?:)/)[0] + n), !n) throw "[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +" + name + ", extension: " + t + ")";
                return n;
            },
            getPageStyle: function getPageStyle() {
                var e = "";
                var t = this._d.styleSheets;
                for (var _n37, _i30 = 0, _l22 = t.length; _i30 < _l22; _i30++) {
                    try {
                        _n37 = t[_i30].cssRules;
                    } catch (e) {
                        continue;
                    }
                    for (var _t57 = 0, _i31 = _n37.length; _t57 < _i31; _t57++) {
                        if (typeof _n37[_t57].cssText === 'string') e += _n37[_t57].cssText;
                    }
                }
                return e;
            },
            convertContentsForEditor: function convertContentsForEditor(e) {
                var t = void 0,
                    n = void 0,
                    i = "";
                e = e.trim();
                for (var _l23 = 0, _o25 = (t = this._d.createRange().createContextualFragment(e).childNodes).length; _l23 < _o25; _l23++) {
                    if (n = t[_l23].outerHTML || t[_l23].textContent, 3 === t[_l23].nodeType) {
                        var _e80 = n.split(/\n/g);
                        var _t58 = "";
                        for (var _n38 = 0, _l24 = _e80.length; _n38 < _l24; _n38++) {
                            (_t58 = _e80[_n38].trim()).length > 0 && (i += "<P>" + _t58 + "</p>");
                        }
                    } else i += n;
                }var l = {
                    "&": "&amp;",
                    " ": "&nbsp;",
                    "'": "&quot;",
                    "<": "&lt;",
                    ">": "&gt;"
                };
                return e = e.replace(/&|\u00A0|'|<|>/g, function (e) {
                    return "string" == typeof l[e] ? l[e] : e;
                }), 0 === i.length && (i = "<p>" + (e.length > 0 ? e : "<br>") + "</p>"), this._tagConvertor(i.replace(this._deleteExclusionTags, ""));
            },
            convertHTMLForCodeView: function convertHTMLForCodeView(e) {
                var t = "";
                var n = this._w.RegExp;
                return function e(i) {
                    var l = i.childNodes;
                    for (var _i32, _o26 = 0, _s14 = l.length; _o26 < _s14; _o26++) {
                        if (_i32 = l[_o26], /^(BLOCKQUOTE|TABLE|THEAD|TBODY|TR|OL|UL|FIGCAPTION)$/i.test(_i32.nodeName)) {
                            _i32.innerHTML = _i32.innerHTML.replace(/\n/g, "");
                            var _l25 = _i32.nodeName.toLowerCase();
                            t += _i32.outerHTML.match(n("<" + _l25 + "[^>]*>", "i"))[0] + "\n", e(_i32), t += "</" + _l25 + ">\n";
                        } else t += 3 === _i32.nodeType ? /^\n+$/.test(_i32.data) ? "" : _i32.data : _i32.outerHTML + "\n";
                    }
                }(e), t;
            },
            isWysiwygDiv: function isWysiwygDiv(e) {
                return !(!e || 1 !== e.nodeType || !this.hasClass(e, "se-wrapper-wysiwyg"));
            },
            isFormatElement: function isFormatElement(e) {
                return !(!e || 1 !== e.nodeType || !/^(P|DIV|H[1-6]|LI|TH|TD)$/i.test(e.nodeName) || this.isComponent(e) || this.isWysiwygDiv(e));
            },
            isRangeFormatElement: function isRangeFormatElement(e) {
                return !(!e || 1 !== e.nodeType || !/^(BLOCKQUOTE|OL|UL|PRE|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD)$/i.test(e.nodeName));
            },
            isComponent: function isComponent(e) {
                return e && (/se-component/.test(e.className) || /^(TABLE|HR)$/.test(e.nodeName));
            },
            getFormatElement: function getFormatElement(e, t) {
                if (!e) return null;
                for (t || (t = function t() {
                    return !0;
                }); e;) {
                    if (this.isWysiwygDiv(e)) return null;
                    if (this.isRangeFormatElement(e) && e.firstElementChild, this.isFormatElement(e) && t(e)) return e;
                    e = e.parentNode;
                }
                return null;
            },
            getRangeFormatElement: function getRangeFormatElement(e, t) {
                if (!e) return null;
                for (t || (t = function t() {
                    return !0;
                }); e;) {
                    if (this.isWysiwygDiv(e)) return null;
                    if (this.isRangeFormatElement(e) && !/^(THEAD|TBODY|TR)$/i.test(e.nodeName) && t(e)) return e;
                    e = e.parentNode;
                }
                return null;
            },
            getArrayIndex: function getArrayIndex(e, t) {
                var n = -1;
                for (var _i33 = 0, _l26 = e.length; _i33 < _l26; _i33++) {
                    if (e[_i33] === t) {
                        n = _i33;
                        break;
                    }
                }return n;
            },
            nextIdx: function nextIdx(e, t) {
                var n = this.getArrayIndex(e, t);
                return -1 === n ? -1 : n + 1;
            },
            prevIdx: function prevIdx(e, t) {
                var n = this.getArrayIndex(e, t);
                return -1 === n ? -1 : n - 1;
            },
            getPositionIndex: function getPositionIndex(e) {
                var t = 0;
                for (; e = e.previousSibling;) {
                    t += 1;
                }return t;
            },
            getNodePath: function getNodePath(e, t) {
                var n = [];
                var i = !0;
                return this.getParentElement(e, function (e) {
                    return e === t && (i = !1), i && !this.isWysiwygDiv(e) && n.push(e), !1;
                }.bind(this)), n.map(this.getPositionIndex).reverse();
            },
            getNodeFromPath: function getNodeFromPath(e, t) {
                var n = void 0,
                    i = t;
                for (var _t59 = 0, _l27 = e.length; _t59 < _l27 && 0 !== (n = i.childNodes).length; _t59++) {
                    i = n.length <= e[_t59] ? n[n.length - 1] : n[e[_t59]];
                }return i;
            },
            isList: function isList(e) {
                return e && /^(OL|UL)$/i.test("string" == typeof e ? e : e.nodeName);
            },
            isListCell: function isListCell(e) {
                return e && /^LI$/i.test("string" == typeof e ? e : e.nodeName);
            },
            isTable: function isTable(e) {
                return e && /^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test("string" == typeof e ? e : e.nodeName);
            },
            isCell: function isCell(e) {
                return e && /^(TD|TH)$/i.test("string" == typeof e ? e : e.nodeName);
            },
            isBreak: function isBreak(e) {
                return e && /^BR$/i.test("string" == typeof e ? e : e.nodeName);
            },
            getListChildren: function getListChildren(e, t) {
                var n = [];
                return e && e.children && 0 !== e.children.length ? (t = t || function () {
                    return !0;
                }, function i(l) {
                    (e !== l && t(l) || /^BR$/i.test(e.nodeName)) && n.push(l);
                    for (var _e81 = 0, _t60 = l.children.length; _e81 < _t60; _e81++) {
                        i(l.children[_e81]);
                    }
                }(e), n) : n;
            },
            getListChildNodes: function getListChildNodes(e, t) {
                var n = [];
                return e && 0 !== e.childNodes.length ? (t = t || function () {
                    return !0;
                }, function i(l) {
                    (e !== l && t(l) || /^BR$/i.test(e.nodeName)) && n.push(l);
                    for (var _e82 = 0, _t61 = l.childNodes.length; _e82 < _t61; _e82++) {
                        i(l.childNodes[_e82]);
                    }
                }(e), n) : n;
            },
            getElementDepth: function getElementDepth(e) {
                var t = 0;
                for (e = e.parentNode; e && !this.isWysiwygDiv(e);) {
                    t += 1, e = e.parentNode;
                }return t;
            },
            getParentElement: function getParentElement(e, t) {
                var n = void 0;
                if ("function" == typeof t) n = t;else {
                    var _e83 = void 0;
                    /^\./.test(t) ? (_e83 = "className", t = t.split(".")[1]) : /^#/.test(t) ? (_e83 = "id", t = "^" + t.split("#")[1] + "$") : /^:/.test(t) ? (_e83 = "name", t = "^" + t.split(":")[1] + "$") : (_e83 = "nodeName", t = "^" + t + "$");
                    var _i34 = new this._w.RegExp(t, "i");
                    n = function n(t) {
                        return _i34.test(t[_e83]);
                    };
                }
                for (; e && !n(e);) {
                    if (this.isWysiwygDiv(e)) return null;
                    e = e.parentNode;
                }
                return e;
            },
            getChildElement: function getChildElement(e, t, n) {
                var i = void 0;
                if ("function" == typeof t) i = t;else {
                    var _e84 = void 0;
                    /^\./.test(t) ? (_e84 = "className", t = t.split(".")[1]) : /^#/.test(t) ? (_e84 = "id", t = "^" + t.split("#")[1] + "$") : /^:/.test(t) ? (_e84 = "name", t = "^" + t.split(":")[1] + "$") : (_e84 = "nodeName", t = "^" + t + "$");
                    var _n39 = new this._w.RegExp(t, "i");
                    i = function i(t) {
                        return _n39.test(t[_e84]);
                    };
                }
                var l = this.getListChildNodes(e, function (e) {
                    return i(e);
                });
                return l[n ? l.length - 1 : 0];
            },
            getEdgeChildNodes: function getEdgeChildNodes(e, t) {
                if (e) {
                    for (t || (t = e); e && 1 === e.nodeType && e.childNodes.length > 0 && !this.isBreak(e);) {
                        e = e.firstChild;
                    }for (; t && 1 === t.nodeType && t.childNodes.length > 0 && !this.isBreak(t);) {
                        t = t.lastChild;
                    }return {
                        sc: e,
                        ec: t || e
                    };
                }
            },
            getOffset: function getOffset(e) {
                var t = 0,
                    n = 0,
                    i = 3 === e.nodeType ? e.parentElement : e;
                var l = this.getParentElement(e, this.isWysiwygDiv.bind(this));
                for (; i && !this.hasClass(i, "se-container") && i !== l;) {
                    t += i.offsetLeft, n += i.offsetTop, i = i.offsetParent;
                }return {
                    left: t,
                    top: n - l.scrollTop
                };
            },
            getOverlapRangeAtIndex: function getOverlapRangeAtIndex(e, t, n, i) {
                if (e <= i ? t < n : t > n) return 0;
                var l = (e > n ? e : n) - (t < i ? t : i);
                return (l < 0 ? -1 * l : l) + 1;
            },
            changeTxt: function changeTxt(e, t) {
                e && t && (e.textContent = t);
            },
            hasClass: function hasClass(e, t) {
                if (e) return e.classList.contains(t.trim());
            },
            addClass: function addClass(e, t) {
                if (!e) return;
                new this._w.RegExp("(\\s|^)" + t + "(\\s|$)").test(e.className) || (e.className += " " + t);
            },
            removeClass: function removeClass(e, t) {
                if (!e) return;
                var n = new this._w.RegExp("(\\s|^)" + t + "(\\s|$)");
                e.className = e.className.replace(n, " ").trim();
            },
            toggleClass: function toggleClass(e, t) {
                if (!e) return;
                var n = new this._w.RegExp("(\\s|^)" + t + "(\\s|$)");
                n.test(e.className) ? e.className = e.className.replace(n, " ").trim() : e.className += " " + t;
            },
            removeItem: function removeItem(e) {
                if (e) try {
                    e.remove();
                } catch (t) {
                    e.parentNode.removeChild(e);
                }
            },
            removeItemAllParents: function removeItemAllParents(e, t) {
                if (!e) return null;
                var n = null;
                return t || (t = function t(e) {
                    var t = e.textContent.trim();
                    return 0 === t.length || /^(\n|\u200B)+$/.test(t);
                }), function e(i) {
                    if (!d.isWysiwygDiv(i)) {
                        var _l28 = i.parentNode;
                        _l28 && t(i) && (n = {
                            sc: i.previousElementSibling,
                            ec: i.nextElementSibling
                        }, d.removeItem(i), e(_l28));
                    }
                }(e), n;
            },
            removeEmptyNode: function removeEmptyNode(e) {
                var t = this;
                !function n(i) {
                    if (i === e || !t.onlyZeroWidthSpace(i.textContent) || /^BR$/i.test(i.nodeName) || i.firstChild && /^BR$/i.test(i.firstChild.nodeName) || t.isComponent(i)) {
                        var _e85 = i.children;
                        for (var _i35 = 0, _l29 = _e85.length, _o27 = 0; _i35 < _l29; _i35++) {
                            _e85[_i35 + _o27] && !t.isComponent(_e85[_i35 + _o27]) && (_o27 += n(_e85[_i35 + _o27]));
                        }
                    } else if (i.parentNode) return i.parentNode.removeChild(i), -1;
                    return 0;
                }(e), 0 === e.childNodes.length && (e.innerHTML = "<br>");
            },
            isIgnoreNodeChange: function isIgnoreNodeChange(e) {
                return 3 !== e.nodeType && !/^(span|font|b|strong|var|i|em|u|ins|s|strike|del|sub|sup|mark)$/i.test(e.nodeName);
            },
            cleanHTML: function cleanHTML(e) {
                var t = new this._w.RegExp("^(meta|script|link|style|[a-z]+:[a-z]+)$", "i"),
                    n = this._d.createRange().createContextualFragment(e).children;
                var i = "";
                for (var _e86 = 0, _l30 = n.length; _e86 < _l30; _e86++) {
                    t.test(n[_e86].nodeName) || (i += n[_e86].outerHTML);
                }return i = i.replace(/<([a-zA-Z]+\:[a-zA-Z]+|script|style).*>(\n|.)*<\/([a-zA-Z]+\:[a-zA-Z]+|script|style)>/g, "").replace(/(<[a-zA-Z0-9]+)[^>]*(?=>)/g, function (e, t) {
                    var n = e.match(/((?:colspan|rowspan|target|href|src|data-file-size|data-file-name|data-origin|origin-size)\s*=\s*"[^"]*")/gi);
                    if (n) for (var _e87 = 0, _i36 = n.length; _e87 < _i36; _e87++) {
                        t += " " + n[_e87];
                    }return t;
                }).replace(/<\/?(span[^>^<]*)>/g, "").replace(this._deleteExclusionTags, ""), this._tagConvertor(i || e);
            },
            _deleteExclusionTags: function () {
                var e = "br|p|div|pre|blockquote|h[1-6]|ol|ul|dl|li|hr|figure|figcaption|img|iframe|audio|video|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|mark".split("|");
                var t = "<\\/?(";
                for (var _n40 = 0, _i37 = e.length; _n40 < _i37; _n40++) {
                    t += "(?!\\b" + e[_n40] + "\\b)";
                }return t += "[^>^<])+>", new RegExp(t, "g");
            }()
        };
        var u = d,
            h = {
            init: function init(e, t) {
                "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && (t = {});
                var n = document;
                this._initOptions(e, t);
                var i = n.createElement("DIV");
                i.className = "sun-editor", e.id && (i.id = "suneditor_" + e.id);
                var l = n.createElement("DIV");
                l.className = "se-container";
                var o = this._createToolBar(n, t.buttonList, t.plugins, t.lang),
                    s = n.createElement("DIV");
                s.className = "se-arrow";
                var a = n.createElement("DIV");
                a.className = "se-toolbar-sticky-dummy";
                var r = n.createElement("DIV");
                r.className = "se-wrapper";
                var c = n.createElement("DIV");
                c.setAttribute("contenteditable", !0), c.setAttribute("scrolling", "auto"), c.className = "se-wrapper-inner se-wrapper-wysiwyg sun-editor-editable", c.style.display = "block", c.innerHTML = u.convertContentsForEditor(e.value);
                var d = n.createElement("TEXTAREA");
                d.className = "se-wrapper-inner se-wrapper-code", d.style.display = "none";
                var h = this._initElements(t, i, o.element, s, c, d),
                    g = h.resizingBar,
                    p = h.navigation,
                    m = h.charCounter,
                    f = n.createElement("DIV");
                f.className = "se-loading-box sun-editor-common", f.innerHTML = '<div class="se-loading-effect"></div>';
                var _ = n.createElement("DIV");
                return _.className = "se-resizing-back", r.appendChild(c), r.appendChild(d), l.appendChild(o.element), l.appendChild(a), l.appendChild(r), l.appendChild(_), l.appendChild(f), g && l.appendChild(g), i.appendChild(l), {
                    constructed: {
                        _top: i,
                        _relative: l,
                        _toolBar: o.element,
                        _editorArea: r,
                        _wysiwygArea: c,
                        _codeArea: d,
                        _resizingBar: g,
                        _navigation: p,
                        _charCounter: m,
                        _loading: f,
                        _resizeBack: _,
                        _stickyDummy: a,
                        _arrow: s
                    },
                    options: t,
                    plugins: o.plugins,
                    pluginCallButtons: o.pluginCallButtons
                };
            },
            _setOptions: function _setOptions(e, t, n, i) {
                this._initOptions(t.element.originElement, e);
                var l = t.element,
                    o = l.relative,
                    s = !!e.buttonList || e.mode !== i.mode,
                    a = !!e.plugins,
                    r = this._createToolBar(document, s ? e.buttonList : i.buttonList, a ? e.plugins : n, e.lang),
                    c = document.createElement("DIV");
                c.className = "se-arrow", s && (o.insertBefore(r.element, l.toolbar), o.removeChild(l.toolbar), l.toolbar = r.element, l._arrow = c);
                var d = this._initElements(e, l.topArea, s ? r.element : l.toolbar, c, l.wysiwyg, l.code);
                return l.resizingBar && o.removeChild(l.resizingBar), d.resizingBar && o.appendChild(d.resizingBar), l.resizingBar = d.resizingBar, l.navigation = d.navigation, l.charCounter = d.charCounter, {
                    callButtons: s ? r.pluginCallButtons : null,
                    plugins: s || a ? r.plugins : null
                };
            },
            _initElements: function _initElements(e, t, n, i, l, o) {
                t.style.width = e.width, t.style.minWidth = e.minWidth, t.style.maxWidth = e.maxWidth, t.style.display = e.display, /inline/i.test(e.mode) ? (n.className += " se-toolbar-inline", n.style.width = e.toolbarWidth) : /balloon/i.test(e.mode) && (n.className += " se-toolbar-balloon", n.appendChild(i)), l.style.height = e.height, l.style.minHeight = e.minHeight, l.style.maxHeight = e.maxHeight, o.style.height = e.height, o.style.minHeight = e.minHeight, o.style.maxHeight = e.maxHeight;
                var s = null,
                    a = null,
                    r = null;
                if (e.resizingBar && ((s = document.createElement("DIV")).className = "se-resizing-bar sun-editor-common", (a = document.createElement("DIV")).className = "se-navigation sun-editor-common", s.appendChild(a), e.charCounter)) {
                    var _t62 = document.createElement("DIV");
                    if (_t62.className = "se-char-counter-wrapper", (r = document.createElement("SPAN")).className = "se-char-counter", r.textContent = "0", _t62.appendChild(r), e.maxCharCount > 0) {
                        var _n41 = document.createElement("SPAN");
                        _n41.textContent = " / " + e.maxCharCount, _t62.appendChild(_n41);
                    }
                    s.appendChild(_t62);
                }
                return {
                    resizingBar: s,
                    navigation: a,
                    charCounter: r
                };
            },
            _initOptions: function _initOptions(element, options) {
                options.lang = options.lang || _defaultLang;

                options.mode = options.mode || 'classic';
                options.toolbarWidth = options.toolbarWidth ? /^\d+$/.test(options.toolbarWidth) ? options.toolbarWidth + 'px' : options.toolbarWidth : 'auto';
                options.stickyToolbar = /balloon/i.test(options.mode) ? -1 : options.stickyToolbar === undefined ? 0 : /^\d+/.test(options.stickyToolbar) ? options.stickyToolbar.toString().match(/\d+/)[0] * 1 : -1;

                options.resizingBar = options.resizingBar === undefined ? /inline|balloon/i.test(options.mode) ? false : true : options.resizingBar;
                options.showPathLabel = !options.resizingBar ? false : typeof options.showPathLabel === 'boolean' ? options.showPathLabel : true;
                options.maxCharCount = /^\d+$/.test(options.maxCharCount) && options.maxCharCount > -1 ? options.maxCharCount * 1 : null;
                options.charCounter = options.maxCharCount > 0 ? true : typeof options.charCounter === 'boolean' ? options.charCounter : false;

                options.popupDisplay = options.popupDisplay || 'full';
                options.display = options.display || (element.style.display === 'none' || !element.style.display ? 'block' : element.style.display);

                options.width = options.width ? /^\d+$/.test(options.width) ? options.width + 'px' : options.width : element.clientWidth ? element.clientWidth + 'px' : '100%';
                options.minWidth = (/^\d+$/.test(options.minWidth) ? options.minWidth + 'px' : options.minWidth) || '';
                options.maxWidth = (/^\d+$/.test(options.maxWidth) ? options.maxWidth + 'px' : options.maxWidth) || '';
                options.height = options.height ? /^\d+$/.test(options.height) ? options.height + 'px' : options.height : element.clientHeight ? element.clientHeight + 'px' : 'auto';
                options.minHeight = (/^\d+$/.test(options.minHeight) ? options.minHeight + 'px' : options.minHeight) || '';
                options.maxHeight = (/^\d+$/.test(options.maxHeight) ? options.maxHeight + 'px' : options.maxHeight) || '';

                options.font = options.font || null;
                options.fontSize = options.fontSize || null;
                options.formats = options.formats || null;
                options.colorList = options.colorList || null;

                options.imageResizing = options.imageResizing === undefined ? true : options.imageResizing;
                options.imageWidth = options.imageWidth && /\d+/.test(options.imageWidth) ? options.imageWidth.toString().match(/\d+/)[0] : 'auto';
                options.imageFileInput = options.imageFileInput === undefined ? true : options.imageFileInput;
                options.imageUrlInput = options.imageUrlInput === undefined || !options.imageFileInput ? true : options.imageUrlInput;
                options.imageUploadHeader = options.imageUploadHeader || null;
                options.imageUploadUrl = options.imageUploadUrl || null;
                options.imageUploadSizeLimit = /\d+/.test(options.imageUploadSizeLimit) ? options.imageUploadSizeLimit.toString().match(/\d+/)[0] * 1 : null;

                options.videoResizing = options.videoResizing === undefined ? true : options.videoResizing;
                options.videoWidth = options.videoWidth && /\d+/.test(options.videoWidth) ? options.videoWidth.toString().match(/\d+/)[0] : 560;
                options.videoHeight = options.videoHeight && /\d+/.test(options.videoHeight) ? options.videoHeight.toString().match(/\d+/)[0] : 315;
                options.youtubeQuery = (options.youtubeQuery || '').replace('?', '');

                options.buttonList = options.buttonList || [['undo', 'redo'], ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'], ['removeFormat'], ['outdent', 'indent'], ['fullScreen', 'showBlocks', 'codeView'], ['preview', 'print']];
            },
            _defaultButtons: function _defaultButtons(e) {
                return {
                    bold: ["_se_command_bold", e.toolbar.bold + " (CTRL+B)", "STRONG", "", '<i class="se-icon-bold"></i>'],
                    underline: ["_se_command_underline", e.toolbar.underline + " (CTRL+U)", "INS", "", '<i class="se-icon-underline"></i>'],
                    italic: ["_se_command_italic", e.toolbar.italic + " (CTRL+I)", "EM", "", '<i class="se-icon-italic"></i>'],
                    strike: ["_se_command_strike", e.toolbar.strike + " (CTRL+SHIFT+S)", "DEL", "", '<i class="se-icon-strokethrough"></i>'],
                    subscript: ["_se_command_subscript", e.toolbar.subscript, "SUB", "", '<i class="se-icon-subscript"></i>'],
                    superscript: ["_se_command_superscript", e.toolbar.superscript, "SUP", "", '<i class="se-icon-superscript"></i>'],
                    removeFormat: ["", e.toolbar.removeFormat, "removeFormat", "", '<i class="se-icon-erase"></i>'],
                    indent: ["", e.toolbar.indent + " (CTRL+])", "indent", "", '<i class="se-icon-indent-right"></i>'],
                    outdent: ["_se_command_outdent", e.toolbar.outdent + " (CTRL+[)", "outdent", "", '<i class="se-icon-indent-left"></i>'],
                    fullScreen: ["code-view-enabled", e.toolbar.fullScreen, "fullScreen", "", '<i class="se-icon-expansion"></i>'],
                    showBlocks: ["", e.toolbar.showBlocks, "showBlocks", "", '<i class="se-icon-showBlocks"></i>'],
                    codeView: ["code-view-enabled", e.toolbar.codeView, "codeView", "", '<i class="se-icon-code-view"></i>'],
                    undo: ["_se_command_undo", e.toolbar.undo + " (CTRL+Z)", "undo", "", '<i class="se-icon-undo"></i>', !0],
                    redo: ["_se_command_redo", e.toolbar.redo + " (CTRL+Y / CTRL+SHIFT+Z)", "redo", "", '<i class="se-icon-redo"></i>', !0],
                    preview: ["", e.toolbar.preview, "preview", "", '<i class="se-icon-preview"></i>'],
                    print: ["", e.toolbar.print, "print", "", '<i class="se-icon-print"></i>'],
                    save: ["_se_command_save", e.toolbar.save, "save", "", '<i class="se-icon-save"></i>', !0],
                    font: ["se-btn-select se-btn-tool-font _se_command_font_family", e.toolbar.font, "font", "submenu", '<span class="txt">' + e.toolbar.font + '</span><i class="se-icon-arrow-down"></i>'],
                    formatBlock: ["se-btn-select se-btn-tool-format", e.toolbar.formats, "formatBlock", "submenu", '<span class="txt _se_command_format">' + e.toolbar.formats + '</span><i class="se-icon-arrow-down"></i>'],
                    fontSize: ["se-btn-select se-btn-tool-size", e.toolbar.fontSize, "fontSize", "submenu", '<span class="txt _se_command_font_size">' + e.toolbar.fontSize + '</span><i class="se-icon-arrow-down"></i>'],
                    fontColor: ["", e.toolbar.fontColor, "fontColor", "submenu", '<i class="se-icon-fontColor"></i>'],
                    hiliteColor: ["", e.toolbar.hiliteColor, "hiliteColor", "submenu", '<i class="se-icon-hiliteColor"></i>'],
                    align: ["se-btn-align", e.toolbar.align, "align", "submenu", '<i class="se-icon-align-left _se_command_align"></i>'],
                    list: ["_se_command_list", e.toolbar.list, "list", "submenu", '<i class="se-icon-list-number"></i>'],
                    horizontalRule: ["btn_line", e.toolbar.horizontalRule, "horizontalRule", "submenu", '<i class="se-icon-hr"></i>'],
                    table: ["", e.toolbar.table, "table", "submenu", '<i class="se-icon-grid"></i>'],
                    template: ["", e.toolbar.template, "template", "submenu", '<i class="se-icon-template"></i>'],
                    link: ["", e.toolbar.link, "link", "dialog", '<i class="se-icon-link"></i>'],
                    image: ["", e.toolbar.image, "image", "dialog", '<i class="se-icon-image"></i>'],
                    video: ["", e.toolbar.video, "video", "dialog", '<i class="se-icon-video"></i>']
                };
            },
            _createModuleGroup: function _createModuleGroup(e) {
                var t = u.createElement("DIV");
                t.className = "se-btn-module" + (e ? "" : " se-btn-module-border");
                var n = u.createElement("UL");
                return n.className = "se-menu-list", t.appendChild(n), {
                    div: t,
                    ul: n
                };
            },
            _createButton: function _createButton(e, t, n, i, l, o) {
                var s = u.createElement("LI"),
                    a = u.createElement("BUTTON");
                return a.setAttribute("type", "button"), a.setAttribute("class", "se-btn" + (e ? " " + e : "") + " se-tooltip"), a.setAttribute("data-command", n), a.setAttribute("data-display", i), l += '<span class="se-tooltip-inner"><span class="se-tooltip-text">' + t + "</span></span>", o && a.setAttribute("disabled", !0), a.innerHTML = l, s.appendChild(a), {
                    li: s,
                    button: a
                };
            },
            _createToolBar: function _createToolBar(e, t, n, i) {
                var l = e.createElement("DIV");
                l.className = "se-toolbar-separator-vertical";
                var o = e.createElement("DIV");
                o.className = "se-toolbar sun-editor-common";
                var s = this._defaultButtons(i),
                    a = {},
                    r = {};
                if (n) {
                    var _e88 = n.length ? n : Object.keys(n).map(function (e) {
                        return n[e];
                    });
                    for (var _t63 = 0, _n42 = _e88.length; _t63 < _n42; _t63++) {
                        r[_e88[_t63].name] = _e88[_t63];
                    }
                }
                var c = null,
                    d = null,
                    u = null,
                    h = null,
                    g = "",
                    p = !1;
                var m = 1 === t.length;
                for (var _n43 = 0; _n43 < t.length; _n43++) {
                    var _i38 = t[_n43];
                    if (u = this._createModuleGroup(m), "object" == (typeof _i38 === "undefined" ? "undefined" : _typeof(_i38))) {
                        for (var _e89 = 0; _e89 < _i38.length; _e89++) {
                            "object" == _typeof(d = _i38[_e89]) ? "function" == typeof d.add ? (c = s[g = d.name], r[g] = d) : (g = d.name, c = [d.buttonClass, d.title, d.dataCommand, d.dataDisplay, d.innerHTML]) : (c = s[d], g = d), h = this._createButton(c[0], c[1], c[2], c[3], c[4], c[5]), u.ul.appendChild(h.li), r[g] && (a[g] = h.button);
                        }p && o.appendChild(l.cloneNode(!1)), o.appendChild(u.div), p = !0;
                    } else if (/^\/$/.test(_i38)) {
                        var _t64 = e.createElement("DIV");
                        _t64.className = "se-btn-module-enter", o.appendChild(_t64), p = !1;
                    }
                }
                var f = e.createElement("DIV");
                return f.className = "se-toolbar-cover", o.appendChild(f), {
                    element: o,
                    plugins: r,
                    pluginCallButtons: a
                };
            }
        };
        var g = function g(e, t, n) {
            return {
                element: {
                    originElement: e,
                    topArea: t._top,
                    relative: t._relative,
                    toolbar: t._toolBar,
                    resizingBar: t._resizingBar,
                    navigation: t._navigation,
                    charCounter: t._charCounter,
                    editorArea: t._editorArea,
                    wysiwyg: t._wysiwygArea,
                    code: t._codeArea,
                    loading: t._loading,
                    resizeBackground: t._resizeBack,
                    _stickyDummy: t._stickyDummy,
                    _arrow: t._arrow
                },
                tool: {
                    cover: t._toolBar.querySelector(".se-toolbar-cover"),
                    bold: t._toolBar.querySelector("._se_command_bold"),
                    underline: t._toolBar.querySelector("._se_command_underline"),
                    italic: t._toolBar.querySelector("._se_command_italic"),
                    strike: t._toolBar.querySelector("._se_command_strike"),
                    subscript: t._toolBar.querySelector("._se_command_subscript"),
                    superscript: t._toolBar.querySelector("._se_command_superscript"),
                    font: t._toolBar.querySelector("._se_command_font_family .txt"),
                    fontTooltip: t._toolBar.querySelector("._se_command_font_family .se-tooltip-text"),
                    format: t._toolBar.querySelector("._se_command_format"),
                    fontSize: t._toolBar.querySelector("._se_command_font_size"),
                    align: t._toolBar.querySelector("._se_command_align"),
                    list: t._toolBar.querySelector("._se_command_list"),
                    undo: t._toolBar.querySelector("._se_command_undo"),
                    redo: t._toolBar.querySelector("._se_command_redo"),
                    save: t._toolBar.querySelector("._se_command_save"),
                    outdent: t._toolBar.querySelector("._se_command_outdent")
                },
                option: n
            };
        },
            p = function p(e, t) {
            var n = window,
                i = e.context.element.wysiwyg,
                l = e.util,
                o = e.context.tool.undo,
                s = e.context.tool.redo;
            var a = null,
                r = 0,
                c = [{
                contents: e.getContents(),
                s: {
                    path: [0, 0],
                    offset: 0
                },
                e: {
                    path: [0, 0],
                    offset: 0
                }
            }];

            function d() {
                var n = c[r];
                i.innerHTML = n.contents, e.setRange(l.getNodeFromPath(n.s.path, i), n.s.offset, l.getNodeFromPath(n.e.path, i), n.e.offset), e.focus(), 0 === r ? (o && o.setAttribute("disabled", !0), s && s.removeAttribute("disabled")) : r === c.length - 1 ? (o && o.removeAttribute("disabled"), s && s.setAttribute("disabled", !0)) : (o && o.removeAttribute("disabled"), s && s.removeAttribute("disabled")), e._checkComponents(), e._charCount(0, !1), t();
            }
            return {
                push: function push() {
                    a && n.clearTimeout(a), a = n.setTimeout(function () {
                        n.clearTimeout(a), a = null, function () {
                            var n = e.getContents();
                            if (n === c[r].contents) return;
                            r++;
                            var i = e.getRange();
                            c.length > r && (c = c.slice(0, r), s && s.setAttribute("disabled", !0)), c[r] = {
                                contents: n,
                                s: {
                                    path: l.getNodePath(i.startContainer),
                                    offset: i.startOffset
                                },
                                e: {
                                    path: l.getNodePath(i.endContainer),
                                    offset: i.endOffset
                                }
                            }, 1 === r && o && o.removeAttribute("disabled"), e._checkComponents(), e._charCount(0, !1), t();
                        }();
                    }, 500);
                },
                undo: function undo() {
                    r > 0 && (r--, d());
                },
                redo: function redo() {
                    c.length - 1 > r && (r++, d());
                },
                reset: function reset() {
                    c = c[r = 0];
                }
            };
        },
            m = {
            init: function init(e) {
                return {
                    create: function (t, n) {
                        return this.create(t, n, e);
                    }.bind(this)
                };
            },
            create: function create(e, t, n) {
                "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && (t = {}), n && (t = [n, t].reduce(function (e, t) {
                    return Object.keys(t).forEach(function (n) {
                        e[n] = t[n];
                    }), e;
                }, {}));
                var i = "string" == typeof e ? document.getElementById(e) : e;
                if (!i) {
                    if ("string" == typeof e) throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:"' + e + '")');
                    throw Error("[SUNEDITOR.create.fail] suneditor requires textarea's element or id value");
                }
                var l = h.init(i, t);
                if (l.constructed._top.id && document.getElementById(l.constructed._top.id)) throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:"' + l.constructed._top.id + '")');
                return i.style.display = "none", l.constructed._top.style.display = "block", "object" == _typeof(i.nextElementSibling) ? i.parentNode.insertBefore(l.constructed._top, i.nextElementSibling) : i.parentNode.appendChild(l.constructed._top), function (e, t, n, i, l) {
                    var o = document,
                        a = window,
                        r = u,
                        c = {
                        _d: o,
                        _w: a,
                        context: e,
                        plugins: n || {},
                        util: r,
                        initPlugins: {},
                        lang: i,
                        submenu: null,
                        _resizingName: "",
                        _submenuName: "",
                        _bindedSubmenuOff: null,
                        submenuActiveButton: null,
                        controllerArray: [],
                        codeViewDisabledButtons: null,
                        history: null,
                        _bindControllersOff: null,
                        _isInline: null,
                        _isBalloon: null,
                        _inlineToolbarAttr: {
                            width: 0,
                            height: 0,
                            isShow: !1
                        },
                        _notHideToolbar: !1,
                        _sticky: !1,
                        _imageUpload: function _imageUpload(e, t, n, i, l) {
                            "function" == typeof m.onImageUpload && m.onImageUpload(e, 1 * t, n, i, l);
                        },
                        _imageUploadError: function _imageUploadError(e, t) {
                            return "function" != typeof m.onImageUploadError || m.onImageUploadError(e, t);
                        },
                        commandMap: null,
                        _variable: {
                            wysiwygActive: !0,
                            isFullScreen: !1,
                            innerHeight_fullScreen: 0,
                            resizeClientY: 0,
                            tabSize: 4,
                            minResizingSize: 65,
                            currentNodes: [],
                            _range: null,
                            _selectionNode: null,
                            _originCssText: e.element.topArea.style.cssText,
                            _bodyOverflow: "",
                            _editorAreaOriginCssText: "",
                            _wysiwygOriginCssText: "",
                            _codeOriginCssText: "",
                            _fullScreenSticky: !1,
                            _imagesInfo: [],
                            _imageIndex: 0,
                            _videosCnt: 0
                        },
                        callPlugin: function callPlugin(e, n) {
                            if (!this.plugins[e]) throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:"' + e + '")');
                            this.initPlugins[e] || (this.plugins[e].add(this, t[e]), this.initPlugins[e] = !0), "function" == typeof n && n();
                        },
                        addModule: function addModule(e) {
                            for (var _t65, _n44 = 0, _i39 = e.length; _n44 < _i39; _n44++) {
                                _t65 = e[_n44].name, this.plugins[_t65] || (this.plugins[_t65] = e[_n44], "function" == typeof this.plugins[_t65].add && this.plugins[_t65].add(this));
                            }
                        },
                        submenuOn: function submenuOn(e) {
                            this._bindedSubmenuOff && this._bindedSubmenuOff();
                            var t = this._submenuName = e.getAttribute("data-command");
                            this.submenu = e.nextElementSibling, this.submenu.style.display = "block", r.addClass(e, "on"), this.submenuActiveButton = e;
                            var n = this.context.element.toolbar.offsetWidth - (e.parentElement.offsetLeft + this.submenu.offsetWidth);
                            this.submenu.style.left = n < 0 ? n + "px" : "1px", this._bindedSubmenuOff = this.submenuOff.bind(this), o.addEventListener("mousedown", this._bindedSubmenuOff, !1), this.plugins[t].on && this.plugins[t].on.call(this);
                        },
                        submenuOff: function submenuOff() {
                            o.removeEventListener("mousedown", this._bindedSubmenuOff), this._bindedSubmenuOff = null, this.submenu && (this._submenuName = "", this.submenu.style.display = "none", this.submenu = null, r.removeClass(this.submenuActiveButton, "on"), this.submenuActiveButton = null, this._notHideToolbar = !1), this.focus();
                        },
                        controllersOn: function controllersOn() {
                            this._bindControllersOff && this._bindControllersOff();
                            for (var _e90 = 0; _e90 < arguments.length; _e90++) {
                                arguments[_e90].style && (arguments[_e90].style.display = "block"), this.controllerArray[_e90] = arguments[_e90];
                            }this._bindControllersOff = this.controllersOff.bind(this), o.addEventListener("mousedown", this._bindControllersOff, !1), this._resizingName || o.addEventListener("keydown", this._bindControllersOff, !1);
                        },
                        controllersOff: function controllersOff() {
                            if (this._resizingName = "", !this._bindControllersOff) return;
                            o.removeEventListener("mousedown", this._bindControllersOff), o.removeEventListener("keydown", this._bindControllersOff), this._bindControllersOff = null;
                            var e = this.controllerArray.length;
                            if (e > 0) {
                                for (var _t66 = 0; _t66 < e; _t66++) {
                                    "function" == typeof this.controllerArray[_t66] ? this.controllerArray[_t66]() : this.controllerArray[_t66].style.display = "none";
                                }this.controllerArray = [];
                            }
                        },
                        execCommand: function execCommand(e, t, n) {
                            o.execCommand(e, t, "formatBlock" === e ? "<" + n + ">" : n), this.history.push();
                        },
                        focus: function focus() {
                            if ("none" === e.element.wysiwyg.style.display) return;
                            var t = r.getParentElement(this.getSelectionNode(), "figcaption");
                            t ? t.focus() : e.element.wysiwyg.focus(), this._editorRange(), d._findButtonEffectTag();
                        },
                        setRange: function setRange(e, t, n, i) {
                            if (!e || !n) return;
                            t > e.textContent.length && (t = e.textContent.length), i > n.textContent.length && (i = n.textContent.length);
                            var l = o.createRange();
                            l.setStart(e, t), l.setEnd(n, i);
                            var s = a.getSelection();
                            s.removeAllRanges && s.removeAllRanges(), s.addRange(l), this._editorRange();
                        },
                        getRange: function getRange() {
                            return this._variable._range || this._createDefaultRange();
                        },
                        getSelectionNode: function getSelectionNode() {
                            return this._variable._selectionNode || e.element.wysiwyg.firstChild;
                        },
                        _editorRange: function _editorRange() {
                            var e = a.getSelection();
                            var t = null,
                                n = null;
                            t = e.rangeCount > 0 ? e.getRangeAt(0) : this._createDefaultRange(), this._variable._range = t, n = t.collapsed ? t.commonAncestorContainer : e.extentNode || e.anchorNode, this._variable._selectionNode = n;
                        },
                        _createDefaultRange: function _createDefaultRange() {
                            var t = o.createRange();
                            return e.element.wysiwyg.firstChild || this.execCommand("formatBlock", !1, "P"), t.setStart(e.element.wysiwyg.firstChild, 0), t.setEnd(e.element.wysiwyg.firstChild, 0), t;
                        },
                        getSelectedElements: function getSelectedElements(t) {
                            var n = this.getRange();
                            if (r.isWysiwygDiv(n.startContainer)) {
                                var _t67 = e.element.wysiwyg.children;
                                if (0 === _t67.length) return null;
                                this.setRange(_t67[0], 0, _t67[_t67.length - 1], _t67[_t67.length - 1].textContent.trim().length), n = this.getRange();
                            }
                            var i = n.startContainer,
                                l = n.endContainer,
                                o = n.commonAncestorContainer,
                                s = r.getListChildren(o, function (e) {
                                return t ? t(e) : r.isFormatElement(e);
                            });
                            if (r.isWysiwygDiv(o) || r.isRangeFormatElement(o) || s.unshift(r.getFormatElement(o)), i === l || 1 === s.length) return s;
                            var a = r.getFormatElement(i),
                                c = r.getFormatElement(l),
                                d = null,
                                u = null;
                            var h = function h(e) {
                                return !r.isTable(e) || /^TABLE$/i.test(e.nodeName);
                            },
                                g = r.getRangeFormatElement(a, h),
                                p = r.getRangeFormatElement(c, h),
                                m = g === p;
                            for (var _e91, _t68 = 0, _n45 = s.length; _t68 < _n45; _t68++) {
                                if (a === (_e91 = s[_t68]) || !m && _e91 === g) d = _t68;else if (c === _e91 || !m && _e91 === p) {
                                    u = _t68;
                                    break;
                                }
                            }return null === d && (d = 0), null === u && (u = s.length - 1), s.slice(d, u + 1);
                        },
                        getSelectedElementsAndComponents: function getSelectedElementsAndComponents() {
                            var e = this.getRange().commonAncestorContainer,
                                t = r.getParentElement(e, r.isComponent);
                            return r.isTable(e) ? this.getSelectedElements() : this.getSelectedElements(function (e) {
                                var n = this.getParentElement(e, this.isComponent);
                                return this.isFormatElement(e) && (!n || n === t) || this.isComponent(e) && !this.getFormatElement(e);
                            }.bind(r));
                        },
                        isEdgePoint: function isEdgePoint(e, t) {
                            return 0 === t || t === e.nodeValue.length;
                        },
                        showLoading: function showLoading() {
                            e.element.loading.style.display = "block";
                        },
                        closeLoading: function closeLoading() {
                            e.element.loading.style.display = "none";
                        },
                        appendFormatTag: function appendFormatTag(e, t) {
                            var n = e,
                                i = r.getFormatElement(this.getSelectionNode()),
                                l = t || (r.isFormatElement(i) ? i.nodeName : "P"),
                                o = r.createElement(l);
                            return o.innerHTML = "<br>", r.isCell(n) ? n.insertBefore(o, e.nextElementSibling) : n.parentNode.insertBefore(o, n.nextElementSibling), o;
                        },
                        insertComponent: function insertComponent(e) {
                            var t = null;
                            var n = this.getSelectionNode(),
                                i = r.getFormatElement(n);
                            if (r.isListCell(i)) {
                                if (/^HR$/i.test(e.nodeName)) {
                                    var _t69 = r.createElement("LI"),
                                        _n46 = r.createTextNode(r.zeroWidthSpace);
                                    _t69.appendChild(e), _t69.appendChild(_n46), i.parentNode.insertBefore(_t69, i.nextElementSibling), this.setRange(_n46, 1, _n46, 1);
                                } else this.insertNode(e, n === i ? null : n), t = r.createElement("LI"), i.parentNode.insertBefore(t, i.nextElementSibling);
                            } else this.insertNode(e, i), t = this.appendFormatTag(e);
                            return this.history.push(), t;
                        },
                        insertNode: function insertNode(e, t) {
                            var n = this.getRange();
                            var i = null;
                            if (t) i = t.parentNode, t = t.nextElementSibling;else {
                                var _e92 = n.startContainer,
                                    _l31 = n.startOffset,
                                    _o28 = n.endContainer,
                                    _s15 = n.endOffset,
                                    _a15 = n.commonAncestorContainer;
                                if (i = _e92, 3 === _e92.nodeType && (i = _e92.parentNode), n.collapsed) 3 === _a15.nodeType ? t = _a15.splitText(_s15) : (null !== i.lastChild && r.isBreak(i.lastChild) && i.removeChild(i.lastChild), t = null);else if (_e92 === _o28) {
                                    t = this.isEdgePoint(_o28, _s15) ? _o28.nextSibling : _o28.splitText(_s15);
                                    var _n47 = _e92;
                                    this.isEdgePoint(_e92, _l31) || (_n47 = _e92.splitText(_l31)), i.removeChild(_n47);
                                } else for (this.removeNode(), i = _a15, t = _o28; t.parentNode !== _a15;) {
                                    t = t.parentNode;
                                }
                            }
                            try {
                                i.insertBefore(e, t);
                            } catch (t) {
                                i.appendChild(e);
                            } finally {
                                this.history.push();
                            }
                        },
                        removeNode: function removeNode() {
                            var e = this.getRange();
                            if (e.deleteContents) return void e.deleteContents();
                            var t = e.startContainer,
                                n = e.startOffset,
                                i = e.endContainer,
                                l = e.endOffset,
                                o = e.commonAncestorContainer;
                            var s = null,
                                a = null;
                            var c = r.getListChildNodes(o);
                            var d = r.getArrayIndex(c, t),
                                u = r.getArrayIndex(c, i);
                            for (var _e93 = d + 1, _i40 = t; _e93 >= 0; _e93--) {
                                c[_e93] === _i40.parentNode && c[_e93].firstChild === _i40 && 0 === n && (d = _e93, _i40 = _i40.parentNode);
                            }for (var _e94 = u - 1, _t70 = i; _e94 > d; _e94--) {
                                c[_e94] === _t70.parentNode && 1 === c[_e94].nodeType && (c.splice(_e94, 1), _t70 = _t70.parentNode, --u);
                            }for (var _e95 = d; _e95 <= u; _e95++) {
                                var _o29 = c[_e95];
                                0 === _o29.length || 3 === _o29.nodeType && void 0 === _o29.data ? r.removeItem(_o29) : _o29 !== t ? _o29 !== i ? (r.removeItem(_o29), this.history.push()) : (a = 1 === i.nodeType ? r.createTextNode(i.textContent) : r.createTextNode(i.substringData(l, i.length - l))).length > 0 ? i.data = a.data : r.removeItem(i) : (s = 1 === t.nodeType ? r.createTextNode(t.textContent) : r.createTextNode(t.substringData(0, n))).length > 0 ? t.data = s.data : r.removeItem(t);
                            }
                        },
                        applyRangeFormatElement: function applyRangeFormatElement(e) {
                            var _this2 = this;

                            var t = this.getSelectedElementsAndComponents();
                            if (!t || 0 === t.length) return;
                            var n = void 0,
                                i = void 0,
                                l = void 0,
                                o = t[t.length - 1];
                            n = r.isRangeFormatElement(o) || r.isFormatElement(o) ? o : r.getRangeFormatElement(o) || r.getFormatElement(o), r.isCell(n) ? (i = null, l = n) : (i = n.nextSibling, l = n.parentNode);
                            var s = r.getElementDepth(n),
                                a = null;
                            var c = [],
                                d = function d(e, t, n) {
                                var i = null;
                                return e === t || r.isTable(t) || (i = r.removeItemAllParents(t)), i ? i.ec : n;
                            };

                            var _loop2 = function _loop2(_n49, _o31, _u11, _h9, _g6, _p6) {
                                if (_n49 = t[_g6], _o31 = _n49.parentNode, _u11 = r.getElementDepth(_n49), r.isList(_o31)) {
                                    if (null === a && (a = r.createElement(_o31.nodeName)), a.innerHTML += _n49.outerHTML, c.push(_n49), _g6 === _p6 - 1 || !_this2.util.getParentElement(t[_g6 + 1], function (e) {
                                        return e === _o31;
                                    })) {
                                        var _t71 = _this2.detachRangeFormatElement(_o31, c, null, !0, !0);
                                        s >= _u11 ? (s = _u11, (i = d(l = _t71.cc, _o31, _t71.ec)) && (l = i.parentNode)) : l === _t71.cc && (i = _t71.ec), l !== _t71.cc && void 0 !== (_h9 = d(l, _t71.cc)) && (i = _h9), e.appendChild(a), a = null;
                                    }
                                } else s >= _u11 && (s = _u11, l = _o31, i = _n49.nextSibling), e.appendChild(_n49), l !== _o31 && void 0 !== (_h9 = d(l, _o31)) && (i = _h9);
                                _n48 = _n49;
                                _o30 = _o31;
                                _u10 = _u11;
                                _h8 = _h9;
                            };

                            for (var _n48, _o30, _u10, _h8, _g6 = 0, _p6 = t.length; _g6 < _p6; _g6++) {
                                _loop2(_n48, _o30, _u10, _h8, _g6, _p6);
                            }l.insertBefore(e, i), d(e, i), this.history.push();
                            var u = this.util.getEdgeChildNodes(e.firstElementChild, e.lastElementChild);
                            t.length > 1 ? this.setRange(u.sc, 0, u.ec, u.ec.textContent.length) : this.setRange(u.ec, u.ec.textContent.length, u.ec, u.ec.textContent.length);
                        },
                        detachRangeFormatElement: function detachRangeFormatElement(e, t, n, i, l) {
                            var o = this.getRange(),
                                s = o.startOffset,
                                a = o.endOffset,
                                c = e.children,
                                u = e.parentNode;
                            var h = null,
                                g = null,
                                p = e.cloneNode(!1);
                            var m = r.isList(n);
                            var f = !1;

                            function _(e, t, n) {
                                r.onlyZeroWidthSpace(t) && (t.innerHTML = r.zeroWidthSpace);
                                var i = t.childNodes;
                                var l = t.cloneNode(!1),
                                    o = null,
                                    s = null;
                                for (; i[0];) {
                                    s = i[0], r.isIgnoreNodeChange(s) && !r.isListCell(l) ? (l.childNodes.length > 0 && (o || (o = l), e.insertBefore(l, n), l = t.cloneNode(!1)), e.insertBefore(s, n), o || (o = s)) : l.appendChild(s);
                                }return l.childNodes.length > 0 && (e.insertBefore(l, n), o || (o = l)), o;
                            }
                            for (var _l32, _o32 = 0, _s16 = c.length; _o32 < _s16; _o32++) {
                                if (_l32 = c[_o32], i && 0 === _o32 && (h = t && t.length !== _s16 && t[0] !== _l32 ? p : e.previousSibling), t && -1 === t.indexOf(_l32)) p || (p = e.cloneNode(!1)), _l32 = _l32.cloneNode(!0), p.appendChild(_l32);else {
                                    if (p && p.children.length > 0 && (u.insertBefore(p, e), p = null), !m && r.isListCell(_l32)) {
                                        var _t72 = _l32.innerHTML;
                                        (_l32 = r.isCell(e.parentNode) ? r.createElement("DIV") : r.createElement("P")).innerHTML = _t72;
                                    } else _l32 = _l32.cloneNode(!0);
                                    i || (n ? (f || (u.insertBefore(n, e), f = !0), _l32 = _(n, _l32, null)) : _l32 = _(u, _l32, e), t ? (g = _l32, h || (h = _l32)) : h || (h = g = _l32));
                                }
                            }var b = e.parentNode,
                                y = e.nextSibling;
                            p && p.children.length > 0 && b.insertBefore(p, y), r.removeItem(e);
                            var v = i ? {
                                cc: b,
                                sc: h,
                                ec: h && h.parentNode ? h.nextSibling : p && p.children.length > 0 ? p : y || null
                            } : this.util.getEdgeChildNodes(h, g);
                            if (l) return v;
                            this.history.push(), !i && v && (t ? this.setRange(v.sc, s, v.ec, a) : this.setRange(v.sc, 0, v.sc, 0)), d._findButtonEffectTag();
                        },
                        nodeChange: function nodeChange(t, n, i) {
                            var l = this.getRange();
                            n = !!(n && n.length > 0) && n, i = !!(i && i.length > 0) && i;
                            var o = !t,
                                s = o && !i && !n;
                            var c = void 0,
                                d = void 0,
                                u = void 0,
                                h = l.startContainer,
                                g = l.startOffset,
                                p = l.endContainer,
                                m = l.endOffset;
                            if (s && l.collapsed && r.isFormatElement(h.parentNode) && r.isFormatElement(p.parentNode)) return;
                            if (o && (t = this.util.createElement("DIV")), !s && h === p) {
                                var _e96 = h;
                                if (s) {
                                    if (r.getFormatElement(_e96) === _e96.parentNode) return;
                                } else if (n.length > 0) {
                                    var _i41 = 0;
                                    for (var _l33 = 0; _l33 < n.length; _l33++) {
                                        for (; !r.isFormatElement(_e96) && !r.isWysiwygDiv(_e96);) {
                                            1 === _e96.nodeType && (o ? _e96.style[n[_l33]] : _e96.style[n[_l33]] === t.style[n[_l33]]) && _i41++, _e96 = _e96.parentNode;
                                        }
                                    }if (!o && _i41 >= n.length) return;
                                    if (o && 0 === _i41) return;
                                }
                            }
                            if (c = r.isWysiwygDiv(h) ? e.element.wysiwyg.firstChild : h, d = g, r.isBreak(c) || 1 === c.nodeType && c.childNodes.length > 0) {
                                var _e97 = r.isBreak(c);
                                if (!_e97) {
                                    for (; c && !r.isBreak(c) && 1 === c.nodeType;) {
                                        c = c.childNodes[d] || c.nextElementSibling || c.nextSibling, d = 0;
                                    }var _e98 = r.getFormatElement(c);
                                    _e98 === r.getRangeFormatElement(_e98) && (_e98 = r.createElement(r.isCell(c) ? "DIV" : "P"), c.parentNode.insertBefore(_e98, c), _e98.appendChild(c));
                                }
                                if (r.isBreak(c)) {
                                    var _t73 = r.createTextNode(r.zeroWidthSpace);
                                    c.parentNode.insertBefore(_t73, c), c = _t73, _e97 && (h === p && (p = c, m = 1), r.removeItem(h));
                                }
                            }
                            if (h = c, g = d, c = r.isWysiwygDiv(p) ? e.element.wysiwyg.lastChild : p, d = m, r.isBreak(c) || 1 === c.nodeType && c.childNodes.length > 0) {
                                var _e99 = r.isBreak(c);
                                if (!_e99) {
                                    for (; c && !r.isBreak(c) && 1 === c.nodeType;) {
                                        c = (u = c.childNodes)[d > 0 ? d - 1 : d] || !/FIGURE/i.test(u[0].nodeName) ? u[0] : c.previousElementSibling || c.previousSibling || h, d = d > 0 ? c.textContent.length : d;
                                    }var _e100 = r.getFormatElement(c);
                                    _e100 === r.getRangeFormatElement(_e100) && (_e100 = r.createElement(r.isCell(_e100) ? "DIV" : "P"), c.parentNode.insertBefore(_e100, c), _e100.appendChild(c));
                                }
                                if (r.isBreak(c)) {
                                    var _t74 = r.createTextNode(r.zeroWidthSpace);
                                    c.parentNode.insertBefore(_t74, c), c = _t74, d = 0, _e99 && r.removeItem(p);
                                }
                            }
                            p = c, m = d;
                            var f = t.nodeName;
                            this.setRange(h, g, p, m);
                            var _ = void 0,
                                b = void 0,
                                y = void 0,
                                v = {},
                                x = {};
                            if (n) {
                                b = "(?:;|^|\\s)(?:" + n[0];
                                for (var _e101 = 1; _e101 < n.length; _e101++) {
                                    b += "|" + n[_e101];
                                }b += ")\\s*:[^;]*\\s*(?:;|$)", b = new a.RegExp(b, "ig");
                            }
                            if (i) {
                                y = "^(?:" + i[0];
                                for (var _e102 = 1; _e102 < i.length; _e102++) {
                                    y += "|" + i[_e102];
                                }y += ")$", y = new a.RegExp(y, "i");
                            }
                            var C = function C(e) {
                                if (3 === e.nodeType || r.isBreak(e)) return !0;
                                if (s) return !1;
                                var t = e.style.cssText;
                                var n = "";
                                if (b && t.length > 0 && (n = t.replace(b, "").trim()), o) {
                                    if (b && y && !n && y.test(e.nodeName)) return !1;
                                    if (b && !n && t) return !1;
                                    if (y && y.test(e.nodeName)) return !1;
                                }
                                return !(!n && e.nodeName === f || (b && t.length > 0 && (e.style.cssText = n), 0));
                            },
                                w = this.getSelectedElements();
                            r.getFormatElement(h) || (h = r.getChildElement(w[0], function (e) {
                                return 3 === e.nodeType;
                            }), g = 0), r.getFormatElement(p) || (m = (p = r.getChildElement(w[w.length - 1], function (e) {
                                return 3 === e.nodeType;
                            })).textContent.length);
                            var k = r.getFormatElement(h) === r.getFormatElement(p),
                                E = w.length - (k ? 0 : 1);
                            if (_ = t.cloneNode(!1), k) {
                                var _e103 = this._nodeChange_oneLine(w[0], _, C, h, g, p, m, s, o, l.collapsed);
                                v.container = _e103.startContainer, v.offset = _e103.startOffset, x.container = _e103.endContainer, x.offset = _e103.endOffset;
                            } else v = this._nodeChange_startLine(w[0], _, C, h, g, s, o);
                            for (var _e104 = 1; _e104 < E; _e104++) {
                                _ = t.cloneNode(!1), this._nodeChange_middleLine(w[_e104], _, C, s, o);
                            }E > 0 && !k ? (_ = t.cloneNode(!1), x = this._nodeChange_endLine(w[E], _, C, p, m, s, o)) : k || (x = v), this.setRange(v.container, v.offset, x.container, x.offset), this.history.push();
                        },
                        _stripRemoveNode: function _stripRemoveNode(e, t) {
                            if (!t || 3 === t.nodeType) return;
                            var n = t.childNodes;
                            for (; n[0];) {
                                e.insertBefore(n[0], t);
                            }e.removeChild(t);
                        },
                        _nodeChange_oneLine: function _nodeChange_oneLine(e, t, n, i, l, o, s, c, d, u) {
                            var h = e,
                                g = t,
                                p = [t],
                                m = e.cloneNode(!1),
                                f = i === o;
                            var _ = void 0,
                                b = void 0,
                                y = void 0,
                                v = void 0,
                                x = i,
                                C = l,
                                w = o,
                                k = s,
                                E = !1,
                                S = !1;

                            function N(e) {
                                var t = new a.RegExp("(?:;|^|\\s)(?:" + v + "null)\\s*:[^;]*\\s*(?:;|$)", "ig");
                                var n = "";
                                return t && e.style.cssText.length > 0 && (n = t.test(e.style.cssText)), !n;
                            }
                            if (function e(i, l) {
                                var o = i.childNodes;
                                for (var _i42 = 0, _s17 = o.length; _i42 < _s17; _i42++) {
                                    var _s18 = o[_i42];
                                    if (!_s18) continue;
                                    var _a16 = void 0,
                                        _d11 = l;
                                    if (!E && _s18 === x) {
                                        var _e105 = r.createTextNode(1 === x.nodeType ? "" : x.substringData(0, C)),
                                            _i43 = r.createTextNode(1 === x.nodeType ? "" : x.substringData(C, f && k >= C ? k - C : x.data.length - C));
                                        for (_e105.data.length > 0 && l.appendChild(_e105), b = _s18, _ = [], v = ""; b !== m && b !== h && null !== b;) {
                                            n(b) && 1 === b.nodeType && N(b) && (_.push(b.cloneNode(!1)), v += b.style.cssText.substr(0, b.style.cssText.indexOf(":")) + "|"), b = b.parentNode;
                                        }var _o33 = _.pop() || _i43;
                                        for (y = b = _o33; _.length > 0;) {
                                            b = _.pop(), y.appendChild(b), y = b;
                                        }if (t.appendChild(_o33), m.appendChild(t), x = _i43, C = 0, E = !0, b !== _i43 && b.appendChild(x), !f) continue;
                                    }
                                    if (S || _s18 !== w) {
                                        if (E) {
                                            if (1 === _s18.nodeType && !r.isBreak(_s18)) {
                                                r.isIgnoreNodeChange(_s18) ? (t = t.cloneNode(!1), m.appendChild(_s18), m.appendChild(t), p.push(t), _i42--) : e(_s18, _s18);
                                                continue;
                                            }
                                            for (b = _s18, _ = [], v = ""; null !== b.parentNode && b !== h && b !== t;) {
                                                1 === b.nodeType && !r.isBreak(_s18) && (S || n(b)) && N(b) && (_.push(b.cloneNode(!1)), v += b.style.cssText.substr(0, b.style.cssText.indexOf(":")) + "|"), b = b.parentNode;
                                            }var _o34 = _.pop() || _s18;
                                            for (y = b = _o34; _.length > 0;) {
                                                b = _.pop(), y.appendChild(b), y = b;
                                            }_o34 === _s18 ? l = S ? m : t : S ? (m.appendChild(_o34), l = b) : (t.appendChild(_o34), l = b);
                                        }
                                        _a16 = _s18.cloneNode(!1), l.appendChild(_a16), 1 !== _s18.nodeType || r.isBreak(_s18) || (_d11 = _a16), e(_s18, _d11);
                                    } else {
                                        var _e106 = r.createTextNode(1 === w.nodeType ? "" : w.substringData(k, w.length - k)),
                                            _i44 = r.createTextNode(f || 1 === w.nodeType ? "" : w.substringData(0, k));
                                        if (_e106.data.length > 0) {
                                            for (b = _s18, v = "", _ = []; b !== m && b !== h && null !== b;) {
                                                1 === b.nodeType && N(b) && (_.push(b.cloneNode(!1)), v += b.style.cssText.substr(0, b.style.cssText.indexOf(":")) + "|"), b = b.parentNode;
                                            }for (_a16 = y = b = _.pop() || _e106; _.length > 0;) {
                                                b = _.pop(), y.appendChild(b), y = b;
                                            }m.appendChild(_a16), b.textContent = _e106.data;
                                        }
                                        for (b = _s18, _ = [], v = ""; b !== m && b !== h && null !== b;) {
                                            n(b) && 1 === b.nodeType && N(b) && (_.push(b.cloneNode(!1)), v += b.style.cssText.substr(0, b.style.cssText.indexOf(":")) + "|"), b = b.parentNode;
                                        }var _l34 = _.pop() || _i44;
                                        for (y = b = _l34; _.length > 0;) {
                                            b = _.pop(), y.appendChild(b), y = b;
                                        }t.appendChild(_l34), w = _i44, k = _i44.data.length, S = !0, !c && u && (t = _i44, _i44.textContent = r.zeroWidthSpace), b !== _i44 && b.appendChild(w);
                                    }
                                }
                            }(e, m), c = c && d) for (var _e107 = 0; _e107 < p.length; _e107++) {
                                var _t75 = p[_e107],
                                    _n50 = r.createTextNode(u ? r.zeroWidthSpace : _t75.textContent);
                                m.insertBefore(_n50, _t75), m.removeChild(_t75), 0 === _e107 && (x = w = _n50);
                            } else {
                                if (d) for (var _e108 = 0; _e108 < p.length; _e108++) {
                                    var _t76 = p[_e108];
                                    if (u) for (; _t76 !== g;) {
                                        _t76 = _t76.parentNode;
                                    }this._stripRemoveNode(m, _t76);
                                }
                                u && (x = w = t);
                            }
                            var T = r.onlyZeroWidthSpace(t.textContent);
                            T && (t.textContent = " "), r.removeEmptyNode(m), T && (t.textContent = r.zeroWidthSpace);
                            var z = c || !w.textContent;
                            return e.parentNode.insertBefore(m, e), r.removeItem(e), u && (C = x.textContent.length, k = w.textContent.length), 0 === w.textContent.length && (r.removeItem(w), w = x), {
                                startContainer: x,
                                startOffset: C,
                                endContainer: w,
                                endOffset: z ? w.textContent.length : k
                            };
                        },
                        _nodeChange_middleLine: function _nodeChange_middleLine(e, t, n, i, l) {
                            var o = e.cloneNode(!1),
                                s = [t];
                            var a = !0;
                            if (function e(i, l) {
                                var c = i.childNodes;
                                for (var _i45 = 0, _d12 = c.length; _i45 < _d12; _i45++) {
                                    var _d13 = c[_i45];
                                    if (!_d13) continue;
                                    var _u12 = l;
                                    if (r.isIgnoreNodeChange(_d13)) o.appendChild(t), t = t.cloneNode(!1), o.appendChild(_d13), o.appendChild(t), s.push(t), l = t, _i45--;else {
                                        if (n(_d13)) {
                                            a = !1;
                                            var _e109 = _d13.cloneNode(!1);
                                            l.appendChild(_e109), 1 !== _d13.nodeType || r.isBreak(_d13) || (_u12 = _e109);
                                        }
                                        e(_d13, _u12);
                                    }
                                }
                            }(e.cloneNode(!0), t), !a) {
                                if (o.appendChild(t), i && l) for (var _e110 = 0; _e110 < s.length; _e110++) {
                                    var _t77 = s[_e110],
                                        _n51 = r.createTextNode(_t77.textContent);
                                    o.insertBefore(_n51, _t77), o.removeChild(_t77);
                                } else if (l) for (var _e111 = 0; _e111 < s.length; _e111++) {
                                    this._stripRemoveNode(o, s[_e111]);
                                }r.removeEmptyNode(o), e.parentNode.insertBefore(o, e), r.removeItem(e);
                            }
                        },
                        _nodeChange_startLine: function _nodeChange_startLine(e, t, n, i, l, o, s) {
                            var a = e,
                                c = [t],
                                d = e.cloneNode(!1);
                            var u = void 0,
                                h = void 0,
                                g = void 0,
                                p = i,
                                m = l,
                                f = !1;
                            if (function e(i, l) {
                                var o = i.childNodes;
                                for (var _i46 = 0, _s19 = o.length; _i46 < _s19; _i46++) {
                                    var _s20 = o[_i46];
                                    if (!_s20) continue;
                                    var _ = l;
                                    if (f && !r.isBreak(_s20)) {
                                        if (1 === _s20.nodeType) {
                                            r.isIgnoreNodeChange(_s20) ? (t = t.cloneNode(!1), d.appendChild(_s20), d.appendChild(t), c.push(t), _i46--) : e(_s20, _s20);
                                            continue;
                                        }
                                        for (h = _s20, u = []; null !== h.parentNode && h !== a && h !== t;) {
                                            1 === h.nodeType && n(h) && u.push(h.cloneNode(!1)), h = h.parentNode;
                                        }if (u.length > 0) {
                                            var _e112 = u.pop();
                                            for (g = h = _e112; u.length > 0;) {
                                                h = u.pop(), g.appendChild(h), g = h;
                                            }t.appendChild(_e112), l = h;
                                        } else l = t;
                                    }
                                    if (f || _s20 !== p) {
                                        if (!f || n(_s20)) {
                                            var _e113 = _s20.cloneNode(!1);
                                            l.appendChild(_e113), 1 !== _s20.nodeType || r.isBreak(_s20) || (_ = _e113);
                                        }
                                        e(_s20, _);
                                    } else {
                                        var _e114 = r.createTextNode(1 === p.nodeType ? "" : p.substringData(0, m)),
                                            _i47 = r.createTextNode(1 === p.nodeType ? "" : p.substringData(m, p.length - m));
                                        for (_e114.data.length > 0 && l.appendChild(_e114), h = l, u = []; h !== d && null !== h;) {
                                            1 === h.nodeType && n(h) && u.push(h.cloneNode(!1)), h = h.parentNode;
                                        }var _o35 = u.pop() || l;
                                        for (g = h = _o35; u.length > 0;) {
                                            h = u.pop(), g.appendChild(h), g = h;
                                        }_o35 !== l ? (t.appendChild(_o35), l = h) : l = t, r.isBreak(_s20) && t.appendChild(_s20.cloneNode(!1)), d.appendChild(t), p = _i47, m = 0, f = !0, l.appendChild(p);
                                    }
                                }
                            }(e, d), o = o && s) for (var _e115 = 0; _e115 < c.length; _e115++) {
                                var _t78 = c[_e115],
                                    _n52 = r.createTextNode(_t78.textContent);
                                d.insertBefore(_n52, _t78), d.removeChild(_t78), 0 === _e115 && (p = _n52);
                            } else if (s) for (var _e116 = 0; _e116 < c.length; _e116++) {
                                this._stripRemoveNode(d, c[_e116]);
                            }return o || 0 !== d.children.length ? (r.removeEmptyNode(d), r.onlyZeroWidthSpace(d.textContent) && (p = d.firstChild, m = 0), e.parentNode.insertBefore(d, e), r.removeItem(e)) : e.childNodes ? p = e.childNodes[0] : (p = r.createTextNode(r.zeroWidthSpace), e.appendChild(p)), {
                                container: p,
                                offset: m
                            };
                        },
                        _nodeChange_endLine: function _nodeChange_endLine(e, t, n, i, l, o, s) {
                            var a = e,
                                c = [t],
                                d = e.cloneNode(!1);
                            var u = void 0,
                                h = void 0,
                                g = void 0,
                                p = i,
                                m = l,
                                f = !1;
                            if (function e(i, l) {
                                var o = i.childNodes;
                                for (var _i48 = o.length - 1; 0 <= _i48; _i48--) {
                                    var _s21 = o[_i48];
                                    if (!_s21) continue;
                                    var _ = l;
                                    if (f && !r.isBreak(_s21)) {
                                        if (1 === _s21.nodeType) {
                                            r.isIgnoreNodeChange(_s21) ? (t = t.cloneNode(!1), d.appendChild(_s21), d.appendChild(t), c.push(t), _i48--) : e(_s21, _s21);
                                            continue;
                                        }
                                        for (h = _s21, u = []; null !== h.parentNode && h !== a && h !== t;) {
                                            n(h) && 1 === h.nodeType && u.push(h.cloneNode(!1)), h = h.parentNode;
                                        }if (u.length > 0) {
                                            var _e117 = u.pop();
                                            for (g = h = _e117; u.length > 0;) {
                                                h = u.pop(), g.appendChild(h), g = h;
                                            }t.insertBefore(_e117, t.firstChild), l = h;
                                        } else l = t;
                                    }
                                    if (f || _s21 !== p) {
                                        if (!f || n(_s21)) {
                                            var _e118 = _s21.cloneNode(!1);
                                            l.insertBefore(_e118, l.firstChild), 1 !== _s21.nodeType || r.isBreak(_s21) || (_ = _e118);
                                        }
                                        e(_s21, _);
                                    } else {
                                        var _e119 = r.createTextNode(1 === p.nodeType ? "" : p.substringData(m, p.length - m)),
                                            _i49 = r.createTextNode(1 === p.nodeType ? "" : p.substringData(0, m));
                                        for (_e119.data.length > 0 && l.insertBefore(_e119, l.firstChild), h = l, u = []; h !== d && null !== h;) {
                                            n(h) && 1 === h.nodeType && u.push(h.cloneNode(!1)), h = h.parentNode;
                                        }var _o36 = u.pop() || l;
                                        for (g = h = _o36; u.length > 0;) {
                                            h = u.pop(), g.appendChild(h), g = h;
                                        }_o36 !== l ? (t.insertBefore(_o36, t.firstChild), l = h) : l = t, r.isBreak(_s21) && t.appendChild(_s21.cloneNode(!1)), d.insertBefore(t, d.firstChild), p = _i49, m = _i49.data.length, f = !0, l.insertBefore(p, l.firstChild);
                                    }
                                }
                            }(e, d), o = o && s) for (var _e120 = 0; _e120 < c.length; _e120++) {
                                var _t79 = c[_e120],
                                    _n53 = r.createTextNode(_t79.textContent);
                                d.insertBefore(_n53, _t79), d.removeChild(_t79), _e120 === c.length - 1 && (p = _n53, m = _n53.textContent.length);
                            } else if (s) for (var _e121 = 0; _e121 < c.length; _e121++) {
                                this._stripRemoveNode(d, c[_e121]);
                            }return o || 0 !== d.childNodes.length ? (r.removeEmptyNode(d), r.onlyZeroWidthSpace(d.textContent) ? (p = d.firstChild, m = p.textContent.length) : r.onlyZeroWidthSpace(p) && (p = d, m = 0), e.parentNode.insertBefore(d, e), r.removeItem(e)) : e.childNodes ? p = e.childNodes[0] : (p = r.createTextNode(r.zeroWidthSpace), e.appendChild(p)), {
                                container: p,
                                offset: m
                            };
                        },
                        commandHandler: function commandHandler(t, n) {
                            switch (n) {
                                case "selectAll":
                                    var _i50 = e.element.wysiwyg,
                                        _l35 = r.getChildElement(_i50.firstChild, function (e) {
                                        return 0 === e.childNodes.length || 3 === e.nodeType;
                                    }) || _i50.firstChild,
                                        _o37 = r.getChildElement(_i50.lastChild, function (e) {
                                        return 0 === e.childNodes.length || 3 === e.nodeType;
                                    }, !0) || _i50.lastChild;
                                    this.setRange(_l35, 0, _o37, _o37.textContent.length);
                                    break;
                                case "codeView":
                                    this.toggleCodeView(), r.toggleClass(t, "active");
                                    break;
                                case "fullScreen":
                                    this.toggleFullScreen(t), r.toggleClass(t, "active");
                                    break;
                                case "indent":
                                case "outdent":
                                    this.indent(n);
                                    break;
                                case "undo":
                                    this.history.undo();
                                    break;
                                case "redo":
                                    this.history.redo();
                                    break;
                                case "removeFormat":
                                    this.removeFormat(), this.focus();
                                    break;
                                case "print":
                                    this.print();
                                    break;
                                case "preview":
                                    this.preview();
                                    break;
                                case "showBlocks":
                                    this.toggleDisplayBlocks(), r.toggleClass(t, "active");
                                    break;
                                case "save":
                                    if ("function" == typeof e.option.callBackSave) e.option.callBackSave(this.getContents());else {
                                        if ("function" != typeof m.save) throw Error("[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)");
                                        m.save();
                                    }
                                    e.tool.save && e.tool.save.setAttribute("disabled", !0);
                                    break;
                                default:
                                    var _s22 = r.hasClass(this.commandMap[n], "active");
                                    "SUB" === n && r.hasClass(this.commandMap.SUP, "active") ? this.nodeChange(null, null, ["SUP"]) : "SUP" === n && r.hasClass(this.commandMap.SUB, "active") && this.nodeChange(null, null, ["SUB"]), this.nodeChange(_s22 ? null : this.util.createElement(n), null, [n]), this.focus();
                            }
                        },
                        removeFormat: function removeFormat() {
                            this.nodeChange();
                        },
                        indent: function indent(e) {
                            var t = this.getSelectedElements();
                            var n = void 0,
                                i = void 0;
                            for (var _l36 = 0, _o38 = t.length; _l36 < _o38; _l36++) {
                                n = t[_l36], i = /\d+/.test(n.style.marginLeft) ? 1 * n.style.marginLeft.match(/\d+/)[0] : 0, "indent" === e ? i += 25 : i -= 25, n.style.marginLeft = (i < 0 ? 0 : i) + "px";
                            }d._findButtonEffectTag(), this.history.push();
                        },
                        toggleDisplayBlocks: function toggleDisplayBlocks() {
                            r.toggleClass(e.element.wysiwyg, "se-show-block");
                        },
                        toggleCodeView: function toggleCodeView() {
                            var t = this._variable.wysiwygActive,
                                n = this.codeViewDisabledButtons;
                            for (var _e122 = 0, _i51 = n.length; _e122 < _i51; _e122++) {
                                n[_e122].disabled = t;
                            }if (this.controllersOff(), t) e.element.code.value = r.convertHTMLForCodeView(e.element.wysiwyg), e.element.code.style.display = "block", e.element.wysiwyg.style.display = "none", this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: block"), this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: none"), "auto" === e.option.height && (e.element.code.style.height = e.element.code.scrollHeight > 0 ? e.element.code.scrollHeight + "px" : "auto"), this._variable.wysiwygActive = !1, e.element.code.focus();else {
                                var _t80 = e.element.code.value.trim();
                                e.element.wysiwyg.innerHTML = _t80.length > 0 ? r.convertContentsForEditor(_t80) : "<p><br></p>", e.element.wysiwyg.scrollTop = 0, e.element.code.style.display = "none", e.element.wysiwyg.style.display = "block", this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: none"), this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: block"), "auto" === e.option.height && (e.element.code.style.height = "0px"), this._variable.wysiwygActive = !0, this.focus();
                            }
                        },
                        toggleFullScreen: function toggleFullScreen(t) {
                            var n = e.element.topArea,
                                i = e.element.toolbar,
                                l = e.element.editorArea,
                                s = e.element.wysiwyg,
                                c = e.element.code;
                            this._variable.isFullScreen ? (this._variable.isFullScreen = !1, s.style.cssText = this._variable._wysiwygOriginCssText, c.style.cssText = this._variable._codeOriginCssText, i.style.cssText = "", l.style.cssText = this._variable._editorAreaOriginCssText, n.style.cssText = this._variable._originCssText, o.body.style.overflow = this._variable._bodyOverflow, e.option.stickyToolbar > -1 && (r.removeClass(i, "se-toolbar-sticky"), d.onScroll_window()), this._variable._fullScreenSticky && (this._variable._fullScreenSticky = !1, e.element._stickyDummy.style.display = "block", r.addClass(i, "se-toolbar-sticky")), r.removeClass(t.firstElementChild, "se-icon-reduction"), r.addClass(t.firstElementChild, "se-icon-expansion")) : (this._variable.isFullScreen = !0, n.style.position = "fixed", n.style.top = "0", n.style.left = "0", n.style.width = "100%", n.style.height = "100%", n.style.zIndex = "2147483647", "none" !== e.element._stickyDummy.style.display && (this._variable._fullScreenSticky = !0, e.element._stickyDummy.style.display = "none", r.removeClass(i, "se-toolbar-sticky")), this._variable._bodyOverflow = o.body.style.overflow, o.body.style.overflow = "hidden", this._variable._editorAreaOriginCssText = l.style.cssText, this._variable._wysiwygOriginCssText = s.style.cssText, this._variable._codeOriginCssText = c.style.cssText, l.style.cssText = i.style.cssText = "", s.style.cssText = s.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)[0], c.style.cssText = c.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)[0], i.style.width = s.style.height = c.style.height = "100%", i.style.position = "relative", this._variable.innerHeight_fullScreen = a.innerHeight - i.offsetHeight, l.style.height = this._variable.innerHeight_fullScreen + "px", r.removeClass(t.firstElementChild, "se-icon-expansion"), r.addClass(t.firstElementChild, "se-icon-reduction"));
                        },
                        print: function print() {
                            var e = r.createElement("IFRAME");
                            e.style.display = "none";
                            var t = r.createElement("DIV"),
                                n = r.createElement("STYLE");
                            n.innerHTML = r.getPageStyle(), t.className = "sun-editor-editable", t.innerHTML = this.getContents(), o.body.appendChild(e);
                            var i = e.contentWindow || e.contentDocument;
                            i.document && (i = i.document), i.head.appendChild(n), i.body.appendChild(t);
                            try {
                                if (e.focus(), -1 !== a.navigator.userAgent.indexOf("MSIE") || o.documentMode || a.StyleMedia) try {
                                    e.contentWindow.document.execCommand("print", !1, null);
                                } catch (t) {
                                    e.contentWindow.print();
                                } else e.contentWindow.print();
                            } catch (e) {
                                throw Error("[SUNEDITOR.core.print.fail] error: " + e);
                            } finally {
                                r.removeItem(e);
                            }
                        },
                        preview: function preview() {
                            var e = r.getPageStyle(),
                                t = this.getContents(),
                                n = a.open("", "_blank");
                            n.mimeType = "text/html", n.document.write('<!doctype html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1"><title>' + i.toolbar.preview + "</title><style>" + e + '</style></head><body><div class="sun-editor-editable">' + t + "</div></body></html>");
                        },
                        setContents: function setContents(t) {
                            if (c._variable.wysiwygActive) {
                                var _n54 = r.convertContentsForEditor(t);
                                _n54 !== e.element.wysiwyg.innerHTML && (e.element.wysiwyg.innerHTML = _n54, c.history.push());
                            } else {
                                var _n55 = r.convertHTMLForCodeView(t);
                                _n55 !== e.element.code.value && (e.element.code.value = _n55);
                            }
                        },
                        getContents: function getContents() {
                            var t = "";
                            t = c._variable.wysiwygActive ? e.element.wysiwyg.innerHTML : r.convertContentsForEditor(e.element.code.value);
                            var n = r.createElement("DIV");
                            n.innerHTML = t;
                            var i = r.getListChildren(n, function (e) {
                                return (/FIGCAPTION/i.test(e.nodeName)
                                );
                            });
                            for (var _e123 = 0, _t81 = i.length; _e123 < _t81; _e123++) {
                                i[_e123].removeAttribute("contenteditable");
                            }return n.innerHTML;
                        },
                        _charCount: function _charCount(t, n) {
                            var i = e.element.charCounter;
                            if (!i) return !0;
                            (!t || t < 0) && (t = 0);
                            var l = e.option.maxCharCount;
                            if (a.setTimeout(function () {
                                i.textContent = e.element.wysiwyg.textContent.length;
                            }), l > 0) {
                                var _o39 = !1;
                                var _s23 = e.element.wysiwyg.textContent.length;
                                if (_s23 > l) {
                                    c._editorRange();
                                    var _e124 = c.getRange(),
                                        _t82 = _e124.endOffset - 1,
                                        _n56 = c.getSelectionNode().textContent;
                                    c.getSelectionNode().textContent = _n56.slice(0, _e124.endOffset - 1) + _n56.slice(_e124.endOffset, _n56.length), c.setRange(_e124.endContainer, _t82, _e124.endContainer, _t82), _o39 = !0;
                                } else _s23 + t > l && (_o39 = !0);
                                if (_o39) return n && !r.hasClass(i, "se-blink") && (r.addClass(i, "se-blink"), a.setTimeout(function () {
                                    r.removeClass(i, "se-blink");
                                }, 600)), !1;
                            }
                            return !0;
                        },
                        _checkComponents: function _checkComponents() {
                            this.plugins.image && (this.initPlugins.image ? this.plugins.image.checkImagesInfo.call(this) : this.callPlugin("image", this.plugins.image.checkImagesInfo.bind(this))), this.plugins.video && (this.initPlugins.video ? this.plugins.video.checkVideosInfo.call(this) : this.callPlugin("video", this.plugins.video.checkVideosInfo.bind(this)));
                        },
                        _init: function _init() {
                            c.codeViewDisabledButtons = e.element.toolbar.querySelectorAll('.se-toolbar button:not([class~="code-view-enabled"])'), c._isInline = /inline/i.test(e.option.mode), c._isBalloon = /balloon/i.test(e.option.mode), c.commandMap = {
                                FORMAT: e.tool.format,
                                FONT: e.tool.font,
                                FONT_TOOLTIP: e.tool.fontTooltip,
                                SIZE: e.tool.fontSize,
                                ALIGN: e.tool.align,
                                LI: e.tool.list,
                                LI_ICON: e.tool.list && e.tool.list.querySelector("i"),
                                STRONG: e.tool.bold,
                                INS: e.tool.underline,
                                EM: e.tool.italic,
                                DEL: e.tool.strike,
                                SUB: e.tool.subscript,
                                SUP: e.tool.superscript,
                                OUTDENT: e.tool.outdent
                            }, c._variable._originCssText = e.element.topArea.style.cssText;
                        }
                    },
                        d = {
                        _directionKeyKeyCode: new a.RegExp("^(8|13|32|46|33|34|35|36|37|38|39|40|46|98|100|102|104)$"),
                        _historyIgnoreKeycode: new a.RegExp("^(9|1[6-8]|20|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$"),
                        _onButtonsCheck: new a.RegExp("^(STRONG|INS|EM|DEL|SUB|SUP|LI)$"),
                        _keyCodeShortcut: {
                            65: "A",
                            66: "B",
                            83: "S",
                            85: "U",
                            73: "I",
                            89: "Y",
                            90: "Z",
                            219: "[",
                            221: "]"
                        },
                        _shortcutCommand: function _shortcutCommand(e, t) {
                            var n = null;
                            switch (d._keyCodeShortcut[e]) {
                                case "A":
                                    n = "selectAll";
                                    break;
                                case "B":
                                    n = "STRONG";
                                    break;
                                case "S":
                                    t && (n = "DEL");
                                    break;
                                case "U":
                                    n = "INS";
                                    break;
                                case "I":
                                    n = "EM";
                                    break;
                                case "Z":
                                    n = t ? "redo" : "undo";
                                    break;
                                case "Y":
                                    n = "redo";
                                    break;
                                case "[":
                                    n = "outdent";
                                    break;
                                case "]":
                                    n = "indent";
                            }
                            return !!n && (c.commandHandler(c.commandMap[n], n), !0);
                        },
                        _findButtonEffectTag: function _findButtonEffectTag() {
                            var t = c.commandMap,
                                n = this._onButtonsCheck,
                                l = [],
                                o = [];
                            var s = !0,
                                a = !0,
                                d = !0,
                                u = !0,
                                h = !0,
                                g = !0,
                                p = !0,
                                m = "";

                            var _loop3 = function _loop3(f) {
                                if (1 === f.nodeType && !r.isBreak(f)) if (m = f.nodeName.toUpperCase(), o.push(m), r.isFormatElement(f)) {
                                    s && t.FORMAT && (l.push("FORMAT"), r.changeTxt(t.FORMAT, m), t.FORMAT.setAttribute("data-focus", m), s = !1);
                                    var _e127 = f.style.textAlign;
                                    a && _e127 && t.ALIGN && (l.push("ALIGN"), t.ALIGN.className = "se-icon-align-" + _e127, t.ALIGN.setAttribute("data-focus", _e127), a = !1), g && f.style.marginLeft && 1 * (f.style.marginLeft.match(/\d+/) || [0])[0] > 0 && t.OUTDENT && (l.push("OUTDENT"), t.OUTDENT.removeAttribute("disabled"), g = !1);
                                } else {
                                    if (d && r.isList(m) && t.LI && (l.push("LI"), t.LI.setAttribute("data-focus", m), /UL/i.test(m) ? (r.removeClass(t.LI_ICON, "se-icon-list-number"), r.addClass(t.LI_ICON, "se-icon-list-bullets")) : (r.removeClass(t.LI_ICON, "se-icon-list-bullets"), r.addClass(t.LI_ICON, "se-icon-list-number")), d = !1), u && f.style.fontFamily.length > 0 && t.FONT) {
                                        l.push("FONT");
                                        var _e128 = (f.style.fontFamily || f.face || i.toolbar.font).replace(/["']/g, "");
                                        r.changeTxt(t.FONT, _e128), r.changeTxt(t.FONT_TOOLTIP, _e128), u = !1;
                                    }
                                    h && f.style.fontSize.length > 0 && t.SIZE && (l.push("SIZE"), r.changeTxt(t.SIZE, f.style.fontSize), h = !1), p && /^A$/.test(m) && null === f.getAttribute("data-image-link") && c.plugins.link ? (e.link && c.controllerArray[0] === e.link.linkBtn || c.callPlugin("link", function () {
                                        c.plugins.link.call_controller_linkButton.call(c, f);
                                    }), p = !1) : p && e.link && c.controllerArray[0] === e.link.linkBtn && c.controllersOff(), n.test(m) && l.push(m);
                                }
                            };

                            for (var f = c.getSelectionNode(); !r.isWysiwygDiv(f) && f; f = f.parentNode) {
                                _loop3(f);
                            }for (var _e125 = 0; _e125 < l.length; _e125++) {
                                m = l[_e125], n.test(m) && r.addClass(t[m], "active");
                            }for (var _e126 in t) {
                                l.indexOf(_e126) > -1 || (t.FONT && /^FONT$/i.test(_e126) ? (r.changeTxt(t.FONT, i.toolbar.font), r.changeTxt(t.FONT_TOOLTIP, i.toolbar.font)) : t.SIZE && /^SIZE$/i.test(_e126) ? r.changeTxt(t.SIZE, i.toolbar.fontSize) : t.ALIGN && /^ALIGN$/i.test(_e126) ? (t.ALIGN.className = "se-icon-align-left", t.ALIGN.removeAttribute("data-focus")) : t.OUTDENT && /^OUTDENT$/i.test(_e126) ? t.OUTDENT.setAttribute("disabled", !0) : t.LI && r.isListCell(_e126) ? (t.LI.removeAttribute("data-focus"), r.removeClass(t.LI_ICON, "se-icon-list-bullets"), r.addClass(t.LI_ICON, "se-icon-list-number"), r.removeClass(t.LI, "active")) : r.removeClass(t[_e126], "active"));
                            }c._variable.currentNodes = o.reverse(), e.option.showPathLabel && (e.element.navigation.textContent = c._variable.currentNodes.join(" > "));
                        },
                        _cancelCaptionEdit: function _cancelCaptionEdit() {
                            this.setAttribute("contenteditable", !1), this.removeEventListener("blur", d._cancelCaptionEdit);
                        },
                        onMouseDown_toolbar: function onMouseDown_toolbar(e) {
                            var t = e.target;
                            if (r.getParentElement(t, ".se-submenu")) e.stopPropagation(), c._notHideToolbar = !0;else {
                                e.preventDefault();
                                var _n57 = t.getAttribute("data-command"),
                                    _i52 = t.className;
                                for (; !_n57 && !/se-menu-list/.test(_i52) && !/se-toolbar/.test(_i52);) {
                                    _n57 = (t = t.parentNode).getAttribute("data-command"), _i52 = t.className;
                                }_n57 === c._submenuName && e.stopPropagation();
                            }
                        },
                        onClick_toolbar: function onClick_toolbar(e) {
                            e.preventDefault(), e.stopPropagation();
                            var t = e.target,
                                n = t.getAttribute("data-display"),
                                i = t.getAttribute("data-command"),
                                l = t.className;
                            for (; !i && !/se-menu-list/.test(l) && !/se-toolbar/.test(l);) {
                                t = t.parentNode, i = t.getAttribute("data-command"), n = t.getAttribute("data-display"), l = t.className;
                            }if ((i || n) && !t.disabled) {
                                if (c.focus(), n) return !/submenu/.test(n) || null !== t.nextElementSibling && t === c.submenuActiveButton ? /dialog/.test(n) ? void c.callPlugin(i, function () {
                                    c.plugins.dialog.open.call(c, i, !1);
                                }) : void c.submenuOff() : void c.callPlugin(i, function () {
                                    c.submenuOn(t);
                                });
                                i && c.commandHandler(t, i);
                            }
                        },
                        onMouseDown_wysiwyg: function onMouseDown_wysiwyg(e) {
                            c._isBalloon && d._hideToolbar();
                            var t = r.getParentElement(e.target, r.isCell);
                            if (!t) return;
                            var n = c.plugins.table;
                            t === n._fixedCell || n._shift || c.callPlugin("table", function () {
                                n.onTableCellMultiSelect.call(c, t, !1);
                            });
                        },
                        onClick_wysiwyg: function onClick_wysiwyg(t) {
                            var n = t.target;
                            if ("false" === e.element.wysiwyg.getAttribute("contenteditable")) return;

                            if (/^FIGURE$/i.test(n.nodeName)) {
                                var _e129 = n.querySelector("IMG"),
                                    _i53 = n.querySelector("IFRAME");
                                if (_e129) {
                                    if (t.preventDefault(), !c.plugins.image) return;
                                    return void c.callPlugin("image", function () {
                                        var t = c.plugins.resizing.call_controller_resize.call(c, _e129, "image");
                                        c.plugins.image.onModifyMode.call(c, _e129, t), r.getParentElement(_e129, ".se-image-container") || (c.plugins.image.openModify.call(c, !0), c.plugins.image.update_image.call(c, !0, !0));
                                    });
                                }
                                if (_i53) {
                                    if (t.preventDefault(), !c.plugins.video) return;
                                    return void c.callPlugin("video", function () {
                                        var e = c.plugins.resizing.call_controller_resize.call(c, _i53, "video");
                                        c.plugins.video.onModifyMode.call(c, _i53, e);
                                    });
                                }
                            }
                            var i = r.getParentElement(n, "FIGCAPTION");
                            if (i && "ture" !== i.getAttribute("contenteditable") && (t.preventDefault(), i.setAttribute("contenteditable", !0), i.focus(), c._isInline && !c._inlineToolbarAttr.isShow)) {
                                d._showToolbarInline();
                                var _e130 = function _e130() {
                                    d._hideToolbar(), i.removeEventListener("blur", _e130);
                                };
                                i.addEventListener("blur", _e130);
                            }
                            var l = r.getFormatElement(c.getSelectionNode()),
                                o = r.getRangeFormatElement(c.getSelectionNode());
                            if (!c.getRange().collapsed || l && l !== o || "false" === n.getAttribute("contenteditable") || (c.execCommand("formatBlock", !1, r.isRangeFormatElement(o) ? "DIV" : "P"), c.focus()), c._editorRange(), d._findButtonEffectTag(), c._isBalloon) {
                                var _e131 = c.getRange();
                                _e131.collapsed ? d._hideToolbar() : d._showToolbarBalloon(_e131);
                            }
                            m.onClick && m.onClick(t);
                        },
                        _setToolbarOffset: function _setToolbarOffset(t, n, i, l, o, s, c, d, u) {
                            var h = i.offsetWidth,
                                g = i.offsetHeight,
                                p = (t ? n.left : n.right) - l - h / 2 + s,
                                m = p + h - o,
                                f = (t ? n.top - g - u : n.bottom + u) - d + c;
                            var _ = p < 0 ? 1 : m < 0 ? p : p - m - 1 - 1;
                            i.style.left = a.Math.floor(_) + "px", i.style.top = a.Math.floor(f) + "px", t ? (r.removeClass(e.element._arrow, "se-arrow-up"), r.addClass(e.element._arrow, "se-arrow-down"), e.element._arrow.style.top = g + "px") : (r.removeClass(e.element._arrow, "se-arrow-down"), r.addClass(e.element._arrow, "se-arrow-up"), e.element._arrow.style.top = -u + "px");
                            var b = a.Math.floor(h / 2 + (p - _));
                            e.element._arrow.style.left = (b + u > i.offsetWidth ? i.offsetWidth - u : b < u ? u : b) + "px";
                        },
                        _showToolbarBalloon: function _showToolbarBalloon(t) {
                            var n = t || c.getRange(),
                                i = e.element.toolbar,
                                l = a.getSelection();
                            var s = void 0;
                            if (l.focusNode === l.anchorNode) s = l.focusOffset < l.anchorOffset;else {
                                var _e132 = r.getListChildNodes(n.commonAncestorContainer);
                                s = r.getArrayIndex(_e132, l.focusNode) < r.getArrayIndex(_e132, l.anchorNode);
                            }
                            var u = n.getClientRects();
                            u = u[s ? 0 : u.length - 1];
                            var h = a.scrollX || o.documentElement.scrollLeft,
                                g = a.scrollY || o.documentElement.scrollTop,
                                p = e.element.topArea.offsetWidth,
                                m = d._getStickyOffsetTop();
                            var f = 0,
                                _ = e.element.topArea;
                            for (; _ && !/^(BODY|HTML)$/i.test(_.nodeName);) {
                                f += _.offsetLeft, _ = _.offsetParent;
                            }i.style.display = "block";
                            var b = a.Math.round(e.element._arrow.offsetWidth / 2),
                                y = i.offsetWidth,
                                v = i.offsetHeight;
                            d._setToolbarOffset(s, u, i, f, p, h, g, m, b), y === i.offsetWidth && v === i.offsetHeight || d._setToolbarOffset(s, u, i, f, p, h, g, m, b);
                        },
                        _showToolbarInline: function _showToolbarInline() {
                            var t = e.element.toolbar;
                            t.style.display = "block", c._inlineToolbarAttr.width = t.style.width = e.option.toolbarWidth, c._inlineToolbarAttr.top = t.style.top = -1 - t.offsetHeight + "px", d.onScroll_window(), c._inlineToolbarAttr.isShow = !0;
                        },
                        _hideToolbar: function _hideToolbar() {
                            c._notHideToolbar || (e.element.toolbar.style.display = "none", c._inlineToolbarAttr.isShow = !1), c._notHideToolbar = !1;
                        },
                        onKeyDown_wysiwyg: function onKeyDown_wysiwyg(t) {
                            var n = t.keyCode,
                                i = t.shiftKey,
                                l = t.ctrlKey || t.metaKey,
                                o = t.altKey;
                            if (c._isBalloon && d._hideToolbar(), l && d._shortcutCommand(n, i)) return t.preventDefault(), t.stopPropagation(), !1;
                            var s = c.getSelectionNode(),
                                a = c.getRange(),
                                u = a.startContainer !== a.endContainer,
                                h = c._resizingName;
                            var g = r.getFormatElement(s) || s,
                                p = r.getRangeFormatElement(g);
                            switch (n) {
                                case 8:
                                    if (u) break;
                                    if (h) {
                                        t.preventDefault(), t.stopPropagation(), c.plugins[h].destroy.call(c);
                                        break;
                                    }
                                    if (r.isWysiwygDiv(s.parentNode) && !s.previousSibling && r.isFormatElement(s) && !r.isListCell(s)) return t.preventDefault(), t.stopPropagation(), s.innerHTML = "<br>", !1;
                                    var _d14 = a.commonAncestorContainer;
                                    if (0 === a.startOffset && 0 === a.endOffset) {
                                        if (p && g && !r.isCell(p) && !/^FIGCAPTION$/i.test(p.nodeName)) {
                                            var _e133 = !0,
                                                _n58 = _d14;
                                            for (; _n58 && _n58 !== p && !r.isWysiwygDiv(_n58);) {
                                                if (_n58.previousSibling) {
                                                    _e133 = !1;
                                                    break;
                                                }
                                                _n58 = _n58.parentNode;
                                            }
                                            if (_e133 && p.parentNode) {
                                                t.preventDefault(), c.detachRangeFormatElement(p, r.isListCell(g) ? [g] : null, null, !1, !1);
                                                break;
                                            }
                                        }
                                        if (r.isComponent(_d14.previousSibling)) {
                                            var _e134 = _d14.previousSibling;
                                            r.removeItem(_e134);
                                        }
                                    }
                                    break;
                                case 46:
                                    if (h) {
                                        t.preventDefault(), t.stopPropagation(), c.plugins[h].destroy.call(c);
                                        break;
                                    }
                                    if ((r.isFormatElement(s) || null === s.nextSibling) && a.startOffset === s.textContent.length) {
                                        var _e135 = g.nextElementSibling;
                                        if (r.isComponent(_e135)) {
                                            t.preventDefault(), r.onlyZeroWidthSpace(g) && r.removeItem(g), (r.hasClass(_e135, "se-component") || /^IMG$/i.test(_e135.nodeName)) && (t.stopPropagation(), r.hasClass(_e135, "se-image-container") || /^IMG$/i.test(_e135.nodeName) ? (_e135 = /^IMG$/i.test(_e135.nodeName) ? _e135 : _e135.querySelector("img"), c.callPlugin("image", function () {
                                                var t = c.plugins.resizing.call_controller_resize.call(c, _e135, "image");
                                                c.plugins.image.onModifyMode.call(c, _e135, t), r.getParentElement(_e135, ".se-component") || (c.plugins.image.openModify.call(c, !0), c.plugins.image.update_image.call(c, !0, !0));
                                            })) : r.hasClass(_e135, "se-video-container") && (t.stopPropagation(), c.callPlugin("video", function () {
                                                var t = _e135.querySelector("iframe"),
                                                    n = c.plugins.resizing.call_controller_resize.call(c, t, "video");
                                                c.plugins.video.onModifyMode.call(c, t, n);
                                            })), c.history.push());
                                            break;
                                        }
                                    }
                                    break;
                                case 9:
                                    if (t.preventDefault(), l || o || r.isWysiwygDiv(s)) break;
                                    c.controllersOff();
                                    var _m4 = s;
                                    for (; !r.isCell(_m4) && !r.isWysiwygDiv(_m4);) {
                                        _m4 = _m4.parentNode;
                                    }if (_m4 && r.isCell(_m4)) {
                                        var _e136 = r.getParentElement(_m4, "table"),
                                            _t83 = r.getListChildren(_e136, r.isCell);
                                        var _n59 = i ? r.prevIdx(_t83, _m4) : r.nextIdx(_t83, _m4);
                                        _n59 !== _t83.length || i || (_n59 = 0), -1 === _n59 && i && (_n59 = _t83.length - 1);
                                        var _l37 = _t83[_n59];
                                        if (!_l37) return !1;
                                        c.setRange(_l37, 0, _l37, 0);
                                        break;
                                    }
                                    var _f = c.getSelectedElements();
                                    if (i) for (var _e137, _t84 = 0, _n60 = _f.length; _t84 < _n60; _t84++) {
                                        _e137 = _f[_t84].firstChild, /^\s{1,4}$/.test(_e137.textContent) ? r.removeItem(_e137) : /^\s{1,4}/.test(_e137.textContent) && (_e137.textContent = _e137.textContent.replace(/^\s{1,4}/, ""));
                                    } else {
                                        var _e138 = r.createTextNode(new Array(c._variable.tabSize + 1).join(" "));
                                        if (1 === _f.length) c.insertNode(_e138), c.setRange(_e138, c._variable.tabSize, _e138, c._variable.tabSize);else for (var _t85 = 0, _n61 = _f.length; _t85 < _n61; _t85++) {
                                            _f[_t85].insertBefore(_e138.cloneNode(!1), _f[_t85].firstChild);
                                        }
                                    }
                                    c.history.push();
                                    break;
                                case 13:
                                    if (u) break;
                                    g = r.getFormatElement(s), p = r.getRangeFormatElement(g);
                                    var _ = r.getParentElement(p, "FIGCAPTION");
                                    if (p && g && !r.isCell(p) && !/^FIGCAPTION$/i.test(p.nodeName) && !c.getRange().commonAncestorContainer.nextElementSibling && r.onlyZeroWidthSpace(g.innerText.trim())) {
                                        t.preventDefault();
                                        var _e139 = c.appendFormatTag(p, r.isCell(p.parentNode) ? "DIV" : r.isListCell(g) ? "P" : null);
                                        r.removeItemAllParents(g), c.setRange(_e139, 1, _e139, 1);
                                        break;
                                    }
                                    if (p && _ && r.getParentElement(p, r.isList) && (t.preventDefault(), g = c.appendFormatTag(g), c.setRange(g, 0, g, 0)), h) {
                                        t.preventDefault(), t.stopPropagation();
                                        var _n62 = e[h],
                                            _i54 = _n62._container,
                                            _l38 = _i54.previousElementSibling || _i54.nextElementSibling;
                                        var _o40 = null;
                                        r.isListCell(_i54.parentNode) ? _o40 = r.createElement("BR") : (_o40 = r.createElement(r.isFormatElement(_l38) ? _l38.nodeName : "P")).innerHTML = "<br>", _i54.parentNode.insertBefore(_o40, _i54), c.callPlugin(h, function () {
                                            c.controllersOff();
                                            var e = c.plugins.resizing.call_controller_resize.call(c, _n62._element, h);
                                            c.plugins[h].onModifyMode.call(c, _n62._element, e);
                                        }), c.history.push();
                                    }
                            }
                            if (i && /16/.test(n)) {
                                t.preventDefault(), t.stopPropagation();
                                var _e140 = c.plugins.table;
                                if (_e140 && !_e140._shift && !_e140._ref) {
                                    var _t86 = r.getParentElement(g, r.isCell);
                                    if (_t86) return void _e140.onTableCellMultiSelect.call(c, _t86, !0);
                                }
                            }
                            var f = !l && !o && 1 === t.key.length;
                            if (!c._charCount(1, f) && f) return t.preventDefault(), t.stopPropagation(), !1;
                            m.onKeyDown && m.onKeyDown(t);
                        },
                        onKeyUp_wysiwyg: function onKeyUp_wysiwyg(e) {
                            c._editorRange();
                            var t = e.keyCode;
                            var n = c.getSelectionNode();
                            if (c._isBalloon && !c.getRange().collapsed) return void d._showToolbarBalloon();
                            if (8 === t && r.isWysiwygDiv(n) && "" === n.textContent) {
                                e.preventDefault(), e.stopPropagation(), n.innerHTML = "";
                                var _t87 = r.createElement(r.isFormatElement(c._variable.currentNodes[0]) ? c._variable.currentNodes[0] : "P");
                                return _t87.innerHTML = "<br>", n.appendChild(_t87), c.setRange(_t87, 0, _t87, 0), d._findButtonEffectTag(), void c._checkComponents();
                            }
                            var i = r.getFormatElement(n),
                                l = r.getRangeFormatElement(n);
                            if (i && i !== l || (c.execCommand("formatBlock", !1, r.isRangeFormatElement(l) ? "DIV" : "P"), c.focus(), n = c.getSelectionNode()), d._directionKeyKeyCode.test(t) && d._findButtonEffectTag(), c._checkComponents(), !c._charCount(1, 1 === e.key.length) && 1 === e.key.length) return e.preventDefault(), e.stopPropagation(), !1;
                            d._historyIgnoreKeycode.test(t) || c.history.push(), m.onKeyUp && m.onKeyUp(e);
                        },
                        onScroll_wysiwyg: function onScroll_wysiwyg(e) {
                            c.controllersOff(), c._isBalloon && d._hideToolbar(), m.onScroll && m.onScroll(e);
                        },
                        onMouseDown_resizingBar: function onMouseDown_resizingBar(t) {
                            t.stopPropagation(), c._variable.resizeClientY = t.clientY, e.element.resizeBackground.style.display = "block", o.addEventListener("mousemove", d._resize_editor), o.addEventListener("mouseup", function t() {
                                e.element.resizeBackground.style.display = "none", o.removeEventListener("mousemove", d._resize_editor), o.removeEventListener("mouseup", t);
                            });
                        },
                        _resize_editor: function _resize_editor(t) {
                            var n = e.element.editorArea.offsetHeight + (t.clientY - c._variable.resizeClientY);
                            e.element.wysiwyg.style.height = e.element.code.style.height = (n < c._variable.minResizingSize ? c._variable.minResizingSize : n) + "px", c._variable.resizeClientY = t.clientY;
                        },
                        onResize_window: function onResize_window() {
                            c.controllersOff(), 0 !== e.element.toolbar.offsetWidth && (c._variable.isFullScreen ? (c._variable.innerHeight_fullScreen += a.innerHeight - e.element.toolbar.offsetHeight - c._variable.innerHeight_fullScreen, e.element.editorArea.style.height = c._variable.innerHeight_fullScreen + "px") : c._sticky && (e.element.toolbar.style.width = e.element.topArea.offsetWidth - 2 + "px", d.onScroll_window()));
                        },
                        onScroll_window: function onScroll_window() {
                            if (c._variable.isFullScreen || 0 === e.element.toolbar.offsetWidth) return;
                            var t = e.element,
                                n = t.editorArea.offsetHeight,
                                i = (this.scrollY || o.documentElement.scrollTop) + e.option.stickyToolbar,
                                l = d._getStickyOffsetTop() - (c._isInline ? t.toolbar.offsetHeight : 0);
                            i < l ? d._offStickyToolbar() : i + c._variable.minResizingSize >= n + l ? (c._sticky || d._onStickyToolbar(), t.toolbar.style.top = n + l + e.option.stickyToolbar - i - c._variable.minResizingSize + "px") : i >= l && d._onStickyToolbar();
                        },
                        _getStickyOffsetTop: function _getStickyOffsetTop() {
                            var t = e.element.topArea,
                                n = 0;
                            for (; t;) {
                                n += t.offsetTop, t = t.offsetParent;
                            }return n;
                        },
                        _onStickyToolbar: function _onStickyToolbar() {
                            var t = e.element;
                            c._isInline || (t._stickyDummy.style.height = t.toolbar.offsetHeight + "px", t._stickyDummy.style.display = "block"), t.toolbar.style.top = e.option.stickyToolbar + "px", t.toolbar.style.width = c._isInline ? c._inlineToolbarAttr.width : t.toolbar.offsetWidth + "px", r.addClass(t.toolbar, "se-toolbar-sticky"), c._sticky = !0;
                        },
                        _offStickyToolbar: function _offStickyToolbar() {
                            var t = e.element;
                            t._stickyDummy.style.display = "none", t.toolbar.style.top = c._isInline ? c._inlineToolbarAttr.top : "", t.toolbar.style.width = c._isInline ? c._inlineToolbarAttr.width : "", t.editorArea.style.marginTop = "", r.removeClass(t.toolbar, "se-toolbar-sticky"), c._sticky = !1;
                        },
                        _codeViewAutoScroll: function _codeViewAutoScroll() {
                            e.element.code.style.height = e.element.code.scrollHeight + "px";
                        },
                        onPaste_wysiwyg: function onPaste_wysiwyg(e) {
                            var t = e.clipboardData;
                            if (!t) return !0;
                            if (!c._charCount(t.getData("text/plain").length, !0)) return e.preventDefault(), e.stopPropagation(), !1;

                            var n = t.getData("text/html");
                            n = n.replace(/\/><!\[endif]>/gi, "/>");
                            n = n.replace(/<\/span><!\[endif]>/gi, "</span>");
                            n = n.replace(/<!\[if !vml]>/gi, "");
                            n = n.replace(/<!\[if !supportEmptyParas]>&nbsp;<!\[endif]>/gi, "");
                            n = n.replace(/<!\[endif]>/gi, "");
                            n = n.replace(/background:#ffffff/gi, "");
                            n = n.replace(/mso-fareast-/gi, "");
                            n = n.replace(/mso-hansi-/gi, "");
                            n = n.replace(/mso-ascii-/gi, "");
                            n = n.replace(/mso-bidi-/gi, "");
                            n = n.replace(/mso-/gi, "");
                            n = n.replace(/<img[^>]+file:\/\/[^>]+>/gi, "");
                            n && (e.stopPropagation(), e.preventDefault(), c.execCommand("insertHTML", !1, n));
                        },
                        onDragOver_wysiwyg: function onDragOver_wysiwyg(e) {
                            e.preventDefault();
                        },
                        onDrop_wysiwyg: function onDrop_wysiwyg(t) {
                            var n = t.dataTransfer;
                            if (!n) return !0;
                            var i = n.files;
                            if (i.length > 0 && c.plugins.image) d._setDropLocationSelection(t), c.callPlugin("image", function () {
                                e.image.imgInputFile.files = i, c.plugins.image.onRender_imgInput.call(c), e.image.imgInputFile.files = null;
                            });else {
                                if (!c._charCount(n.getData("text/plain").length, !0)) return t.preventDefault(), t.stopPropagation(), !1;{
                                    var _e141 = r.cleanHTML(n.getData("text/html"));
                                    _e141 && (d._setDropLocationSelection(t), c.execCommand("insertHTML", !1, _e141));
                                }
                            }
                            m.onDrop && m.onDrop(t);
                        },
                        _setDropLocationSelection: function _setDropLocationSelection(e) {
                            e.stopPropagation(), e.preventDefault();
                            var t = c.getRange();
                            c.setRange(t.startContainer, t.startOffset, t.endContainer, t.endOffset);
                        },
                        _onChange_historyStack: function _onChange_historyStack() {
                            e.tool.save && e.tool.save.removeAttribute("disabled"), m.onChange && m.onChange(c.getContents());
                        },
                        _addEvent: function _addEvent() {
                            e.element.toolbar.addEventListener("mousedown", d.onMouseDown_toolbar, !1), e.element.toolbar.addEventListener("click", d.onClick_toolbar, !1), e.element.wysiwyg.addEventListener("click", d.onClick_wysiwyg, !1), e.element.wysiwyg.addEventListener("scroll", d.onScroll_wysiwyg, !1), e.element.wysiwyg.addEventListener("keydown", d.onKeyDown_wysiwyg, !1), e.element.wysiwyg.addEventListener("keyup", d.onKeyUp_wysiwyg, !1), e.element.wysiwyg.addEventListener("paste", d.onPaste_wysiwyg, !1), e.element.wysiwyg.addEventListener("dragover", d.onDragOver_wysiwyg, !1), e.element.wysiwyg.addEventListener("drop", d.onDrop_wysiwyg, !1), (c._isBalloon || c.plugins.table) && e.element.wysiwyg.addEventListener("mousedown", d.onMouseDown_wysiwyg, !1), c.plugins.table && e.element.wysiwyg.addEventListener("touchstart", d.onMouseDown_wysiwyg, {
                                passive: !0,
                                useCapture: !1
                            }), "auto" === e.option.height && e.element.code.addEventListener("keyup", d._codeViewAutoScroll, !1), e.element.resizingBar && (/\d+/.test(e.option.height) ? e.element.resizingBar.addEventListener("mousedown", d.onMouseDown_resizingBar, !1) : r.addClass(e.element.resizingBar, "se-resizing-none")), c._isInline && e.element.wysiwyg.addEventListener("focus", d._showToolbarInline, !1), (c._isInline || c._isBalloon) && e.element.wysiwyg.addEventListener("blur", d._hideToolbar, !1), a.removeEventListener("resize", d.onResize_window), a.removeEventListener("scroll", d.onScroll_window), a.addEventListener("resize", d.onResize_window, !1), e.option.stickyToolbar > -1 && a.addEventListener("scroll", d.onScroll_window, !1);
                        },
                        _removeEvent: function _removeEvent() {
                            e.element.toolbar.removeEventListener("mousedown", d.onMouseDown_toolbar), e.element.toolbar.removeEventListener("click", d.onClick_toolbar), e.element.wysiwyg.removeEventListener("click", d.onClick_wysiwyg), e.element.wysiwyg.removeEventListener("scroll", d.onScroll_wysiwyg), e.element.wysiwyg.removeEventListener("keydown", d.onKeyDown_wysiwyg), e.element.wysiwyg.removeEventListener("keyup", d.onKeyUp_wysiwyg), e.element.wysiwyg.removeEventListener("paste", d.onPaste_wysiwyg), e.element.wysiwyg.removeEventListener("dragover", d.onDragOver_wysiwyg), e.element.wysiwyg.removeEventListener("drop", d.onDrop_wysiwyg), e.element.wysiwyg.removeEventListener("mousedown", d.onMouseDown_wysiwyg), e.element.wysiwyg.removeEventListener("touchstart", d.onMouseDown_wysiwyg, {
                                passive: !0,
                                useCapture: !1
                            }), e.element.wysiwyg.removeEventListener("focus", d._showToolbarInline), e.element.wysiwyg.removeEventListener("blur", d._hideToolbar), e.element.code.removeEventListener("keyup", d._codeViewAutoScroll), e.element.resizingBar && e.element.resizingBar.removeEventListener("mousedown", d.onMouseDown_resizingBar), a.removeEventListener("resize", d.onResize_window), a.removeEventListener("scroll", d.onScroll_window);
                        },
                        _init: function _init() {
                            this._removeEvent(), this._addEvent(), this._offStickyToolbar(), this.onResize_window();
                        }
                    },
                        m = {
                        onScroll: null,
                        onClick: null,
                        onKeyDown: null,
                        onKeyUp: null,
                        onDrop: null,
                        onChange: null,
                        onImageUpload: null,
                        onImageUploadError: null,
                        setOptions: function setOptions(o) {
                            c.plugins = o.plugins || c.plugins;
                            var s = [l, o].reduce(function (e, t) {
                                return Object.keys(t).forEach(function (n) {
                                    e[n] = t[n];
                                }), e;
                            }, {}),
                                a = h._setOptions(s, e, c.plugins, l);
                            a.callButtons && (t = a.callButtons, c.initPlugins = {}), a.plugins && (c.plugins = n = a.plugins);
                            var r = e.element,
                                u = {
                                _top: r.topArea,
                                _relative: r.relative,
                                _toolBar: r.toolbar,
                                _editorArea: r.editorArea,
                                _wysiwygArea: r.wysiwyg,
                                _codeArea: r.code,
                                _resizingBar: r.resizingBar,
                                _navigation: r.navigation,
                                _charCounter: r.charCounter,
                                _loading: r.loading,
                                _resizeBack: r.resizeBackground,
                                _stickyDummy: r._stickyDummy,
                                _arrow: r._arrow
                            };
                            l = s, c.lang = i = l.lang, c.context = e = g(e.element.originElement, u, l), c._init(), d._init(), c._checkComponents(), c._charCount(0, !1), c.focus();
                        },
                        noticeOpen: function noticeOpen(e) {
                            c.addModule([s]), s.open.call(c, e);
                        },
                        noticeClose: function noticeClose() {
                            c.addModule([s]), s.close.call(c);
                        },
                        save: function save() {
                            e.element.originElement.value = c.getContents();
                        },
                        getContext: function getContext() {
                            return e;
                        },
                        getContents: function getContents() {
                            return c.getContents();
                        },
                        getImagesInfo: function getImagesInfo() {
                            return c._variable._imagesInfo;
                        },
                        insertImage: function insertImage(e) {
                            c.plugins.image && e && (c.initPlugins.image ? c.plugins.image.submitAction.call(c, e) : c.callPlugin("image", c.plugins.image.submitAction.bind(c, e)), c.focus());
                        },
                        insertHTML: function insertHTML(e) {
                            if (!e.nodeType || 1 !== e.nodeType) {
                                var _t88 = r.createElement("DIV");
                                _t88.innerHTML = e, e = _t88.firstChild || _t88.content.firstChild;
                            }
                            var t = null;
                            (r.isFormatElement(e) || /^(IMG|IFRAME)$/i.test(e.nodeName)) && (t = r.getFormatElement(c.getSelectionNode())), c.insertNode(e, t), c.focus();
                        },
                        setContents: function setContents(e) {
                            c.setContents(e);
                        },
                        appendContents: function appendContents(t) {
                            c._variable.wysiwygActive ? e.element.wysiwyg.innerHTML += r.convertContentsForEditor(t) : e.element.code.value += r.convertHTMLForCodeView(t), c.history.push();
                        },
                        disabled: function disabled() {
                            e.tool.cover.style.display = "block", e.element.wysiwyg.setAttribute("contenteditable", !1), e.element.code.setAttribute("disabled", "disabled");
                        },
                        enabled: function enabled() {
                            e.tool.cover.style.display = "none", e.element.wysiwyg.setAttribute("contenteditable", !0), e.element.code.removeAttribute("disabled");
                        },
                        show: function show() {
                            var t = e.element.topArea.style;
                            "none" === t.display && (t.display = e.option.display);
                        },
                        hide: function hide() {
                            e.element.topArea.style.display = "none";
                        },
                        destroy: function destroy() {
                            d._removeEvent(), r.removeItem(e.element.topArea), a.Object.keys(c).forEach(function (e) {
                                delete c[e];
                            }), a.Object.keys(d).forEach(function (e) {
                                delete d[e];
                            }), a.Object.keys(e).forEach(function (t) {
                                delete e[t];
                            }), a.Object.keys(t).forEach(function (e) {
                                delete t[e];
                            }), a.Object.keys(this).forEach(function (e) {
                                delete this[e];
                            }.bind(this));
                        }
                    };
                    return c._init(), d._addEvent(), c.plugins.image && e.element.wysiwyg.getElementsByTagName("IMG").length > 0 ? a.setTimeout(function () {
                        c.callPlugin("image", function () {
                            var t = this.plugins.image.setImagesInfo,
                                n = e.element.wysiwyg.getElementsByTagName("IMG");
                            this.context.image._uploadFileLength = n.length;
                            for (var _e142, _i55 = 0, _l39 = n.length; _i55 < _l39; _i55++) {
                                (_e142 = n[_i55]).removeAttribute("data-index"), t.call(this, _e142, {
                                    name: _e142.getAttribute("data-file-name") || _e142.src.split("/").pop(),
                                    size: _e142.getAttribute("data-file-size") || 0
                                });
                            }this.history = p(this, d._onChange_historyStack);
                        }.bind(c));
                    }) : c.history = p(c, d._onChange_historyStack), c._charCount(0, !1), m;
                }(g(i, l.constructed, l.options), l.pluginCallButtons, l.plugins, l.options.lang, t);
            }
        };
        window.TOP_SUNEDITOR = m.init({
            plugins: a
        });
    }
});var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) : typeof define === 'function' && define.amd ? define(['react'], factory) : global.styled = factory(global.React);
})(this, function (React) {
    'use strict';

    var React__default = 'default' in React ? React['default'] : React;

    function isStyledComponent(target) {
        return target && typeof target.styledComponentId === 'string';
    }

    var interleave = function interleave(strings, interpolations) {
        var result = [strings[0]];

        for (var i = 0, len = interpolations.length; i < len; i += 1) {
            result.push(interpolations[i], strings[i + 1]);
        }

        return result;
    };

    var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
    };

    var classCallCheck = function classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    var createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target;
    };

    var inherits = function inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var objectWithoutProperties = function objectWithoutProperties(obj, keys) {
        var target = {};

        for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
        }

        return target;
    };

    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
    };

    var isPlainObject = function isPlainObject(x) {
        return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x.constructor === Object;
    };

    var EMPTY_ARRAY = Object.freeze([]);
    var EMPTY_OBJECT = Object.freeze({});

    function isFunction(test) {
        return typeof test === 'function';
    }

    function unwrapExports(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
    }

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var reactIs_production_min = createCommonjsModule(function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: !0 });
        var b = "function" === typeof Symbol && Symbol.for,
            c = b ? Symbol.for("react.element") : 60103,
            d = b ? Symbol.for("react.portal") : 60106,
            e = b ? Symbol.for("react.fragment") : 60107,
            f = b ? Symbol.for("react.strict_mode") : 60108,
            g = b ? Symbol.for("react.profiler") : 60114,
            h = b ? Symbol.for("react.provider") : 60109,
            k = b ? Symbol.for("react.context") : 60110,
            l = b ? Symbol.for("react.async_mode") : 60111,
            m = b ? Symbol.for("react.concurrent_mode") : 60111,
            n = b ? Symbol.for("react.forward_ref") : 60112,
            p = b ? Symbol.for("react.suspense") : 60113,
            q = b ? Symbol.for("react.memo") : 60115,
            r = b ? Symbol.for("react.lazy") : 60116;

        function t(a) {
            if ("object" === (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) && null !== a) {
                var u = a.$$typeof;
                switch (u) {
                    case c:
                        switch (a = a.type, a) {
                            case l:
                            case m:
                            case e:
                            case g:
                            case f:
                            case p:
                                return a;
                            default:
                                switch (a = a && a.$$typeof, a) {
                                    case k:
                                    case n:
                                    case h:
                                        return a;
                                    default:
                                        return u;
                                }
                        }
                    case r:
                    case q:
                    case d:
                        return u;
                }
            }
        }

        function v(a) {
            return t(a) === m;
        }exports.typeOf = t;
        exports.AsyncMode = l;
        exports.ConcurrentMode = m;
        exports.ContextConsumer = k;
        exports.ContextProvider = h;
        exports.Element = c;
        exports.ForwardRef = n;
        exports.Fragment = e;
        exports.Lazy = r;
        exports.Memo = q;
        exports.Portal = d;
        exports.Profiler = g;
        exports.StrictMode = f;
        exports.Suspense = p;
        exports.isValidElementType = function (a) {
            return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
        };
        exports.isAsyncMode = function (a) {
            return v(a) || t(a) === l;
        };
        exports.isConcurrentMode = v;
        exports.isContextConsumer = function (a) {
            return t(a) === k;
        };
        exports.isContextProvider = function (a) {
            return t(a) === h;
        };
        exports.isElement = function (a) {
            return "object" === (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) && null !== a && a.$$typeof === c;
        };
        exports.isForwardRef = function (a) {
            return t(a) === n;
        };
        exports.isFragment = function (a) {
            return t(a) === e;
        };
        exports.isLazy = function (a) {
            return t(a) === r;
        };
        exports.isMemo = function (a) {
            return t(a) === q;
        };
        exports.isPortal = function (a) {
            return t(a) === d;
        };
        exports.isProfiler = function (a) {
            return t(a) === g;
        };
        exports.isStrictMode = function (a) {
            return t(a) === f;
        };
        exports.isSuspense = function (a) {
            return t(a) === p;
        };
    });

    unwrapExports(reactIs_production_min);
    var reactIs_production_min_1 = reactIs_production_min.typeOf;
    var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
    var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
    var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
    var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
    var reactIs_production_min_6 = reactIs_production_min.Element;
    var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
    var reactIs_production_min_8 = reactIs_production_min.Fragment;
    var reactIs_production_min_9 = reactIs_production_min.Lazy;
    var reactIs_production_min_10 = reactIs_production_min.Memo;
    var reactIs_production_min_11 = reactIs_production_min.Portal;
    var reactIs_production_min_12 = reactIs_production_min.Profiler;
    var reactIs_production_min_13 = reactIs_production_min.StrictMode;
    var reactIs_production_min_14 = reactIs_production_min.Suspense;
    var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
    var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
    var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
    var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
    var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
    var reactIs_production_min_20 = reactIs_production_min.isElement;
    var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
    var reactIs_production_min_22 = reactIs_production_min.isFragment;
    var reactIs_production_min_23 = reactIs_production_min.isLazy;
    var reactIs_production_min_24 = reactIs_production_min.isMemo;
    var reactIs_production_min_25 = reactIs_production_min.isPortal;
    var reactIs_production_min_26 = reactIs_production_min.isProfiler;
    var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
    var reactIs_production_min_28 = reactIs_production_min.isSuspense;

    var reactIs_development = createCommonjsModule(function (module, exports) {

        {
            (function () {

                Object.defineProperty(exports, '__esModule', { value: true });

                var hasSymbol = typeof Symbol === 'function' && Symbol.for;

                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
                var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

                function isValidElementType(type) {
                    return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof2(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
                }

                var lowPriorityWarning = function lowPriorityWarning() {};

                {
                    var printWarning = function printWarning(format) {
                        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            args[_key - 1] = arguments[_key];
                        }

                        var argIndex = 0;
                        var message = 'Warning: ' + format.replace(/%s/g, function () {
                            return args[argIndex++];
                        });
                        if (typeof console !== 'undefined') {
                            console.warn(message);
                        }
                        try {
                            throw new Error(message);
                        } catch (x) {}
                    };

                    lowPriorityWarning = function lowPriorityWarning(condition, format) {
                        if (format === undefined) {
                            throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
                        }
                        if (!condition) {
                            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                                args[_key2 - 2] = arguments[_key2];
                            }

                            printWarning.apply(undefined, [format].concat(args));
                        }
                    };
                }

                var lowPriorityWarning$1 = lowPriorityWarning;

                function typeOf(object) {
                    if ((typeof object === 'undefined' ? 'undefined' : _typeof2(object)) === 'object' && object !== null) {
                        var $$typeof = object.$$typeof;
                        switch ($$typeof) {
                            case REACT_ELEMENT_TYPE:
                                var type = object.type;

                                switch (type) {
                                    case REACT_ASYNC_MODE_TYPE:
                                    case REACT_CONCURRENT_MODE_TYPE:
                                    case REACT_FRAGMENT_TYPE:
                                    case REACT_PROFILER_TYPE:
                                    case REACT_STRICT_MODE_TYPE:
                                    case REACT_SUSPENSE_TYPE:
                                        return type;
                                    default:
                                        var $$typeofType = type && type.$$typeof;

                                        switch ($$typeofType) {
                                            case REACT_CONTEXT_TYPE:
                                            case REACT_FORWARD_REF_TYPE:
                                            case REACT_PROVIDER_TYPE:
                                                return $$typeofType;
                                            default:
                                                return $$typeof;
                                        }
                                }
                            case REACT_LAZY_TYPE:
                            case REACT_MEMO_TYPE:
                            case REACT_PORTAL_TYPE:
                                return $$typeof;
                        }
                    }

                    return undefined;
                }

                var AsyncMode = REACT_ASYNC_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;

                var hasWarnedAboutDeprecatedIsAsyncMode = false;

                function isAsyncMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                            hasWarnedAboutDeprecatedIsAsyncMode = true;
                            lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                        }
                    }
                    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
                }

                function isConcurrentMode(object) {
                    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }

                function isContextConsumer(object) {
                    return typeOf(object) === REACT_CONTEXT_TYPE;
                }

                function isContextProvider(object) {
                    return typeOf(object) === REACT_PROVIDER_TYPE;
                }

                function isElement(object) {
                    return (typeof object === 'undefined' ? 'undefined' : _typeof2(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }

                function isForwardRef(object) {
                    return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }

                function isFragment(object) {
                    return typeOf(object) === REACT_FRAGMENT_TYPE;
                }

                function isLazy(object) {
                    return typeOf(object) === REACT_LAZY_TYPE;
                }

                function isMemo(object) {
                    return typeOf(object) === REACT_MEMO_TYPE;
                }

                function isPortal(object) {
                    return typeOf(object) === REACT_PORTAL_TYPE;
                }

                function isProfiler(object) {
                    return typeOf(object) === REACT_PROFILER_TYPE;
                }

                function isStrictMode(object) {
                    return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }

                function isSuspense(object) {
                    return typeOf(object) === REACT_SUSPENSE_TYPE;
                }

                exports.typeOf = typeOf;
                exports.AsyncMode = AsyncMode;
                exports.ConcurrentMode = ConcurrentMode;
                exports.ContextConsumer = ContextConsumer;
                exports.ContextProvider = ContextProvider;
                exports.Element = Element;
                exports.ForwardRef = ForwardRef;
                exports.Fragment = Fragment;
                exports.Lazy = Lazy;
                exports.Memo = Memo;
                exports.Portal = Portal;
                exports.Profiler = Profiler;
                exports.StrictMode = StrictMode;
                exports.Suspense = Suspense;
                exports.isValidElementType = isValidElementType;
                exports.isAsyncMode = isAsyncMode;
                exports.isConcurrentMode = isConcurrentMode;
                exports.isContextConsumer = isContextConsumer;
                exports.isContextProvider = isContextProvider;
                exports.isElement = isElement;
                exports.isForwardRef = isForwardRef;
                exports.isFragment = isFragment;
                exports.isLazy = isLazy;
                exports.isMemo = isMemo;
                exports.isPortal = isPortal;
                exports.isProfiler = isProfiler;
                exports.isStrictMode = isStrictMode;
                exports.isSuspense = isSuspense;
            })();
        }
    });

    unwrapExports(reactIs_development);
    var reactIs_development_1 = reactIs_development.typeOf;
    var reactIs_development_2 = reactIs_development.AsyncMode;
    var reactIs_development_3 = reactIs_development.ConcurrentMode;
    var reactIs_development_4 = reactIs_development.ContextConsumer;
    var reactIs_development_5 = reactIs_development.ContextProvider;
    var reactIs_development_6 = reactIs_development.Element;
    var reactIs_development_7 = reactIs_development.ForwardRef;
    var reactIs_development_8 = reactIs_development.Fragment;
    var reactIs_development_9 = reactIs_development.Lazy;
    var reactIs_development_10 = reactIs_development.Memo;
    var reactIs_development_11 = reactIs_development.Portal;
    var reactIs_development_12 = reactIs_development.Profiler;
    var reactIs_development_13 = reactIs_development.StrictMode;
    var reactIs_development_14 = reactIs_development.Suspense;
    var reactIs_development_15 = reactIs_development.isValidElementType;
    var reactIs_development_16 = reactIs_development.isAsyncMode;
    var reactIs_development_17 = reactIs_development.isConcurrentMode;
    var reactIs_development_18 = reactIs_development.isContextConsumer;
    var reactIs_development_19 = reactIs_development.isContextProvider;
    var reactIs_development_20 = reactIs_development.isElement;
    var reactIs_development_21 = reactIs_development.isForwardRef;
    var reactIs_development_22 = reactIs_development.isFragment;
    var reactIs_development_23 = reactIs_development.isLazy;
    var reactIs_development_24 = reactIs_development.isMemo;
    var reactIs_development_25 = reactIs_development.isPortal;
    var reactIs_development_26 = reactIs_development.isProfiler;
    var reactIs_development_27 = reactIs_development.isStrictMode;
    var reactIs_development_28 = reactIs_development.isSuspense;

    var reactIs = createCommonjsModule(function (module) {

        {
            module.exports = reactIs_development;
        }
    });
    var reactIs_1 = reactIs.isElement;
    var reactIs_2 = reactIs.isValidElementType;
    var reactIs_3 = reactIs.ForwardRef;

    function getComponentName(target) {
        return typeof target === 'string' && target || target.displayName || target.name || 'Component';
    }

    function isStatelessFunction(test) {
        return typeof test === 'function' && !(test.prototype && test.prototype.isReactComponent);
    }

    var SC_ATTR = typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || 'data-styled';

    var SC_VERSION_ATTR = 'data-styled-version';

    var SC_STREAM_ATTR = 'data-styled-streamed';

    var IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;

    var DISABLE_SPEEDY = typeof SC_DISABLE_SPEEDY === 'boolean' && SC_DISABLE_SPEEDY || typeof process !== 'undefined' && (process.env.REACT_APP_SC_DISABLE_SPEEDY || process.env.SC_DISABLE_SPEEDY) || "development" !== 'production';

    var STATIC_EXECUTION_CONTEXT = {};

    var ERRORS = {
        "1": "Cannot create styled-component for component: %s.\n\n",
        "2": "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
        "3": "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
        "4": "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
        "5": "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
        "6": "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
        "7": "ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n",
        "8": "ThemeProvider: Please make your \"theme\" prop an object.\n\n",
        "9": "Missing document `<head>`\n\n",
        "10": "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
        "11": "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
        "12": "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
        "13": "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n"
    };

    function format() {
        var a = arguments.length <= 0 ? undefined : arguments[0];
        var b = [];

        for (var c = 1, len = arguments.length; c < len; c += 1) {
            b.push(arguments.length <= c ? undefined : arguments[c]);
        }

        b.forEach(function (d) {
            a = a.replace(/%[a-z]/, d);
        });

        return a;
    }

    var StyledComponentsError = function (_Error) {
        inherits(StyledComponentsError, _Error);

        function StyledComponentsError(code) {
            classCallCheck(this, StyledComponentsError);

            for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                interpolations[_key - 1] = arguments[_key];
            }

            if (false) {
                var _this;
            } else {
                var _this = possibleConstructorReturn(this, _Error.call(this, format.apply(undefined, [ERRORS[code]].concat(interpolations)).trim()));
            }
            return possibleConstructorReturn(_this);
        }

        return StyledComponentsError;
    }(Error);

    var SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm;

    var extractComps = function extractComps(maybeCSS) {
        var css = '' + (maybeCSS || '');
        var existingComponents = [];
        css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {
            existingComponents.push({ componentId: componentId, matchIndex: matchIndex });
            return match;
        });
        return existingComponents.map(function (_ref, i) {
            var componentId = _ref.componentId,
                matchIndex = _ref.matchIndex;

            var nextComp = existingComponents[i + 1];
            var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);
            return { componentId: componentId, cssFromDOM: cssFromDOM };
        });
    };

    var stylis_min = createCommonjsModule(function (module, exports) {
        !function (e) {
            module.exports = e(null);
        }(function e(a) {
            var r = /^\0+/g,
                c = /[\0\r\f]/g,
                s = /: */g,
                t = /zoo|gra/,
                i = /([,: ])(transform)/g,
                f = /,+\s*(?![^(]*[)])/g,
                n = / +\s*(?![^(]*[)])/g,
                l = / *[\0] */g,
                o = /,\r+?/g,
                h = /([\t\r\n ])*\f?&/g,
                u = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,
                d = /\W+/g,
                b = /@(k\w+)\s*(\S*)\s*/,
                p = /::(place)/g,
                k = /:(read-only)/g,
                g = /\s+(?=[{\];=:>])/g,
                A = /([[}=:>])\s+/g,
                C = /(\{[^{]+?);(?=\})/g,
                w = /\s{2,}/g,
                v = /([^\(])(:+) */g,
                m = /[svh]\w+-[tblr]{2}/,
                x = /\(\s*(.*)\s*\)/g,
                $ = /([\s\S]*?);/g,
                y = /-self|flex-/g,
                O = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
                j = /stretch|:\s*\w+\-(?:conte|avail)/,
                z = /([^-])(image-set\()/,
                N = "-webkit-",
                S = "-moz-",
                F = "-ms-",
                W = 59,
                q = 125,
                B = 123,
                D = 40,
                E = 41,
                G = 91,
                H = 93,
                I = 10,
                J = 13,
                K = 9,
                L = 64,
                M = 32,
                P = 38,
                Q = 45,
                R = 95,
                T = 42,
                U = 44,
                V = 58,
                X = 39,
                Y = 34,
                Z = 47,
                _ = 62,
                ee = 43,
                ae = 126,
                re = 0,
                ce = 12,
                se = 11,
                te = 107,
                ie = 109,
                fe = 115,
                ne = 112,
                le = 111,
                oe = 105,
                he = 99,
                ue = 100,
                de = 112,
                be = 1,
                pe = 1,
                ke = 0,
                ge = 1,
                Ae = 1,
                Ce = 1,
                we = 0,
                ve = 0,
                me = 0,
                xe = [],
                $e = [],
                ye = 0,
                Oe = null,
                je = -2,
                ze = -1,
                Ne = 0,
                Se = 1,
                Fe = 2,
                We = 3,
                qe = 0,
                Be = 1,
                De = "",
                Ee = "",
                Ge = "";

            function He(e, a, s, t, i) {
                for (var f, n, o = 0, h = 0, u = 0, d = 0, g = 0, A = 0, C = 0, w = 0, m = 0, $ = 0, y = 0, O = 0, j = 0, z = 0, R = 0, we = 0, $e = 0, Oe = 0, je = 0, ze = s.length, Je = ze - 1, Re = "", Te = "", Ue = "", Ve = "", Xe = "", Ye = ""; R < ze;) {
                    if (C = s.charCodeAt(R), R === Je) if (h + d + u + o !== 0) {
                        if (0 !== h) C = h === Z ? I : Z;
                        d = u = o = 0, ze++, Je++;
                    }if (h + d + u + o === 0) {
                        if (R === Je) {
                            if (we > 0) Te = Te.replace(c, "");
                            if (Te.trim().length > 0) {
                                switch (C) {
                                    case M:
                                    case K:
                                    case W:
                                    case J:
                                    case I:
                                        break;
                                    default:
                                        Te += s.charAt(R);
                                }
                                C = W;
                            }
                        }
                        if (1 === $e) switch (C) {
                            case B:
                            case q:
                            case W:
                            case Y:
                            case X:
                            case D:
                            case E:
                            case U:
                                $e = 0;
                            case K:
                            case J:
                            case I:
                            case M:
                                break;
                            default:
                                for ($e = 0, je = R, g = C, R--, C = W; je < ze;) {
                                    switch (s.charCodeAt(je++)) {
                                        case I:
                                        case J:
                                        case W:
                                            ++R, C = g, je = ze;
                                            break;
                                        case V:
                                            if (we > 0) ++R, C = g;
                                        case B:
                                            je = ze;
                                    }
                                }}
                        switch (C) {
                            case B:
                                for (g = (Te = Te.trim()).charCodeAt(0), y = 1, je = ++R; R < ze;) {
                                    switch (C = s.charCodeAt(R)) {
                                        case B:
                                            y++;
                                            break;
                                        case q:
                                            y--;
                                            break;
                                        case Z:
                                            switch (A = s.charCodeAt(R + 1)) {
                                                case T:
                                                case Z:
                                                    R = Qe(A, R, Je, s);
                                            }
                                            break;
                                        case G:
                                            C++;
                                        case D:
                                            C++;
                                        case Y:
                                        case X:
                                            for (; R++ < Je && s.charCodeAt(R) !== C;) {}
                                    }
                                    if (0 === y) break;
                                    R++;
                                }
                                if (Ue = s.substring(je, R), g === re) g = (Te = Te.replace(r, "").trim()).charCodeAt(0);
                                switch (g) {
                                    case L:
                                        if (we > 0) Te = Te.replace(c, "");
                                        switch (A = Te.charCodeAt(1)) {
                                            case ue:
                                            case ie:
                                            case fe:
                                            case Q:
                                                f = a;
                                                break;
                                            default:
                                                f = xe;
                                        }
                                        if (je = (Ue = He(a, f, Ue, A, i + 1)).length, me > 0 && 0 === je) je = Te.length;
                                        if (ye > 0) if (f = Ie(xe, Te, Oe), n = Pe(We, Ue, f, a, pe, be, je, A, i, t), Te = f.join(""), void 0 !== n) if (0 === (je = (Ue = n.trim()).length)) A = 0, Ue = "";
                                        if (je > 0) switch (A) {
                                            case fe:
                                                Te = Te.replace(x, Me);
                                            case ue:
                                            case ie:
                                            case Q:
                                                Ue = Te + "{" + Ue + "}";
                                                break;
                                            case te:
                                                if (Ue = (Te = Te.replace(b, "$1 $2" + (Be > 0 ? De : ""))) + "{" + Ue + "}", 1 === Ae || 2 === Ae && Le("@" + Ue, 3)) Ue = "@" + N + Ue + "@" + Ue;else Ue = "@" + Ue;
                                                break;
                                            default:
                                                if (Ue = Te + Ue, t === de) Ve += Ue, Ue = "";
                                        } else Ue = "";
                                        break;
                                    default:
                                        Ue = He(a, Ie(a, Te, Oe), Ue, t, i + 1);
                                }
                                Xe += Ue, O = 0, $e = 0, z = 0, we = 0, Oe = 0, j = 0, Te = "", Ue = "", C = s.charCodeAt(++R);
                                break;
                            case q:
                            case W:
                                if ((je = (Te = (we > 0 ? Te.replace(c, "") : Te).trim()).length) > 1) {
                                    if (0 === z) if ((g = Te.charCodeAt(0)) === Q || g > 96 && g < 123) je = (Te = Te.replace(" ", ":")).length;
                                    if (ye > 0) if (void 0 !== (n = Pe(Se, Te, a, e, pe, be, Ve.length, t, i, t))) if (0 === (je = (Te = n.trim()).length)) Te = "\0\0";
                                    switch (g = Te.charCodeAt(0), A = Te.charCodeAt(1), g) {
                                        case re:
                                            break;
                                        case L:
                                            if (A === oe || A === he) {
                                                Ye += Te + s.charAt(R);break;
                                            }
                                        default:
                                            if (Te.charCodeAt(je - 1) === V) break;
                                            Ve += Ke(Te, g, A, Te.charCodeAt(2));
                                    }
                                }
                                O = 0, $e = 0, z = 0, we = 0, Oe = 0, Te = "", C = s.charCodeAt(++R);
                        }
                    }
                    switch (C) {
                        case J:
                        case I:
                            if (h + d + u + o + ve === 0) switch ($) {
                                case E:
                                case X:
                                case Y:
                                case L:
                                case ae:
                                case _:
                                case T:
                                case ee:
                                case Z:
                                case Q:
                                case V:
                                case U:
                                case W:
                                case B:
                                case q:
                                    break;
                                default:
                                    if (z > 0) $e = 1;
                            }
                            if (h === Z) h = 0;else if (ge + O === 0 && t !== te && Te.length > 0) we = 1, Te += "\0";
                            if (ye * qe > 0) Pe(Ne, Te, a, e, pe, be, Ve.length, t, i, t);
                            be = 1, pe++;
                            break;
                        case W:
                        case q:
                            if (h + d + u + o === 0) {
                                be++;break;
                            }
                        default:
                            switch (be++, Re = s.charAt(R), C) {
                                case K:
                                case M:
                                    if (d + o + h === 0) switch (w) {
                                        case U:
                                        case V:
                                        case K:
                                        case M:
                                            Re = "";
                                            break;
                                        default:
                                            if (C !== M) Re = " ";
                                    }
                                    break;
                                case re:
                                    Re = "\\0";
                                    break;
                                case ce:
                                    Re = "\\f";
                                    break;
                                case se:
                                    Re = "\\v";
                                    break;
                                case P:
                                    if (d + h + o === 0 && ge > 0) Oe = 1, we = 1, Re = "\f" + Re;
                                    break;
                                case 108:
                                    if (d + h + o + ke === 0 && z > 0) switch (R - z) {
                                        case 2:
                                            if (w === ne && s.charCodeAt(R - 3) === V) ke = w;
                                        case 8:
                                            if (m === le) ke = m;
                                    }
                                    break;
                                case V:
                                    if (d + h + o === 0) z = R;
                                    break;
                                case U:
                                    if (h + u + d + o === 0) we = 1, Re += "\r";
                                    break;
                                case Y:
                                case X:
                                    if (0 === h) d = d === C ? 0 : 0 === d ? C : d;
                                    break;
                                case G:
                                    if (d + h + u === 0) o++;
                                    break;
                                case H:
                                    if (d + h + u === 0) o--;
                                    break;
                                case E:
                                    if (d + h + o === 0) u--;
                                    break;
                                case D:
                                    if (d + h + o === 0) {
                                        if (0 === O) switch (2 * w + 3 * m) {
                                            case 533:
                                                break;
                                            default:
                                                y = 0, O = 1;
                                        }
                                        u++;
                                    }
                                    break;
                                case L:
                                    if (h + u + d + o + z + j === 0) j = 1;
                                    break;
                                case T:
                                case Z:
                                    if (d + o + u > 0) break;
                                    switch (h) {
                                        case 0:
                                            switch (2 * C + 3 * s.charCodeAt(R + 1)) {
                                                case 235:
                                                    h = Z;
                                                    break;
                                                case 220:
                                                    je = R, h = T;
                                            }
                                            break;
                                        case T:
                                            if (C === Z && w === T && je + 2 !== R) {
                                                if (33 === s.charCodeAt(je + 2)) Ve += s.substring(je, R + 1);
                                                Re = "", h = 0;
                                            }
                                    }
                            }
                            if (0 === h) {
                                if (ge + d + o + j === 0 && t !== te && C !== W) switch (C) {
                                    case U:
                                    case ae:
                                    case _:
                                    case ee:
                                    case E:
                                    case D:
                                        if (0 === O) {
                                            switch (w) {
                                                case K:
                                                case M:
                                                case I:
                                                case J:
                                                    Re += "\0";
                                                    break;
                                                default:
                                                    Re = "\0" + Re + (C === U ? "" : "\0");
                                            }
                                            we = 1;
                                        } else switch (C) {
                                            case D:
                                                if (z + 7 === R && 108 === w) z = 0;
                                                O = ++y;
                                                break;
                                            case E:
                                                if (0 == (O = --y)) we = 1, Re += "\0";
                                        }
                                        break;
                                    case K:
                                    case M:
                                        switch (w) {
                                            case re:
                                            case B:
                                            case q:
                                            case W:
                                            case U:
                                            case ce:
                                            case K:
                                            case M:
                                            case I:
                                            case J:
                                                break;
                                            default:
                                                if (0 === O) we = 1, Re += "\0";
                                        }
                                }
                                if (Te += Re, C !== M && C !== K) $ = C;
                            }
                    }
                    m = w, w = C, R++;
                }
                if (je = Ve.length, me > 0) if (0 === je && 0 === Xe.length && 0 === a[0].length == false) if (t !== ie || 1 === a.length && (ge > 0 ? Ee : Ge) === a[0]) je = a.join(",").length + 2;
                if (je > 0) {
                    if (f = 0 === ge && t !== te ? function (e) {
                        for (var a, r, s = 0, t = e.length, i = Array(t); s < t; ++s) {
                            for (var f = e[s].split(l), n = "", o = 0, h = 0, u = 0, d = 0, b = f.length; o < b; ++o) {
                                if (0 === (h = (r = f[o]).length) && b > 1) continue;
                                if (u = n.charCodeAt(n.length - 1), d = r.charCodeAt(0), a = "", 0 !== o) switch (u) {
                                    case T:
                                    case ae:
                                    case _:
                                    case ee:
                                    case M:
                                    case D:
                                        break;
                                    default:
                                        a = " ";
                                }
                                switch (d) {
                                    case P:
                                        r = a + Ee;
                                    case ae:
                                    case _:
                                    case ee:
                                    case M:
                                    case E:
                                    case D:
                                        break;
                                    case G:
                                        r = a + r + Ee;
                                        break;
                                    case V:
                                        switch (2 * r.charCodeAt(1) + 3 * r.charCodeAt(2)) {
                                            case 530:
                                                if (Ce > 0) {
                                                    r = a + r.substring(8, h - 1);break;
                                                }
                                            default:
                                                if (o < 1 || f[o - 1].length < 1) r = a + Ee + r;
                                        }
                                        break;
                                    case U:
                                        a = "";
                                    default:
                                        if (h > 1 && r.indexOf(":") > 0) r = a + r.replace(v, "$1" + Ee + "$2");else r = a + r + Ee;
                                }
                                n += r;
                            }
                            i[s] = n.replace(c, "").trim();
                        }
                        return i;
                    }(a) : a, ye > 0) if (void 0 !== (n = Pe(Fe, Ve, f, e, pe, be, je, t, i, t)) && 0 === (Ve = n).length) return Ye + Ve + Xe;
                    if (Ve = f.join(",") + "{" + Ve + "}", Ae * ke != 0) {
                        if (2 === Ae && !Le(Ve, 2)) ke = 0;
                        switch (ke) {
                            case le:
                                Ve = Ve.replace(k, ":" + S + "$1") + Ve;
                                break;
                            case ne:
                                Ve = Ve.replace(p, "::" + N + "input-$1") + Ve.replace(p, "::" + S + "$1") + Ve.replace(p, ":" + F + "input-$1") + Ve;
                        }
                        ke = 0;
                    }
                }
                return Ye + Ve + Xe;
            }

            function Ie(e, a, r) {
                var c = a.trim().split(o),
                    s = c,
                    t = c.length,
                    i = e.length;
                switch (i) {
                    case 0:
                    case 1:
                        for (var f = 0, n = 0 === i ? "" : e[0] + " "; f < t; ++f) {
                            s[f] = Je(n, s[f], r, i).trim();
                        }break;
                    default:
                        f = 0;
                        var l = 0;
                        for (s = []; f < t; ++f) {
                            for (var h = 0; h < i; ++h) {
                                s[l++] = Je(e[h] + " ", c[f], r, i).trim();
                            }
                        }}
                return s;
            }

            function Je(e, a, r, c) {
                var s = a,
                    t = s.charCodeAt(0);
                if (t < 33) t = (s = s.trim()).charCodeAt(0);
                switch (t) {
                    case P:
                        switch (ge + c) {
                            case 0:
                            case 1:
                                if (0 === e.trim().length) break;
                            default:
                                return s.replace(h, "$1" + e.trim());
                        }
                        break;
                    case V:
                        switch (s.charCodeAt(1)) {
                            case 103:
                                if (Ce > 0 && ge > 0) return s.replace(u, "$1").replace(h, "$1" + Ge);
                                break;
                            default:
                                return e.trim() + s.replace(h, "$1" + e.trim());
                        }
                    default:
                        if (r * ge > 0 && s.indexOf("\f") > 0) return s.replace(h, (e.charCodeAt(0) === V ? "" : "$1") + e.trim());
                }
                return e + s;
            }

            function Ke(e, a, r, c) {
                var l,
                    o = 0,
                    h = e + ";",
                    u = 2 * a + 3 * r + 4 * c;
                if (944 === u) return function (e) {
                    var a = e.length,
                        r = e.indexOf(":", 9) + 1,
                        c = e.substring(0, r).trim(),
                        s = e.substring(r, a - 1).trim();
                    switch (e.charCodeAt(9) * Be) {
                        case 0:
                            break;
                        case Q:
                            if (110 !== e.charCodeAt(10)) break;
                        default:
                            for (var t = s.split((s = "", f)), i = 0, r = 0, a = t.length; i < a; r = 0, ++i) {
                                for (var l = t[i], o = l.split(n); l = o[r];) {
                                    var h = l.charCodeAt(0);
                                    if (1 === Be && (h > L && h < 90 || h > 96 && h < 123 || h === R || h === Q && l.charCodeAt(1) !== Q)) switch (isNaN(parseFloat(l)) + (-1 !== l.indexOf("("))) {
                                        case 1:
                                            switch (l) {
                                                case "infinite":
                                                case "alternate":
                                                case "backwards":
                                                case "running":
                                                case "normal":
                                                case "forwards":
                                                case "both":
                                                case "none":
                                                case "linear":
                                                case "ease":
                                                case "ease-in":
                                                case "ease-out":
                                                case "ease-in-out":
                                                case "paused":
                                                case "reverse":
                                                case "alternate-reverse":
                                                case "inherit":
                                                case "initial":
                                                case "unset":
                                                case "step-start":
                                                case "step-end":
                                                    break;
                                                default:
                                                    l += De;
                                            }
                                    }
                                    o[r++] = l;
                                }
                                s += (0 === i ? "" : ",") + o.join(" ");
                            }
                    }
                    if (s = c + s + ";", 1 === Ae || 2 === Ae && Le(s, 1)) return N + s + s;
                    return s;
                }(h);else if (0 === Ae || 2 === Ae && !Le(h, 1)) return h;
                switch (u) {
                    case 1015:
                        return 97 === h.charCodeAt(10) ? N + h + h : h;
                    case 951:
                        return 116 === h.charCodeAt(3) ? N + h + h : h;
                    case 963:
                        return 110 === h.charCodeAt(5) ? N + h + h : h;
                    case 1009:
                        if (100 !== h.charCodeAt(4)) break;
                    case 969:
                    case 942:
                        return N + h + h;
                    case 978:
                        return N + h + S + h + h;
                    case 1019:
                    case 983:
                        return N + h + S + h + F + h + h;
                    case 883:
                        if (h.charCodeAt(8) === Q) return N + h + h;
                        if (h.indexOf("image-set(", 11) > 0) return h.replace(z, "$1" + N + "$2") + h;
                        return h;
                    case 932:
                        if (h.charCodeAt(4) === Q) switch (h.charCodeAt(5)) {
                            case 103:
                                return N + "box-" + h.replace("-grow", "") + N + h + F + h.replace("grow", "positive") + h;
                            case 115:
                                return N + h + F + h.replace("shrink", "negative") + h;
                            case 98:
                                return N + h + F + h.replace("basis", "preferred-size") + h;
                        }
                        return N + h + F + h + h;
                    case 964:
                        return N + h + F + "flex-" + h + h;
                    case 1023:
                        if (99 !== h.charCodeAt(8)) break;
                        return l = h.substring(h.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify"), N + "box-pack" + l + N + h + F + "flex-pack" + l + h;
                    case 1005:
                        return t.test(h) ? h.replace(s, ":" + N) + h.replace(s, ":" + S) + h : h;
                    case 1e3:
                        switch (o = (l = h.substring(13).trim()).indexOf("-") + 1, l.charCodeAt(0) + l.charCodeAt(o)) {
                            case 226:
                                l = h.replace(m, "tb");
                                break;
                            case 232:
                                l = h.replace(m, "tb-rl");
                                break;
                            case 220:
                                l = h.replace(m, "lr");
                                break;
                            default:
                                return h;
                        }
                        return N + h + F + l + h;
                    case 1017:
                        if (-1 === h.indexOf("sticky", 9)) return h;
                    case 975:
                        switch (o = (h = e).length - 10, u = (l = (33 === h.charCodeAt(o) ? h.substring(0, o) : h).substring(e.indexOf(":", 7) + 1).trim()).charCodeAt(0) + (0 | l.charCodeAt(7))) {
                            case 203:
                                if (l.charCodeAt(8) < 111) break;
                            case 115:
                                h = h.replace(l, N + l) + ";" + h;
                                break;
                            case 207:
                            case 102:
                                h = h.replace(l, N + (u > 102 ? "inline-" : "") + "box") + ";" + h.replace(l, N + l) + ";" + h.replace(l, F + l + "box") + ";" + h;
                        }
                        return h + ";";
                    case 938:
                        if (h.charCodeAt(5) === Q) switch (h.charCodeAt(6)) {
                            case 105:
                                return l = h.replace("-items", ""), N + h + N + "box-" + l + F + "flex-" + l + h;
                            case 115:
                                return N + h + F + "flex-item-" + h.replace(y, "") + h;
                            default:
                                return N + h + F + "flex-line-pack" + h.replace("align-content", "").replace(y, "") + h;
                        }
                        break;
                    case 973:
                    case 989:
                        if (h.charCodeAt(3) !== Q || 122 === h.charCodeAt(4)) break;
                    case 931:
                    case 953:
                        if (true === j.test(e)) if (115 === (l = e.substring(e.indexOf(":") + 1)).charCodeAt(0)) return Ke(e.replace("stretch", "fill-available"), a, r, c).replace(":fill-available", ":stretch");else return h.replace(l, N + l) + h.replace(l, S + l.replace("fill-", "")) + h;
                        break;
                    case 962:
                        if (h = N + h + (102 === h.charCodeAt(5) ? F + h : "") + h, r + c === 211 && 105 === h.charCodeAt(13) && h.indexOf("transform", 10) > 0) return h.substring(0, h.indexOf(";", 27) + 1).replace(i, "$1" + N + "$2") + h;
                }
                return h;
            }

            function Le(e, a) {
                var r = e.indexOf(1 === a ? ":" : "{"),
                    c = e.substring(0, 3 !== a ? r : 10),
                    s = e.substring(r + 1, e.length - 1);
                return Oe(2 !== a ? c : c.replace(O, "$1"), s, a);
            }

            function Me(e, a) {
                var r = Ke(a, a.charCodeAt(0), a.charCodeAt(1), a.charCodeAt(2));return r !== a + ";" ? r.replace($, " or ($1)").substring(4) : "(" + a + ")";
            }

            function Pe(e, a, r, c, s, t, i, f, n, l) {
                for (var o, h = 0, u = a; h < ye; ++h) {
                    switch (o = $e[h].call(Te, e, u, r, c, s, t, i, f, n, l)) {
                        case void 0:
                        case false:
                        case true:
                        case null:
                            break;
                        default:
                            u = o;
                    }
                }if (u !== a) return u;
            }

            function Qe(e, a, r, c) {
                for (var s = a + 1; s < r; ++s) {
                    switch (c.charCodeAt(s)) {
                        case Z:
                            if (e === T) if (c.charCodeAt(s - 1) === T && a + 2 !== s) return s + 1;
                            break;
                        case I:
                            if (e === Z) return s + 1;
                    }
                }return s;
            }

            function Re(e) {
                for (var a in e) {
                    var r = e[a];
                    switch (a) {
                        case "keyframe":
                            Be = 0 | r;
                            break;
                        case "global":
                            Ce = 0 | r;
                            break;
                        case "cascade":
                            ge = 0 | r;
                            break;
                        case "compress":
                            we = 0 | r;
                            break;
                        case "semicolon":
                            ve = 0 | r;
                            break;
                        case "preserve":
                            me = 0 | r;
                            break;
                        case "prefix":
                            if (Oe = null, !r) Ae = 0;else if ("function" != typeof r) Ae = 1;else Ae = 2, Oe = r;
                    }
                }
                return Re;
            }

            function Te(a, r) {
                if (void 0 !== this && this.constructor === Te) return e(a);
                var s = a,
                    t = s.charCodeAt(0);
                if (t < 33) t = (s = s.trim()).charCodeAt(0);
                if (Be > 0) De = s.replace(d, t === G ? "" : "-");
                if (t = 1, 1 === ge) Ge = s;else Ee = s;
                var i,
                    f = [Ge];
                if (ye > 0) if (void 0 !== (i = Pe(ze, r, f, f, pe, be, 0, 0, 0, 0)) && "string" == typeof i) r = i;
                var n = He(xe, f, r, 0, 0);
                if (ye > 0) if (void 0 !== (i = Pe(je, n, f, f, pe, be, n.length, 0, 0, 0)) && "string" != typeof (n = i)) t = 0;
                return De = "", Ge = "", Ee = "", ke = 0, pe = 1, be = 1, we * t == 0 ? n : n.replace(c, "").replace(g, "").replace(A, "$1").replace(C, "$1").replace(w, " ");
            }
            if (Te.use = function e(a) {
                switch (a) {
                    case void 0:
                    case null:
                        ye = $e.length = 0;
                        break;
                    default:
                        if ("function" == typeof a) $e[ye++] = a;else if ("object" == (typeof a === 'undefined' ? 'undefined' : _typeof2(a))) for (var r = 0, c = a.length; r < c; ++r) {
                            e(a[r]);
                        } else qe = 0 | !!a;
                }
                return e;
            }, Te.set = Re, void 0 !== a) Re(a);
            return Te;
        });
    });

    var stylisRuleSheet = createCommonjsModule(function (module, exports) {
        (function (factory) {
            module['exports'] = factory();
        })(function () {

            return function (insertRule) {
                var delimiter = '/*|*/';
                var needle = delimiter + '}';

                function toSheet(block) {
                    if (block) try {
                        insertRule(block + '}');
                    } catch (e) {}
                }

                return function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
                    switch (context) {
                        case 1:
                            if (depth === 0 && content.charCodeAt(0) === 64) return insertRule(content + ';'), '';
                            break;

                        case 2:
                            if (ns === 0) return content + delimiter;
                            break;

                        case 3:
                            switch (ns) {
                                case 102:
                                case 112:
                                    return insertRule(selectors[0] + content), '';
                                default:
                                    return content + (at === 0 ? delimiter : '');
                            }
                        case -2:
                            content.split(needle).forEach(toSheet);
                    }
                };
            };
        });
    });

    var COMMENT_REGEX = /^\s*\/\/.*$/gm;

    var stylisSplitter = new stylis_min({
        global: false,
        cascade: true,
        keyframe: false,
        prefix: false,
        compress: false,
        semicolon: true
    });

    var stylis = new stylis_min({
        global: false,
        cascade: true,
        keyframe: false,
        prefix: true,
        compress: false,
        semicolon: false });

    var parsingRules = [];

    var returnRulesPlugin = function returnRulesPlugin(context) {
        if (context === -2) {
            var parsedRules = parsingRules;
            parsingRules = [];
            return parsedRules;
        }
    };

    var parseRulesPlugin = stylisRuleSheet(function (rule) {
        parsingRules.push(rule);
    });

    var _componentId = void 0;
    var _selector = void 0;
    var _selectorRegexp = void 0;

    var selfReferenceReplacer = function selfReferenceReplacer(match, offset, string) {
        if (offset > 0 && string.slice(0, offset).indexOf(_selector) !== -1 && string.slice(offset - _selector.length, offset) !== _selector) {
            return '.' + _componentId;
        }

        return match;
    };

    var selfReferenceReplacementPlugin = function selfReferenceReplacementPlugin(context, _, selectors) {
        if (context === 2 && selectors.length && selectors[0].lastIndexOf(_selector) > 0) {
            selectors[0] = selectors[0].replace(_selectorRegexp, selfReferenceReplacer);
        }
    };

    stylis.use([selfReferenceReplacementPlugin, parseRulesPlugin, returnRulesPlugin]);
    stylisSplitter.use([parseRulesPlugin, returnRulesPlugin]);

    var splitByRules = function splitByRules(css) {
        return stylisSplitter('', css);
    };

    function stringifyRules(rules, selector, prefix) {
        var componentId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '&';

        var flatCSS = rules.join('').replace(COMMENT_REGEX, '');

        var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;

        _componentId = componentId;
        _selector = selector;
        _selectorRegexp = new RegExp('\\' + _selector + '\\b', 'g');

        return stylis(prefix || !selector ? '' : selector, cssStr);
    }

    var getNonce = function getNonce() {
        return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;
    };

    var addNameForId = function addNameForId(names, id, name) {
        if (name) {
            var namesForId = names[id] || (names[id] = Object.create(null));
            namesForId[name] = true;
        }
    };

    var resetIdNames = function resetIdNames(names, id) {
        names[id] = Object.create(null);
    };

    var hasNameForId = function hasNameForId(names) {
        return function (id, name) {
            return names[id] !== undefined && names[id][name];
        };
    };

    var stringifyNames = function stringifyNames(names) {
        var str = '';

        for (var id in names) {
            str += Object.keys(names[id]).join(' ') + ' ';
        }
        return str.trim();
    };

    var cloneNames = function cloneNames(names) {
        var clone = Object.create(null);

        for (var id in names) {
            clone[id] = _extends({}, names[id]);
        }
        return clone;
    };

    var sheetForTag = function sheetForTag(tag) {
        if (tag.sheet) return tag.sheet;

        var size = tag.ownerDocument.styleSheets.length;
        for (var i = 0; i < size; i += 1) {
            var sheet = tag.ownerDocument.styleSheets[i];

            if (sheet.ownerNode === tag) return sheet;
        }

        throw new StyledComponentsError(10);
    };

    var safeInsertRule = function safeInsertRule(sheet, cssRule, index) {
        if (!cssRule) return false;

        var maxIndex = sheet.cssRules.length;

        try {
            sheet.insertRule(cssRule, index <= maxIndex ? index : maxIndex);
        } catch (err) {
            return false;
        }

        return true;
    };

    var deleteRules = function deleteRules(sheet, removalIndex, size) {
        var lowerBound = removalIndex - size;
        for (var i = removalIndex; i > lowerBound; i -= 1) {
            sheet.deleteRule(i);
        }
    };

    var makeTextMarker = function makeTextMarker(id) {
        return '\n/* sc-component-id: ' + id + ' */\n';
    };

    var addUpUntilIndex = function addUpUntilIndex(sizes, index) {
        var totalUpToIndex = 0;
        for (var i = 0; i <= index; i += 1) {
            totalUpToIndex += sizes[i];
        }

        return totalUpToIndex;
    };

    var makeStyleTag = function makeStyleTag(target, tagEl, insertBefore) {
        var targetDocument = document;
        if (target) targetDocument = target.ownerDocument;else if (tagEl) targetDocument = tagEl.ownerDocument;

        var el = targetDocument.createElement('style');
        el.setAttribute(SC_ATTR, '');
        el.setAttribute(SC_VERSION_ATTR, "4.4.1");

        var nonce = getNonce();
        if (nonce) {
            el.setAttribute('nonce', nonce);
        }

        el.appendChild(targetDocument.createTextNode(''));

        if (target && !tagEl) {
            target.appendChild(el);
        } else {
            if (!tagEl || !target || !tagEl.parentNode) {
                throw new StyledComponentsError(6);
            }

            tagEl.parentNode.insertBefore(el, insertBefore ? tagEl : tagEl.nextSibling);
        }

        return el;
    };

    var wrapAsHtmlTag = function wrapAsHtmlTag(css, names) {
        return function (additionalAttrs) {
            var nonce = getNonce();
            var attrs = [nonce && 'nonce="' + nonce + '"', SC_ATTR + '="' + stringifyNames(names) + '"', SC_VERSION_ATTR + '="' + "4.4.1" + '"', additionalAttrs];

            var htmlAttr = attrs.filter(Boolean).join(' ');
            return '<style ' + htmlAttr + '>' + css() + '</style>';
        };
    };

    var wrapAsElement = function wrapAsElement(css, names) {
        return function () {
            var _props;

            var props = (_props = {}, _props[SC_ATTR] = stringifyNames(names), _props[SC_VERSION_ATTR] = "4.4.1", _props);

            var nonce = getNonce();
            if (nonce) {
                props.nonce = nonce;
            }

            return React__default.createElement('style', _extends({}, props, { dangerouslySetInnerHTML: { __html: css() } }));
        };
    };

    var getIdsFromMarkersFactory = function getIdsFromMarkersFactory(markers) {
        return function () {
            return Object.keys(markers);
        };
    };

    var makeSpeedyTag = function makeSpeedyTag(el, getImportRuleTag) {
        var names = Object.create(null);
        var markers = Object.create(null);
        var sizes = [];

        var extractImport = getImportRuleTag !== undefined;

        var usedImportRuleTag = false;

        var insertMarker = function insertMarker(id) {
            var prev = markers[id];
            if (prev !== undefined) {
                return prev;
            }

            markers[id] = sizes.length;
            sizes.push(0);
            resetIdNames(names, id);

            return markers[id];
        };

        var insertRules = function insertRules(id, cssRules, name) {
            var marker = insertMarker(id);
            var sheet = sheetForTag(el);
            var insertIndex = addUpUntilIndex(sizes, marker);

            var injectedRules = 0;
            var importRules = [];
            var cssRulesSize = cssRules.length;

            for (var i = 0; i < cssRulesSize; i += 1) {
                var cssRule = cssRules[i];
                var mayHaveImport = extractImport;
                if (mayHaveImport && cssRule.indexOf('@import') !== -1) {
                    importRules.push(cssRule);
                } else if (safeInsertRule(sheet, cssRule, insertIndex + injectedRules)) {
                    mayHaveImport = false;
                    injectedRules += 1;
                }
            }

            if (extractImport && importRules.length > 0) {
                usedImportRuleTag = true;

                getImportRuleTag().insertRules(id + '-import', importRules);
            }

            sizes[marker] += injectedRules;
            addNameForId(names, id, name);
        };

        var removeRules = function removeRules(id) {
            var marker = markers[id];
            if (marker === undefined) return;

            if (el.isConnected === false) return;

            var size = sizes[marker];
            var sheet = sheetForTag(el);
            var removalIndex = addUpUntilIndex(sizes, marker) - 1;
            deleteRules(sheet, removalIndex, size);
            sizes[marker] = 0;
            resetIdNames(names, id);

            if (extractImport && usedImportRuleTag) {
                getImportRuleTag().removeRules(id + '-import');
            }
        };

        var css = function css() {
            var _sheetForTag = sheetForTag(el),
                cssRules = _sheetForTag.cssRules;

            var str = '';

            for (var id in markers) {
                str += makeTextMarker(id);
                var marker = markers[id];
                var end = addUpUntilIndex(sizes, marker);
                var size = sizes[marker];
                for (var i = end - size; i < end; i += 1) {
                    var rule = cssRules[i];
                    if (rule !== undefined) {
                        str += rule.cssText;
                    }
                }
            }

            return str;
        };

        return {
            clone: function clone() {
                throw new StyledComponentsError(5);
            },

            css: css,
            getIds: getIdsFromMarkersFactory(markers),
            hasNameForId: hasNameForId(names),
            insertMarker: insertMarker,
            insertRules: insertRules,
            removeRules: removeRules,
            sealed: false,
            styleTag: el,
            toElement: wrapAsElement(css, names),
            toHTML: wrapAsHtmlTag(css, names)
        };
    };

    var makeTextNode = function makeTextNode(targetDocument, id) {
        return targetDocument.createTextNode(makeTextMarker(id));
    };

    var makeBrowserTag = function makeBrowserTag(el, getImportRuleTag) {
        var names = Object.create(null);
        var markers = Object.create(null);

        var extractImport = getImportRuleTag !== undefined;

        var usedImportRuleTag = false;

        var insertMarker = function insertMarker(id) {
            var prev = markers[id];
            if (prev !== undefined) {
                return prev;
            }

            markers[id] = makeTextNode(el.ownerDocument, id);
            el.appendChild(markers[id]);
            names[id] = Object.create(null);

            return markers[id];
        };

        var insertRules = function insertRules(id, cssRules, name) {
            var marker = insertMarker(id);
            var importRules = [];
            var cssRulesSize = cssRules.length;

            for (var i = 0; i < cssRulesSize; i += 1) {
                var rule = cssRules[i];
                var mayHaveImport = extractImport;
                if (mayHaveImport && rule.indexOf('@import') !== -1) {
                    importRules.push(rule);
                } else {
                    mayHaveImport = false;
                    var separator = i === cssRulesSize - 1 ? '' : ' ';
                    marker.appendData('' + rule + separator);
                }
            }

            addNameForId(names, id, name);

            if (extractImport && importRules.length > 0) {
                usedImportRuleTag = true;

                getImportRuleTag().insertRules(id + '-import', importRules);
            }
        };

        var removeRules = function removeRules(id) {
            var marker = markers[id];
            if (marker === undefined) return;

            var newMarker = makeTextNode(el.ownerDocument, id);
            el.replaceChild(newMarker, marker);
            markers[id] = newMarker;
            resetIdNames(names, id);

            if (extractImport && usedImportRuleTag) {
                getImportRuleTag().removeRules(id + '-import');
            }
        };

        var css = function css() {
            var str = '';

            for (var id in markers) {
                str += markers[id].data;
            }

            return str;
        };

        return {
            clone: function clone() {
                throw new StyledComponentsError(5);
            },

            css: css,
            getIds: getIdsFromMarkersFactory(markers),
            hasNameForId: hasNameForId(names),
            insertMarker: insertMarker,
            insertRules: insertRules,
            removeRules: removeRules,
            sealed: false,
            styleTag: el,
            toElement: wrapAsElement(css, names),
            toHTML: wrapAsHtmlTag(css, names)
        };
    };

    var makeServerTag = function makeServerTag(namesArg, markersArg) {
        var names = namesArg === undefined ? Object.create(null) : namesArg;
        var markers = markersArg === undefined ? Object.create(null) : markersArg;

        var insertMarker = function insertMarker(id) {
            var prev = markers[id];
            if (prev !== undefined) {
                return prev;
            }

            return markers[id] = [''];
        };

        var insertRules = function insertRules(id, cssRules, name) {
            var marker = insertMarker(id);
            marker[0] += cssRules.join(' ');
            addNameForId(names, id, name);
        };

        var removeRules = function removeRules(id) {
            var marker = markers[id];
            if (marker === undefined) return;
            marker[0] = '';
            resetIdNames(names, id);
        };

        var css = function css() {
            var str = '';

            for (var id in markers) {
                var cssForId = markers[id][0];
                if (cssForId) {
                    str += makeTextMarker(id) + cssForId;
                }
            }
            return str;
        };

        var clone = function clone() {
            var namesClone = cloneNames(names);
            var markersClone = Object.create(null);

            for (var id in markers) {
                markersClone[id] = [markers[id][0]];
            }

            return makeServerTag(namesClone, markersClone);
        };

        var tag = {
            clone: clone,
            css: css,
            getIds: getIdsFromMarkersFactory(markers),
            hasNameForId: hasNameForId(names),
            insertMarker: insertMarker,
            insertRules: insertRules,
            removeRules: removeRules,
            sealed: false,
            styleTag: null,
            toElement: wrapAsElement(css, names),
            toHTML: wrapAsHtmlTag(css, names)
        };

        return tag;
    };

    var makeTag = function makeTag(target, tagEl, forceServer, insertBefore, getImportRuleTag) {
        if (IS_BROWSER && !forceServer) {
            var el = makeStyleTag(target, tagEl, insertBefore);

            if (DISABLE_SPEEDY) {
                return makeBrowserTag(el, getImportRuleTag);
            } else {
                return makeSpeedyTag(el, getImportRuleTag);
            }
        }

        return makeServerTag();
    };

    var rehydrate = function rehydrate(tag, els, extracted) {
        for (var i = 0, len = extracted.length; i < len; i += 1) {
            var _extracted$i = extracted[i],
                componentId = _extracted$i.componentId,
                cssFromDOM = _extracted$i.cssFromDOM;

            var cssRules = splitByRules(cssFromDOM);
            tag.insertRules(componentId, cssRules);
        }

        for (var _i = 0, _len = els.length; _i < _len; _i += 1) {
            var el = els[_i];
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
        }
    };

    var SPLIT_REGEX = /\s+/;

    var MAX_SIZE = void 0;
    if (IS_BROWSER) {
        MAX_SIZE = DISABLE_SPEEDY ? 40 : 1000;
    } else {
        MAX_SIZE = -1;
    }

    var sheetRunningId = 0;
    var master = void 0;

    var StyleSheet = function () {

        function StyleSheet() {
            var _this = this;

            var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IS_BROWSER ? getTopUI().Render.getRootDocument() ? getTopUI().Render.getRootDocument().head : getTop().Render.getRootDocument() ? getTop().Render.getRootDocument().head : document.head : null;
            var forceServer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            classCallCheck(this, StyleSheet);

            this.getImportRuleTag = function () {
                var importRuleTag = _this.importRuleTag;

                if (importRuleTag !== undefined) {
                    return importRuleTag;
                }

                var firstTag = _this.tags[0];
                var insertBefore = true;

                return _this.importRuleTag = makeTag(_this.target, firstTag ? firstTag.styleTag : null, _this.forceServer, insertBefore);
            };

            sheetRunningId += 1;
            this.id = sheetRunningId;
            this.forceServer = forceServer;
            this.target = forceServer ? null : target;
            this.tagMap = {};
            this.deferred = {};
            this.rehydratedNames = {};
            this.ignoreRehydratedNames = {};
            this.tags = [];
            this.capacity = 1;
            this.clones = [];
        }

        StyleSheet.prototype.rehydrate = function rehydrate$$1() {
            if (!IS_BROWSER || this.forceServer) return this;

            var els = [];
            var extracted = [];
            var isStreamed = false;

            var nodes = document.querySelectorAll('style[' + SC_ATTR + '][' + SC_VERSION_ATTR + '="' + "4.4.1" + '"]');

            var nodesSize = nodes.length;

            if (!nodesSize) return this;

            for (var i = 0; i < nodesSize; i += 1) {
                var el = nodes[i];

                if (!isStreamed) isStreamed = !!el.getAttribute(SC_STREAM_ATTR);

                var elNames = (el.getAttribute(SC_ATTR) || '').trim().split(SPLIT_REGEX);
                var elNamesSize = elNames.length;
                for (var j = 0, name; j < elNamesSize; j += 1) {
                    name = elNames[j];

                    this.rehydratedNames[name] = true;
                }

                extracted.push.apply(extracted, extractComps(el.textContent));

                els.push(el);
            }

            var extractedSize = extracted.length;
            if (!extractedSize) return this;

            var tag = this.makeTag(null);

            rehydrate(tag, els, extracted);

            this.capacity = Math.max(1, MAX_SIZE - extractedSize);
            this.tags.push(tag);

            for (var _j = 0; _j < extractedSize; _j += 1) {
                this.tagMap[extracted[_j].componentId] = tag;
            }

            return this;
        };

        StyleSheet.reset = function reset() {
            var forceServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            master = new StyleSheet(undefined, forceServer).rehydrate();
        };

        StyleSheet.prototype.clone = function clone() {
            var sheet = new StyleSheet(this.target, this.forceServer);

            this.clones.push(sheet);

            sheet.tags = this.tags.map(function (tag) {
                var ids = tag.getIds();
                var newTag = tag.clone();

                for (var i = 0; i < ids.length; i += 1) {
                    sheet.tagMap[ids[i]] = newTag;
                }

                return newTag;
            });

            sheet.rehydratedNames = _extends({}, this.rehydratedNames);
            sheet.deferred = _extends({}, this.deferred);

            return sheet;
        };

        StyleSheet.prototype.sealAllTags = function sealAllTags() {
            this.capacity = 1;

            this.tags.forEach(function (tag) {
                tag.sealed = true;
            });
        };

        StyleSheet.prototype.makeTag = function makeTag$$1(tag) {
            var lastEl = tag ? tag.styleTag : null;
            var insertBefore = false;

            return makeTag(this.target, lastEl, this.forceServer, insertBefore, this.getImportRuleTag);
        };

        StyleSheet.prototype.getTagForId = function getTagForId(id) {
            var prev = this.tagMap[id];
            if (prev !== undefined && !prev.sealed) {
                return prev;
            }

            var tag = this.tags[this.tags.length - 1];

            this.capacity -= 1;

            if (this.capacity === 0) {
                this.capacity = MAX_SIZE;
                tag = this.makeTag(tag);
                this.tags.push(tag);
            }

            return this.tagMap[id] = tag;
        };

        StyleSheet.prototype.hasId = function hasId(id) {
            return this.tagMap[id] !== undefined;
        };

        StyleSheet.prototype.hasNameForId = function hasNameForId(id, name) {
            if (this.ignoreRehydratedNames[id] === undefined && this.rehydratedNames[name]) {
                return true;
            }

            var tag = this.tagMap[id];
            return tag !== undefined && tag.hasNameForId(id, name);
        };

        StyleSheet.prototype.deferredInject = function deferredInject(id, cssRules) {
            if (this.tagMap[id] !== undefined) return;

            var clones = this.clones;

            for (var i = 0; i < clones.length; i += 1) {
                clones[i].deferredInject(id, cssRules);
            }

            this.getTagForId(id).insertMarker(id);
            this.deferred[id] = cssRules;
        };

        StyleSheet.prototype.inject = function inject(id, cssRules, name) {
            var clones = this.clones;

            for (var i = 0; i < clones.length; i += 1) {
                clones[i].inject(id, cssRules, name);
            }

            var tag = this.getTagForId(id);

            if (this.deferred[id] !== undefined) {
                var rules = this.deferred[id].concat(cssRules);
                tag.insertRules(id, rules, name);

                this.deferred[id] = undefined;
            } else {
                tag.insertRules(id, cssRules, name);
            }
        };

        StyleSheet.prototype.remove = function remove(id) {
            var tag = this.tagMap[id];
            if (tag === undefined) return;

            var clones = this.clones;

            for (var i = 0; i < clones.length; i += 1) {
                clones[i].remove(id);
            }

            tag.removeRules(id);

            this.ignoreRehydratedNames[id] = true;

            this.deferred[id] = undefined;
        };

        StyleSheet.prototype.toHTML = function toHTML() {
            return this.tags.map(function (tag) {
                return tag.toHTML();
            }).join('');
        };

        StyleSheet.prototype.toReactElements = function toReactElements() {
            var id = this.id;

            return this.tags.map(function (tag, i) {
                var key = 'sc-' + id + '-' + i;
                return React.cloneElement(tag.toElement(), { key: key });
            });
        };

        createClass(StyleSheet, null, [{
            key: 'master',
            get: function get$$1() {
                return master || (master = new StyleSheet().rehydrate());
            }

        }, {
            key: 'instance',
            get: function get$$1() {
                return StyleSheet.master;
            }
        }]);
        return StyleSheet;
    }();

    var Keyframes = function () {
        function Keyframes(name, rules) {
            var _this = this;

            classCallCheck(this, Keyframes);

            this.inject = function (styleSheet) {
                if (!styleSheet.hasNameForId(_this.id, _this.name)) {
                    styleSheet.inject(_this.id, _this.rules, _this.name);
                }
            };

            this.toString = function () {
                throw new StyledComponentsError(12, String(_this.name));
            };

            this.name = name;
            this.rules = rules;

            this.id = 'sc-keyframes-' + name;
        }

        Keyframes.prototype.getName = function getName() {
            return this.name;
        };

        return Keyframes;
    }();

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;

    function hyphenateStyleName(string) {
        return string.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,

        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
    };

    function addUnitIfNeeded(name, value) {
        if (value == null || typeof value === 'boolean' || value === '') {
            return '';
        }

        if (typeof value === 'number' && value !== 0 && !(name in unitlessKeys)) {
            return value + 'px';
        }

        return String(value).trim();
    }

    var isFalsish = function isFalsish(chunk) {
        return chunk === undefined || chunk === null || chunk === false || chunk === '';
    };

    var objToCssArray = function objToCssArray(obj, prevKey) {
        var rules = [];
        var keys = Object.keys(obj);

        keys.forEach(function (key) {
            if (!isFalsish(obj[key])) {
                if (isPlainObject(obj[key])) {
                    rules.push.apply(rules, objToCssArray(obj[key], key));

                    return rules;
                } else if (isFunction(obj[key])) {
                    rules.push(hyphenateStyleName(key) + ':', obj[key], ';');

                    return rules;
                }
                rules.push(hyphenateStyleName(key) + ': ' + addUnitIfNeeded(key, obj[key]) + ';');
            }
            return rules;
        });

        return prevKey ? [prevKey + ' {'].concat(rules, ['}']) : rules;
    };

    function flatten(chunk, executionContext, styleSheet) {
        if (Array.isArray(chunk)) {
            var ruleSet = [];

            for (var i = 0, len = chunk.length, result; i < len; i += 1) {
                result = flatten(chunk[i], executionContext, styleSheet);

                if (result === null) continue;else if (Array.isArray(result)) ruleSet.push.apply(ruleSet, result);else ruleSet.push(result);
            }

            return ruleSet;
        }

        if (isFalsish(chunk)) {
            return null;
        }

        if (isStyledComponent(chunk)) {
            return '.' + chunk.styledComponentId;
        }

        if (isFunction(chunk)) {
            if (isStatelessFunction(chunk) && executionContext) {
                var _result = chunk(executionContext);

                if (reactIs_1(_result)) {
                    console.warn(getComponentName(chunk) + ' is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.');
                }

                return flatten(_result, executionContext, styleSheet);
            } else return chunk;
        }

        if (chunk instanceof Keyframes) {
            if (styleSheet) {
                chunk.inject(styleSheet);
                return chunk.getName();
            } else return chunk;
        }

        return isPlainObject(chunk) ? objToCssArray(chunk) : chunk.toString();
    }

    function css(styles) {
        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
        }

        if (isFunction(styles) || isPlainObject(styles)) {
            return flatten(interleave(EMPTY_ARRAY, [styles].concat(interpolations)));
        }

        return flatten(interleave(styles, interpolations));
    }

    function hasFunctionObjectKey(obj) {
        for (var key in obj) {
            if (isFunction(obj[key])) {
                return true;
            }
        }

        return false;
    }

    function isStaticRules(rules, attrs) {
        for (var i = 0; i < rules.length; i += 1) {
            var rule = rules[i];

            if (Array.isArray(rule) && !isStaticRules(rule, attrs)) {
                return false;
            } else if (isFunction(rule) && !isStyledComponent(rule)) {
                return false;
            }
        }

        if (attrs.some(function (x) {
            return isFunction(x) || hasFunctionObjectKey(x);
        })) return false;

        return true;
    }

    var GlobalStyle = function () {
        function GlobalStyle(rules, componentId) {
            classCallCheck(this, GlobalStyle);

            this.rules = rules;
            this.componentId = componentId;
            this.isStatic = isStaticRules(rules, EMPTY_ARRAY);

            if (!StyleSheet.master.hasId(componentId)) {
                StyleSheet.master.deferredInject(componentId, []);
            }
        }

        GlobalStyle.prototype.createStyles = function createStyles(executionContext, styleSheet) {
            var flatCSS = flatten(this.rules, executionContext, styleSheet);
            var css = stringifyRules(flatCSS, '');

            styleSheet.inject(this.componentId, css);
        };

        GlobalStyle.prototype.removeStyles = function removeStyles(styleSheet) {
            var componentId = this.componentId;

            if (styleSheet.hasId(componentId)) {
                styleSheet.remove(componentId);
            }
        };

        GlobalStyle.prototype.renderStyles = function renderStyles(executionContext, styleSheet) {
            this.removeStyles(styleSheet);
            this.createStyles(executionContext, styleSheet);
        };

        return GlobalStyle;
    }();

    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }

        return Object(val);
    }

    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }

            var test1 = new String('abc');
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }

            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }

            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                return false;
            }

            return true;
        } catch (err) {
            return false;
        }
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }

            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }

        return to;
    };

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    var printWarning = function printWarning() {};

    {
        var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};

        printWarning = function printWarning(text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                throw new Error(message);
            } catch (x) {}
        };
    }

    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;

                    try {
                        if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof2(typeSpecs[typeSpecName]) + '`.');
                            err.name = 'Invariant Violation';
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
                    } catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof2(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        loggedTypeFailures[error.message] = true;

                        var stack = getStack ? getStack() : '';

                        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                    }
                }
            }
        }
    }

    var checkPropTypes_1 = checkPropTypes;

    var printWarning$1 = function printWarning$1() {};

    {
        printWarning$1 = function printWarning$1(text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                throw new Error(message);
            } catch (x) {}
        };
    }

    function emptyFunctionThatReturnsNull() {
        return null;
    }

    var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === 'function') {
                return iteratorFn;
            }
        }

        var ANONYMOUS = '<<anonymous>>';

        var ReactPropTypes = {
            array: createPrimitiveTypeChecker('array'),
            bool: createPrimitiveTypeChecker('boolean'),
            func: createPrimitiveTypeChecker('function'),
            number: createPrimitiveTypeChecker('number'),
            object: createPrimitiveTypeChecker('object'),
            string: createPrimitiveTypeChecker('string'),
            symbol: createPrimitiveTypeChecker('symbol'),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker
        };

        function is(x, y) {
            if (x === y) {
                return x !== 0 || 1 / x === 1 / y;
            } else {
                return x !== x && y !== y;
            }
        }

        function PropTypeError(message) {
            this.message = message;
            this.stack = '';
        }

        PropTypeError.prototype = Error.prototype;

        function createChainableTypeChecker(validate) {
            {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
            }

            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;

                if (secret !== ReactPropTypesSecret_1) {
                    if (throwOnDirectAccess) {
                        var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
                        err.name = 'Invariant Violation';
                        throw err;
                    } else if (typeof console !== 'undefined') {
                        var cacheKey = componentName + ':' + propName;
                        if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                            manualPropTypeCallCache[cacheKey] = true;
                            manualPropTypeWarningCount++;
                        }
                    }
                }
                if (props[propName] == null) {
                    if (isRequired) {
                        if (props[propName] === null) {
                            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                        }
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                    }
                    return null;
                } else {
                    return validate(props, propName, componentName, location, propFullName);
                }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
        }

        function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                    var preciseType = getPreciseType(propValue);

                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }

        function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                }
                for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
                    if (error instanceof Error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
                if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
                printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.');
                return emptyFunctionThatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                        return null;
                    }
                }

                var valuesString = JSON.stringify(expectedValues);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
            }
            return createChainableTypeChecker(validate);
        }

        function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                }
                for (var key in propValue) {
                    if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
                printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
                return emptyFunctionThatReturnsNull;
            }

            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (typeof checker !== 'function') {
                    printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                    return emptyFunctionThatReturnsNull;
                }
            }

            function validate(props, propName, componentName, location, propFullName) {
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
                        return null;
                    }
                }

                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
            }
            return createChainableTypeChecker(validate);
        }

        function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                if (!isNode(props[propName])) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                }
                for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        continue;
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createStrictShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                }

                var allKeys = objectAssign({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                        return error;
                    }
                }
                return null;
            }

            return createChainableTypeChecker(validate);
        }

        function isNode(propValue) {
            switch (typeof propValue === 'undefined' ? 'undefined' : _typeof2(propValue)) {
                case 'number':
                case 'string':
                case 'undefined':
                    return true;
                case 'boolean':
                    return !propValue;
                case 'object':
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }

                    return true;
                default:
                    return false;
            }
        }

        function isSymbol(propType, propValue) {
            if (propType === 'symbol') {
                return true;
            }

            if (propValue['@@toStringTag'] === 'Symbol') {
                return true;
            }

            if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                return true;
            }

            return false;
        }

        function getPropType(propValue) {
            var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof2(propValue);
            if (Array.isArray(propValue)) {
                return 'array';
            }
            if (propValue instanceof RegExp) {
                return 'object';
            }
            if (isSymbol(propType, propValue)) {
                return 'symbol';
            }
            return propType;
        }

        function getPreciseType(propValue) {
            if (typeof propValue === 'undefined' || propValue === null) {
                return '' + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === 'object') {
                if (propValue instanceof Date) {
                    return 'date';
                } else if (propValue instanceof RegExp) {
                    return 'regexp';
                }
            }
            return propType;
        }

        function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
                case 'array':
                case 'object':
                    return 'an ' + type;
                case 'boolean':
                case 'date':
                case 'regexp':
                    return 'a ' + type;
                default:
                    return type;
            }
        }

        function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
            }
            return propValue.constructor.name;
        }

        ReactPropTypes.checkPropTypes = checkPropTypes_1;
        ReactPropTypes.PropTypes = ReactPropTypes;

        return ReactPropTypes;
    };

    var propTypes = createCommonjsModule(function (module) {

        {
            var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;

            var isValidElement = function isValidElement(object) {
                return (typeof object === 'undefined' ? 'undefined' : _typeof2(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            };

            var throwOnDirectAccess = true;
            module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
        }
    });

    var shallowEqual = function shallowEqual(newValue, oldValue) {
        return newValue === oldValue;
    };

    var simpleIsEqual = function simpleIsEqual(newArgs, lastArgs) {
        return newArgs.length === lastArgs.length && newArgs.every(function (newArg, index) {
            return shallowEqual(newArg, lastArgs[index]);
        });
    };

    function index(resultFn, isEqual) {
        if (isEqual === void 0) {
            isEqual = simpleIsEqual;
        }

        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;

        var result = function result() {
            for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {
                newArgs[_key] = arguments[_key];
            }

            if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
                return lastResult;
            }

            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
        };

        return result;
    }

    var CLOSING_TAG_R = /^\s*<\/[a-z]/i;

    var ServerStyleSheet = function () {
        function ServerStyleSheet() {
            classCallCheck(this, ServerStyleSheet);

            this.masterSheet = StyleSheet.master;
            this.instance = this.masterSheet.clone();
            this.sealed = false;
        }

        ServerStyleSheet.prototype.seal = function seal() {
            if (!this.sealed) {
                var index = this.masterSheet.clones.indexOf(this.instance);
                this.masterSheet.clones.splice(index, 1);
                this.sealed = true;
            }
        };

        ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {
            if (this.sealed) {
                throw new StyledComponentsError(2);
            }

            return React__default.createElement(StyleSheetManager, { sheet: this.instance }, children);
        };

        ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {
            this.seal();
            return this.instance.toHTML();
        };

        ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {
            this.seal();
            return this.instance.toReactElements();
        };

        ServerStyleSheet.prototype.interleaveWithNodeStream = function interleaveWithNodeStream(readableStream) {
            var _this = this;

            {
                throw new StyledComponentsError(3);
            }

            var instance = this.instance;

            var instanceTagIndex = 0;

            var streamAttr = SC_STREAM_ATTR + '="true"';

            var transformer = new stream.Transform({
                transform: function appendStyleChunks(chunk, _, callback) {
                    var tags = instance.tags;

                    var html = '';

                    for (; instanceTagIndex < tags.length; instanceTagIndex += 1) {
                        var tag = tags[instanceTagIndex];
                        html += tag.toHTML(streamAttr);
                    }

                    instance.sealAllTags();

                    var renderedHtml = chunk.toString();

                    if (CLOSING_TAG_R.test(renderedHtml)) {
                        var endOfClosingTag = renderedHtml.indexOf('>');

                        this.push(renderedHtml.slice(0, endOfClosingTag + 1) + html + renderedHtml.slice(endOfClosingTag + 1));
                    } else this.push(html + renderedHtml);

                    callback();
                }
            });

            readableStream.on('end', function () {
                return _this.seal();
            });

            readableStream.on('error', function (err) {
                _this.seal();

                transformer.emit('error', err);
            });

            return readableStream.pipe(transformer);
        };

        return ServerStyleSheet;
    }();

    var StyleSheetContext = React.createContext();
    var StyleSheetConsumer = StyleSheetContext.Consumer;

    var StyleSheetManager = function (_Component) {
        inherits(StyleSheetManager, _Component);

        function StyleSheetManager(props) {
            classCallCheck(this, StyleSheetManager);

            var _this = possibleConstructorReturn(this, _Component.call(this, props));

            _this.getContext = index(_this.getContext);
            return _this;
        }

        StyleSheetManager.prototype.getContext = function getContext(sheet, target) {
            if (sheet) {
                return sheet;
            } else if (target) {
                return new StyleSheet(target);
            } else {
                throw new StyledComponentsError(4);
            }
        };

        StyleSheetManager.prototype.render = function render() {
            var _props = this.props,
                children = _props.children,
                sheet = _props.sheet,
                target = _props.target;

            return React__default.createElement(StyleSheetContext.Provider, { value: this.getContext(sheet, target) }, React__default.Children.only(children));
        };

        return StyleSheetManager;
    }(React.Component);
    StyleSheetManager.propTypes = {
        sheet: propTypes.oneOfType([propTypes.instanceOf(StyleSheet), propTypes.instanceOf(ServerStyleSheet)]),

        target: propTypes.shape({
            appendChild: propTypes.func.isRequired
        })
    };

    var determineTheme = function determineTheme(props, fallbackTheme) {
        var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;

        var isDefaultTheme = defaultProps ? props.theme === defaultProps.theme : false;
        var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme || defaultProps.theme;


        return theme;
    };

    var ThemeContext = React.createContext();

    var ThemeConsumer = ThemeContext.Consumer;

    var ThemeProvider = function (_Component) {
        inherits(ThemeProvider, _Component);

        function ThemeProvider(props) {
            classCallCheck(this, ThemeProvider);

            var _this = possibleConstructorReturn(this, _Component.call(this, props));

            _this.getContext = index(_this.getContext.bind(_this));
            _this.renderInner = _this.renderInner.bind(_this);
            return _this;
        }

        ThemeProvider.prototype.render = function render() {
            if (!this.props.children) return null;

            return React__default.createElement(ThemeContext.Consumer, null, this.renderInner);
        };

        ThemeProvider.prototype.renderInner = function renderInner(outerTheme) {
            var context = this.getContext(this.props.theme, outerTheme);

            return React__default.createElement(ThemeContext.Provider, { value: context }, this.props.children);
        };

        ThemeProvider.prototype.getTheme = function getTheme(theme, outerTheme) {
            if (isFunction(theme)) {
                var mergedTheme = theme(outerTheme);

                if (mergedTheme === null || Array.isArray(mergedTheme) || (typeof mergedTheme === 'undefined' ? 'undefined' : _typeof(mergedTheme)) !== 'object') {
                    throw new StyledComponentsError(7);
                }

                return mergedTheme;
            }

            if (theme === null || Array.isArray(theme) || (typeof theme === 'undefined' ? 'undefined' : _typeof(theme)) !== 'object') {
                throw new StyledComponentsError(8);
            }

            return _extends({}, outerTheme, theme);
        };

        ThemeProvider.prototype.getContext = function getContext(theme, outerTheme) {
            return this.getTheme(theme, outerTheme);
        };

        return ThemeProvider;
    }(React.Component);

    function murmurhash(c) {
        for (var e = c.length | 0, a = e | 0, d = 0, b; e >= 4;) {
            b = c.charCodeAt(d) & 255 | (c.charCodeAt(++d) & 255) << 8 | (c.charCodeAt(++d) & 255) << 16 | (c.charCodeAt(++d) & 255) << 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), b ^= b >>> 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16) ^ b, e -= 4, ++d;
        }
        switch (e) {
            case 3:
                a ^= (c.charCodeAt(d + 2) & 255) << 16;
            case 2:
                a ^= (c.charCodeAt(d + 1) & 255) << 8;
            case 1:
                a ^= c.charCodeAt(d) & 255, a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);
        }
        a ^= a >>> 13;
        a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);
        return (a ^ a >>> 15) >>> 0;
    }

    if (IS_BROWSER) {
        window.scCGSHMRCache = {};
    }

    function createGlobalStyle(strings) {
        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
        }

        var rules = css.apply(undefined, [strings].concat(interpolations));
        var id = 'sc-global-' + murmurhash(JSON.stringify(rules));
        var style = new GlobalStyle(rules, id);

        var GlobalStyleComponent = function (_React$Component) {
            inherits(GlobalStyleComponent, _React$Component);

            function GlobalStyleComponent(props) {
                classCallCheck(this, GlobalStyleComponent);

                var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

                var _this$constructor = _this.constructor,
                    globalStyle = _this$constructor.globalStyle,
                    styledComponentId = _this$constructor.styledComponentId;

                if (IS_BROWSER) {
                    window.scCGSHMRCache[styledComponentId] = (window.scCGSHMRCache[styledComponentId] || 0) + 1;
                }

                _this.state = {
                    globalStyle: globalStyle,
                    styledComponentId: styledComponentId
                };
                return _this;
            }

            GlobalStyleComponent.prototype.componentWillUnmount = function componentWillUnmount() {
                if (window.scCGSHMRCache[this.state.styledComponentId]) {
                    window.scCGSHMRCache[this.state.styledComponentId] -= 1;
                }

                if (window.scCGSHMRCache[this.state.styledComponentId] === 0) {
                    this.state.globalStyle.removeStyles(this.styleSheet);
                }
            };

            GlobalStyleComponent.prototype.render = function render() {
                var _this2 = this;

                if (React__default.Children.count(this.props.children)) {
                    console.warn('The global style component ' + this.state.styledComponentId + ' was given child JSX. createGlobalStyle does not render children.');
                }

                return React__default.createElement(StyleSheetConsumer, null, function (styleSheet) {
                    _this2.styleSheet = styleSheet || StyleSheet.master;

                    var globalStyle = _this2.state.globalStyle;

                    if (globalStyle.isStatic) {
                        globalStyle.renderStyles(STATIC_EXECUTION_CONTEXT, _this2.styleSheet);

                        return null;
                    } else {
                        return React__default.createElement(ThemeConsumer, null, function (theme) {
                            var defaultProps = _this2.constructor.defaultProps;

                            var context = _extends({}, _this2.props);

                            if (typeof theme !== 'undefined') {
                                context.theme = determineTheme(_this2.props, theme, defaultProps);
                            }

                            globalStyle.renderStyles(context, _this2.styleSheet);

                            return null;
                        });
                    }
                });
            };

            return GlobalStyleComponent;
        }(React__default.Component);

        GlobalStyleComponent.globalStyle = style;
        GlobalStyleComponent.styledComponentId = id;

        return GlobalStyleComponent;
    }

    var charsLength = 52;

    var getAlphabeticChar = function getAlphabeticChar(code) {
        return String.fromCharCode(code + (code > 25 ? 39 : 97));
    };

    function generateAlphabeticName(code) {
        var name = '';
        var x = void 0;

        for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
            name = getAlphabeticChar(x % charsLength) + name;
        }

        return getAlphabeticChar(x % charsLength) + name;
    }

    var replaceWhitespace = function replaceWhitespace(str) {
        return str.replace(/\s|\\n/g, '');
    };

    function keyframes(strings) {
        if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
            console.warn('`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.');
        }

        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
        }

        var rules = css.apply(undefined, [strings].concat(interpolations));

        var name = generateAlphabeticName(murmurhash(replaceWhitespace(JSON.stringify(rules))));

        return new Keyframes(name, stringifyRules(rules, name, '@keyframes'));
    }

    var _TYPE_STATICS;

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDerivedStateFromProps: true,
        propTypes: true,
        type: true
    };

    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };

    var TYPE_STATICS = (_TYPE_STATICS = {}, _TYPE_STATICS[reactIs_3] = {
        $$typeof: true,
        render: true
    }, _TYPE_STATICS);

    var defineProperty$1 = Object.defineProperty,
        getOwnPropertyNames = Object.getOwnPropertyNames,
        _Object$getOwnPropert = Object.getOwnPropertySymbols,
        getOwnPropertySymbols$1 = _Object$getOwnPropert === undefined ? function () {
        return [];
    } : _Object$getOwnPropert,
        getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
        getPrototypeOf = Object.getPrototypeOf,
        objectPrototype = Object.prototype;
    var arrayPrototype = Array.prototype;

    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {

            var inheritedComponent = getPrototypeOf(sourceComponent);

            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }

            var keys = arrayPrototype.concat(getOwnPropertyNames(sourceComponent), getOwnPropertySymbols$1(sourceComponent));

            var targetStatics = TYPE_STATICS[targetComponent.$$typeof] || REACT_STATICS;

            var sourceStatics = TYPE_STATICS[sourceComponent.$$typeof] || REACT_STATICS;

            var i = keys.length;
            var descriptor = void 0;
            var key = void 0;

            while (i--) {
                key = keys[i];

                if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                    descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    if (descriptor) {
                        try {
                            defineProperty$1(targetComponent, key, descriptor);
                        } catch (e) {}
                    }
                }
            }

            return targetComponent;
        }

        return targetComponent;
    }

    var withTheme = function withTheme(Component) {
        var WithTheme = React__default.forwardRef(function (props, ref) {
            return React__default.createElement(ThemeConsumer, null, function (theme) {
                var defaultProps = Component.defaultProps;

                var themeProp = determineTheme(props, theme, defaultProps);

                if (themeProp === undefined) {
                    console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "' + getComponentName(Component) + '"');
                }

                return React__default.createElement(Component, _extends({}, props, { theme: themeProp, ref: ref }));
            });
        });

        hoistNonReactStatics(WithTheme, Component);

        WithTheme.displayName = 'WithTheme(' + getComponentName(Component) + ')';

        return WithTheme;
    };

    var __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS = {
        StyleSheet: StyleSheet
    };

    if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
        console.warn("It looks like you've imported 'styled-components' on React Native.\n" + "Perhaps you're looking to import 'styled-components/native'?\n" + 'Read more about this at https://www.styled-components.com/docs/basics#react-native');
    }

    if (typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Node.js') === -1 && navigator.userAgent.indexOf('jsdom') === -1) {
        window['__styled-components-init__'] = window['__styled-components-init__'] || 0;

        if (window['__styled-components-init__'] === 1) {
            console.warn("It looks like there are several instances of 'styled-components' initialized in this application. " + 'This may cause dynamic styles not rendering properly, errors happening during rehydration process ' + 'and makes your application bigger without a good reason.\n\n' + 'See https://s-c.sh/2BAXzed for more info.');
        }

        window['__styled-components-init__'] += 1;
    }

    var secondary = Object.freeze({
        createGlobalStyle: createGlobalStyle,
        css: css,
        isStyledComponent: isStyledComponent,
        keyframes: keyframes,
        ServerStyleSheet: ServerStyleSheet,
        StyleSheetConsumer: StyleSheetConsumer,
        StyleSheetContext: StyleSheetContext,
        StyleSheetManager: StyleSheetManager,
        ThemeConsumer: ThemeConsumer,
        ThemeContext: ThemeContext,
        ThemeProvider: ThemeProvider,
        withTheme: withTheme,
        __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS: __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS
    });

    function constructWithOptions(componentConstructor, tag) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;

        if (!reactIs_2(tag)) {
            throw new StyledComponentsError(1, String(tag));
        }

        var templateFunction = function templateFunction() {
            return componentConstructor(tag, options, css.apply(undefined, arguments));
        };

        templateFunction.withConfig = function (config) {
            return constructWithOptions(componentConstructor, tag, _extends({}, options, config));
        };

        templateFunction.attrs = function (attrs) {
            return constructWithOptions(componentConstructor, tag, _extends({}, options, {
                attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean)
            }));
        };

        return templateFunction;
    }

    function memoize(fn) {
        var cache = {};
        return function (arg) {
            if (cache[arg] === undefined) cache[arg] = fn(arg);
            return cache[arg];
        };
    }

    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;

    var index$1 = memoize(function (prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });

    function getType(payload) {
        return Object.prototype.toString.call(payload).slice(8, -1);
    }

    function isPlainObject$1(payload) {
        if (getType(payload) !== 'Object') return false;
        return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;
    }

    function isArray(payload) {
        return getType(payload) === 'Array';
    }

    function mergeRecursively(origin, newComer, extensions) {
        if (!isPlainObject$1(newComer)) {
            if (extensions && isArray(extensions)) {
                extensions.forEach(function (extend) {
                    newComer = extend(origin, newComer);
                });
            }
            return newComer;
        }

        var newObject = isPlainObject$1(origin) ? Object.keys(origin).reduce(function (carry, key) {
            var targetVal = origin[key];

            if (!Object.keys(newComer).includes(key)) carry[key] = targetVal;
            return carry;
        }, {}) : {};
        return Object.keys(newComer).reduce(function (carry, key) {
            var newVal = newComer[key];
            var targetVal = isPlainObject$1(origin) ? origin[key] : undefined;

            if (extensions && isArray(extensions)) {
                extensions.forEach(function (extend) {
                    newVal = extend(targetVal, newVal);
                });
            }

            if (targetVal === undefined) {
                carry[key] = newVal;
                return carry;
            }

            if (isPlainObject$1(newVal)) {
                carry[key] = mergeRecursively(targetVal, newVal, extensions);
                return carry;
            }

            carry[key] = newVal;
            return carry;
        }, newObject);
    }

    function index$2(origin) {
        var newComers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            newComers[_i - 1] = arguments[_i];
        }
        var extensions = null;
        var base = origin;
        if (isPlainObject$1(origin) && origin.extensions && Object.keys(origin).length === 1) {
            base = {};
            extensions = origin.extensions;
        }
        return newComers.reduce(function (result, newComer) {
            return mergeRecursively(result, newComer, extensions);
        }, base);
    }

    var hasher = function hasher(str) {
        return generateAlphabeticName(murmurhash(str));
    };

    var ComponentStyle = function () {
        function ComponentStyle(rules, attrs, componentId) {
            classCallCheck(this, ComponentStyle);

            this.rules = rules;
            this.isStatic = "development" === 'production' && isStaticRules(rules, attrs);
            this.componentId = componentId;

            if (!StyleSheet.master.hasId(componentId)) {
                StyleSheet.master.deferredInject(componentId, []);
            }
        }

        ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {
            var isStatic = this.isStatic,
                componentId = this.componentId,
                lastClassName = this.lastClassName;

            if (IS_BROWSER && isStatic && typeof lastClassName === 'string' && styleSheet.hasNameForId(componentId, lastClassName)) {
                return lastClassName;
            }

            var flatCSS = flatten(this.rules, executionContext, styleSheet);
            var name = hasher(this.componentId + flatCSS.join(''));
            if (!styleSheet.hasNameForId(componentId, name)) {
                styleSheet.inject(this.componentId, stringifyRules(flatCSS, '.' + name, undefined, componentId), name);
            }

            this.lastClassName = name;
            return name;
        };

        ComponentStyle.generateName = function generateName(str) {
            return hasher(str);
        };

        return ComponentStyle;
    }();

    var LIMIT = 200;

    var createWarnTooManyClasses = function createWarnTooManyClasses(displayName) {
        var generatedClasses = {};
        var warningSeen = false;

        return function (className) {
            if (!warningSeen) {
                generatedClasses[className] = true;
                if (Object.keys(generatedClasses).length >= LIMIT) {
                    console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs(props => ({\n' + '    style: {\n' + '      background: props.background,\n' + '    },\n' + '  }))`width: 100%;`\n\n' + '  <Component />');
                    warningSeen = true;
                    generatedClasses = {};
                }
            }
        };
    };

    var escapeRegex = /[[\].#*$><+~=|^:(),"'`-]+/g;
    var dashesAtEnds = /(^-|-$)/g;

    function escape(str) {
        return str.replace(escapeRegex, '-').replace(dashesAtEnds, '');
    }

    function isTag(target) {
        return typeof target === 'string' && target.charAt(0) === target.charAt(0).toLowerCase();
    }

    function generateDisplayName(target) {
        return isTag(target) ? 'styled.' + target : 'Styled(' + getComponentName(target) + ')';
    }

    function isDerivedReactComponent(fn) {
        return !!(fn && fn.prototype && fn.prototype.isReactComponent);
    }

    var once = function once(cb) {
        var called = false;

        return function () {
            if (!called) {
                called = true;
                cb.apply(undefined, arguments);
            }
        };
    };

    var identifiers = {};

    function generateId(_ComponentStyle, _displayName, parentComponentId) {
        var displayName = typeof _displayName !== 'string' ? 'sc' : escape(_displayName);

        var nr = (identifiers[displayName] || 0) + 1;
        identifiers[displayName] = nr;

        var componentId = displayName + '-' + _ComponentStyle.generateName(displayName + nr);

        return parentComponentId ? parentComponentId + '-' + componentId : componentId;
    }

    var StyledComponent = function (_Component) {
        inherits(StyledComponent, _Component);

        function StyledComponent() {
            classCallCheck(this, StyledComponent);

            var _this = possibleConstructorReturn(this, _Component.call(this));

            _this.attrs = {};

            _this.renderOuter = _this.renderOuter.bind(_this);
            _this.renderInner = _this.renderInner.bind(_this);

            {
                _this.warnInnerRef = once(function (displayName) {
                    return console.warn('The "innerRef" API has been removed in styled-components v4 in favor of React 16 ref forwarding, use "ref" instead like a typical component. "innerRef" was detected on component "' + displayName + '".');
                });

                _this.warnAttrsFnObjectKeyDeprecated = once(function (key, displayName) {
                    return console.warn('Functions as object-form attrs({}) keys are now deprecated and will be removed in a future version of styled-components. Switch to the new attrs(props => ({})) syntax instead for easier and more powerful composition. The attrs key in question is "' + key + '" on component "' + displayName + '".', '\n ' + new Error().stack);
                });

                _this.warnNonStyledComponentAttrsObjectKey = once(function (key, displayName) {
                    return console.warn('It looks like you\'ve used a non styled-component as the value for the "' + key + '" prop in an object-form attrs constructor of "' + displayName + '".\n' + 'You should use the new function-form attrs constructor which avoids this issue: attrs(props => ({ yourStuff }))\n' + "To continue using the deprecated object syntax, you'll need to wrap your component prop in a function to make it available inside the styled component (you'll still get the deprecation warning though.)\n" + ('For example, { ' + key + ': () => InnerComponent } instead of { ' + key + ': InnerComponent }'));
                });
            }
            return _this;
        }

        StyledComponent.prototype.render = function render() {
            return React__default.createElement(StyleSheetConsumer, null, this.renderOuter);
        };

        StyledComponent.prototype.renderOuter = function renderOuter() {
            var styleSheet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : StyleSheet.master;

            this.styleSheet = styleSheet;

            if (this.props.forwardedComponent.componentStyle.isStatic) return this.renderInner();

            return React__default.createElement(ThemeConsumer, null, this.renderInner);
        };

        StyledComponent.prototype.renderInner = function renderInner(theme) {
            var _props$forwardedCompo = this.props.forwardedComponent,
                componentStyle = _props$forwardedCompo.componentStyle,
                defaultProps = _props$forwardedCompo.defaultProps,
                displayName = _props$forwardedCompo.displayName,
                foldedComponentIds = _props$forwardedCompo.foldedComponentIds,
                styledComponentId = _props$forwardedCompo.styledComponentId,
                target = _props$forwardedCompo.target;

            var generatedClassName = void 0;
            if (componentStyle.isStatic) {
                generatedClassName = this.generateAndInjectStyles(EMPTY_OBJECT, this.props);
            } else {
                generatedClassName = this.generateAndInjectStyles(determineTheme(this.props, theme, defaultProps) || EMPTY_OBJECT, this.props);
            }

            var elementToBeCreated = this.props.as || this.attrs.as || target;
            var isTargetTag = isTag(elementToBeCreated);

            var propsForElement = {};
            var computedProps = _extends({}, this.props, this.attrs);

            var key = void 0;

            for (key in computedProps) {
                if (key === 'innerRef' && isTargetTag) {
                    this.warnInnerRef(displayName);
                }

                if (key === 'forwardedComponent' || key === 'as') {
                    continue;
                } else if (key === 'forwardedRef') propsForElement.ref = computedProps[key];else if (key === 'forwardedAs') propsForElement.as = computedProps[key];else if (!isTargetTag || index$1(key)) {
                    propsForElement[key] = computedProps[key];
                }
            }

            if (this.props.style && this.attrs.style) {
                propsForElement.style = _extends({}, this.attrs.style, this.props.style);
            }

            propsForElement.className = Array.prototype.concat(foldedComponentIds, styledComponentId, generatedClassName !== styledComponentId ? generatedClassName : null, this.props.className, this.attrs.className).filter(Boolean).join(' ');

            return React.createElement(elementToBeCreated, propsForElement);
        };

        StyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props, attrs) {
            var _this2 = this;

            var context = _extends({}, props, { theme: theme });

            if (!attrs.length) return context;

            this.attrs = {};

            attrs.forEach(function (attrDef) {
                var resolvedAttrDef = attrDef;
                var attrDefWasFn = false;
                var attr = void 0;
                var key = void 0;

                if (isFunction(resolvedAttrDef)) {
                    resolvedAttrDef = resolvedAttrDef(context);
                    attrDefWasFn = true;
                }

                for (key in resolvedAttrDef) {
                    attr = resolvedAttrDef[key];

                    if (!attrDefWasFn) {
                        if (isFunction(attr) && !isDerivedReactComponent(attr) && !isStyledComponent(attr)) {
                            {
                                _this2.warnAttrsFnObjectKeyDeprecated(key, props.forwardedComponent.displayName);
                            }

                            attr = attr(context);

                            if (React__default.isValidElement(attr)) {
                                _this2.warnNonStyledComponentAttrsObjectKey(key, props.forwardedComponent.displayName);
                            }
                        }
                    }

                    _this2.attrs[key] = attr;
                    context[key] = attr;
                }
            });

            return context;
        };

        StyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
            var _props$forwardedCompo2 = props.forwardedComponent,
                attrs = _props$forwardedCompo2.attrs,
                componentStyle = _props$forwardedCompo2.componentStyle,
                warnTooManyClasses = _props$forwardedCompo2.warnTooManyClasses;

            if (componentStyle.isStatic && !attrs.length) {
                return componentStyle.generateAndInjectStyles(EMPTY_OBJECT, this.styleSheet);
            }

            var className = componentStyle.generateAndInjectStyles(this.buildExecutionContext(theme, props, attrs), this.styleSheet);

            if (warnTooManyClasses) warnTooManyClasses(className);

            return className;
        };

        return StyledComponent;
    }(React.Component);

    function createStyledComponent(target, options, rules) {
        var isTargetStyledComp = isStyledComponent(target);
        var isClass = !isTag(target);

        var _options$displayName = options.displayName,
            displayName = _options$displayName === undefined ? generateDisplayName(target) : _options$displayName,
            _options$componentId = options.componentId,
            componentId = _options$componentId === undefined ? generateId(ComponentStyle, options.displayName, options.parentComponentId) : _options$componentId,
            _options$ParentCompon = options.ParentComponent,
            ParentComponent = _options$ParentCompon === undefined ? StyledComponent : _options$ParentCompon,
            _options$attrs = options.attrs,
            attrs = _options$attrs === undefined ? EMPTY_ARRAY : _options$attrs;

        var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + '-' + options.componentId : options.componentId || componentId;

        var finalAttrs = isTargetStyledComp && target.attrs ? Array.prototype.concat(target.attrs, attrs).filter(Boolean) : attrs;

        var componentStyle = new ComponentStyle(isTargetStyledComp ? target.componentStyle.rules.concat(rules) : rules, finalAttrs, styledComponentId);

        var WrappedStyledComponent = void 0;
        var forwardRef = function forwardRef(props, ref) {
            return React__default.createElement(ParentComponent, _extends({}, props, { forwardedComponent: WrappedStyledComponent, forwardedRef: ref }));
        };
        forwardRef.displayName = displayName;
        WrappedStyledComponent = React__default.forwardRef(forwardRef);
        WrappedStyledComponent.displayName = displayName;

        WrappedStyledComponent.attrs = finalAttrs;

        WrappedStyledComponent.componentStyle = componentStyle;

        WrappedStyledComponent.foldedComponentIds = isTargetStyledComp ? Array.prototype.concat(target.foldedComponentIds, target.styledComponentId) : EMPTY_ARRAY;

        WrappedStyledComponent.styledComponentId = styledComponentId;

        WrappedStyledComponent.target = isTargetStyledComp ? target.target : target;

        WrappedStyledComponent.withComponent = function withComponent(tag) {
            var previousComponentId = options.componentId,
                optionsToCopy = objectWithoutProperties(options, ['componentId']);

            var newComponentId = previousComponentId && previousComponentId + '-' + (isTag(tag) ? tag : escape(getComponentName(tag)));

            var newOptions = _extends({}, optionsToCopy, {
                attrs: finalAttrs,
                componentId: newComponentId,
                ParentComponent: ParentComponent
            });

            return createStyledComponent(tag, newOptions, rules);
        };

        Object.defineProperty(WrappedStyledComponent, 'defaultProps', {
            get: function get$$1() {
                return this._foldedDefaultProps;
            },
            set: function set$$1(obj) {
                this._foldedDefaultProps = isTargetStyledComp ? index$2(target.defaultProps, obj) : obj;
            }
        });

        {
            WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName);
        }

        WrappedStyledComponent.toString = function () {
            return '.' + WrappedStyledComponent.styledComponentId;
        };

        if (isClass) {
            hoistNonReactStatics(WrappedStyledComponent, target, {
                attrs: true,
                componentStyle: true,
                displayName: true,
                foldedComponentIds: true,
                styledComponentId: true,
                target: true,
                withComponent: true
            });
        }

        return WrappedStyledComponent;
    }

    var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', 'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'marker', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

    var styled = function styled(tag) {
        return constructWithOptions(createStyledComponent, tag);
    };

    domElements.forEach(function (domElement) {
        styled[domElement] = styled(domElement);
    });

    for (var key in secondary) {
        styled[key] = secondary[key];
    }

    return styled;
});
// minified by minify-libs -- sangjin